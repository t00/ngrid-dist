"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NGridCypressHarnessActions = void 0;
function getCoords(el) {
    const domRect = el.getBoundingClientRect();
    const coords = { x: domRect.left + (domRect.width / 2 || 0), y: domRect.top + (domRect.height / 2 || 0) };
    return coords;
}
class NGridCypressHarnessActions {
    constructor(harness) {
        this.harness = harness;
    }
    dragMoveColumns(sourceColumnId, targetColumnId, opts) {
        const sourceEl = this.harness.element.querySelector(`.cdk-column-${sourceColumnId}.cdk-drag`);
        const targetEl = this.harness.element.querySelector(`.cdk-column-${targetColumnId}.cdk-drag`);
        if (!sourceEl) {
            throw new Error(`Invalid column: ${sourceColumnId}`);
        }
        if (!targetEl) {
            throw new Error(`Invalid column: ${targetColumnId}`);
        }
        opts = Cypress._.defaults(opts, { delay: 0, steps: 0, smooth: false });
        if (opts.smooth) {
            opts.steps = Math.max(opts.steps || 0, 10);
        }
        const defaultView = sourceEl.ownerDocument.defaultView;
        const elFromCoords = (coords) => defaultView.document.elementFromPoint(coords.x, coords.y);
        const send = (type, coords, el) => {
            el = el || elFromCoords(coords);
            el.dispatchEvent(new defaultView.MouseEvent(type, Object.assign({}, { clientX: coords.x, clientY: coords.y }, { bubbles: true, cancelable: true })));
        };
        const fromCoords = getCoords(sourceEl);
        const toCoords = getCoords(targetEl);
        const _log = Cypress.log({
            $el: Cypress.$(sourceEl),
            name: 'drag to',
            message: targetColumnId,
        });
        _log.snapshot('before', { next: 'after', at: 0 });
        _log.set({ consoleProps: () => ({ coords: toCoords }) });
        send('mouseover', fromCoords, sourceEl);
        send('mousedown', fromCoords, sourceEl);
        return cy.then(() => Cypress.Promise
            .try(() => {
            const steps = opts.steps;
            if (steps > 0) {
                const dx = (toCoords.x - fromCoords.x) / steps;
                const dy = (toCoords.y - fromCoords.y) / steps;
                return Cypress.Promise.map(Array(steps).fill(null), (v, i) => {
                    i = steps - 1 - i;
                    const _to = {
                        x: fromCoords.x + dx * (i),
                        y: fromCoords.y + dy * (i),
                    };
                    send('mousemove', _to, sourceEl);
                    return Cypress.Promise.delay(opts.delay);
                }, { concurrency: 1 });
            }
        })
            .then(() => {
            send('mousemove', toCoords, sourceEl);
            send('mouseover', toCoords);
            send('mousemove', toCoords);
            send('mouseup', toCoords);
            _log.snapshot('after', { at: 1, next: null }).end();
            return this.harness;
        }));
    }
}
exports.NGridCypressHarnessActions = NGridCypressHarnessActions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQtY3lwcmVzcy9zcmMvbGliL25ncmlkLWhhcm5lc3MvYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxTQUFTLFNBQVMsQ0FBQyxFQUFXO0lBQzVCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO0lBQzFDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDekcsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBb0JELE1BQWEsMEJBQTBCO0lBQ3JDLFlBQTZCLE9BQTRCO1FBQTVCLFlBQU8sR0FBUCxPQUFPLENBQXFCO0lBQUksQ0FBQztJQUc5RCxlQUFlLENBQUMsY0FBc0IsRUFBRSxjQUFzQixFQUFFLElBQWtCO1FBQ2hGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxlQUFlLGNBQWMsV0FBVyxDQUFDLENBQUM7UUFDOUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGVBQWUsY0FBYyxXQUFXLENBQUMsQ0FBQztRQUU5RixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsY0FBYyxFQUFFLENBQUMsQ0FBQztTQUN0RDtRQUNELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixjQUFjLEVBQUUsQ0FBQyxDQUFD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LEdBQUcsQ0FBQyxDQUFDO29CQUVsQixNQUFNLEdBQUcsR0FBRzt3QkFDVixDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQzFCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDM0IsQ0FBQztvQkFFRixJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFFakMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBRTNDLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNULElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTVFRCxnRUE0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR3JpZEN5cHJlc3NIYXJuZXNzIH0gZnJvbSAnLi9uZ3JpZC1oYXJuZXNzJztcblxuZnVuY3Rpb24gZ2V0Q29vcmRzKGVsOiBFbGVtZW50KSB7XG4gIGNvbnN0IGRvbVJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICBjb25zdCBjb29yZHMgPSB7IHg6IGRvbVJlY3QubGVmdCArIChkb21SZWN0LndpZHRoIC8gMiB8fCAwKSwgeTogZG9tUmVjdC50b3AgKyAoZG9tUmVjdC5oZWlnaHQgLyAyIHx8IDApIH1cbiAgcmV0dXJuIGNvb3Jkc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERyYWdPcHRpb25zIHtcbiAgLyoqXG4gICAqIGRlbGF5IGluIGJldHdlZW4gc3RlcHNcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBpbnRlcnBvbGF0aW9uIGJldHdlZW4gY29vcmRzXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHN0ZXBzPzogbnVtYmVyO1xuICAvKipcbiAgICogPj0xMCBzdGVwc1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc21vb3RoPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIE5HcmlkQ3lwcmVzc0hhcm5lc3NBY3Rpb25zIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBoYXJuZXNzOiBOR3JpZEN5cHJlc3NIYXJuZXNzKSB7IH1cblxuXG4gIGRyYWdNb3ZlQ29sdW1ucyhzb3VyY2VDb2x1bW5JZDogc3RyaW5nLCB0YXJnZXRDb2x1bW5JZDogc3RyaW5nLCBvcHRzPzogRHJhZ09wdGlvbnMpOiBDeXByZXNzLkNoYWluYWJsZTxOR3JpZEN5cHJlc3NIYXJuZXNzPiB7XG4gICAgY29uc3Qgc291cmNlRWwgPSB0aGlzLmhhcm5lc3MuZWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuY2RrLWNvbHVtbi0ke3NvdXJjZUNvbHVtbklkfS5jZGstZHJhZ2ApO1xuICAgIGNvbnN0IHRhcmdldEVsID0gdGhpcy5oYXJuZXNzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihgLmNkay1jb2x1bW4tJHt0YXJnZXRDb2x1bW5JZH0uY2RrLWRyYWdgKTtcblxuICAgIGlmICghc291cmNlRWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb2x1bW46ICR7c291cmNlQ29sdW1uSWR9YCk7XG4gICAgfVxuICAgIGlmICghdGFyZ2V0RWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb2x1bW46ICR7dGFyZ2V0Q29sdW1uSWR9YCk7XG4gICAgfVxuXG4gICAgb3B0cyA9IEN5cHJlc3MuXy5kZWZhdWx0cyhvcHRzLCB7IGRlbGF5OiAwLCBzdGVwczogMCwgc21vb3RoOiBmYWxzZSB9KTtcblxuICAgIGlmIChvcHRzLnNtb290aCkge1xuICAgICAgb3B0cy5zdGVwcyA9IE1hdGgubWF4KG9wdHMuc3RlcHMgfHwgMCwgMTApO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRWaWV3ID0gc291cmNlRWwub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICBjb25zdCBlbEZyb21Db29yZHMgPSAoY29vcmRzOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRDb29yZHM+KSA9PiBkZWZhdWx0Vmlldy5kb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGNvb3Jkcy54LCBjb29yZHMueSk7XG4gICAgY29uc3Qgc2VuZCA9ICh0eXBlOiBzdHJpbmcsIGNvb3JkczogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0Q29vcmRzPiwgZWw/OiBFbGVtZW50KSA9PiB7XG4gICAgICBlbCA9IGVsIHx8IGVsRnJvbUNvb3Jkcyhjb29yZHMpXG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBkZWZhdWx0Vmlldy5Nb3VzZUV2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oe30sIHsgY2xpZW50WDogY29vcmRzLngsIGNsaWVudFk6IGNvb3Jkcy55IH0sIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZyb21Db29yZHMgPSBnZXRDb29yZHMoc291cmNlRWwpO1xuICAgIGNvbnN0IHRvQ29vcmRzID0gZ2V0Q29vcmRzKHRhcmdldEVsKTtcblxuICAgIGNvbnN0IF9sb2cgPSBDeXByZXNzLmxvZyh7XG4gICAgICAkZWw6IEN5cHJlc3MuJChzb3VyY2VFbCBhcyBhbnkpLFxuICAgICAgbmFtZTogJ2RyYWcgdG8nLFxuICAgICAgbWVzc2FnZTogdGFyZ2V0Q29sdW1uSWQsXG4gICAgfSk7XG5cbiAgICBfbG9nLnNuYXBzaG90KCdiZWZvcmUnLCB7IG5leHQ6ICdhZnRlcicsIGF0OiAwIH0pO1xuICAgIF9sb2cuc2V0KHsgY29uc29sZVByb3BzOiAoKSA9PiAoeyBjb29yZHM6IHRvQ29vcmRzIH0pIH0pO1xuXG4gICAgc2VuZCgnbW91c2VvdmVyJywgZnJvbUNvb3Jkcywgc291cmNlRWwpO1xuICAgIHNlbmQoJ21vdXNlZG93bicsIGZyb21Db29yZHMsIHNvdXJjZUVsKTtcblxuICAgIHJldHVybiBjeS50aGVuKCgpID0+IEN5cHJlc3MuUHJvbWlzZVxuICAgICAgLnRyeSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0ZXBzID0gb3B0cy5zdGVwcztcbiAgICAgICAgaWYgKHN0ZXBzID4gMCkge1xuXG4gICAgICAgICAgY29uc3QgZHggPSAodG9Db29yZHMueCAtIGZyb21Db29yZHMueCkgLyBzdGVwcztcbiAgICAgICAgICBjb25zdCBkeSA9ICh0b0Nvb3Jkcy55IC0gZnJvbUNvb3Jkcy55KSAvIHN0ZXBzO1xuXG4gICAgICAgICAgcmV0dXJuIEN5cHJlc3MuUHJvbWlzZS5tYXAoQXJyYXkoc3RlcHMpLmZpbGwobnVsbCksICh2LCBpKSA9PiB7XG4gICAgICAgICAgICBpID0gc3RlcHMgLSAxIC0gaTtcblxuICAgICAgICAgICAgY29uc3QgX3RvID0ge1xuICAgICAgICAgICAgICB4OiBmcm9tQ29vcmRzLnggKyBkeCAqIChpKSxcbiAgICAgICAgICAgICAgeTogZnJvbUNvb3Jkcy55ICsgZHkgKiAoaSksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZW5kKCdtb3VzZW1vdmUnLCBfdG8sIHNvdXJjZUVsKTtcblxuICAgICAgICAgICAgcmV0dXJuIEN5cHJlc3MuUHJvbWlzZS5kZWxheShvcHRzLmRlbGF5KTtcblxuICAgICAgICAgIH0sIHsgY29uY3VycmVuY3k6IDEgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHNlbmQoJ21vdXNlbW92ZScsIHRvQ29vcmRzLCBzb3VyY2VFbCk7XG4gICAgICAgIHNlbmQoJ21vdXNlb3ZlcicsIHRvQ29vcmRzKTtcbiAgICAgICAgc2VuZCgnbW91c2Vtb3ZlJywgdG9Db29yZHMpO1xuICAgICAgICBzZW5kKCdtb3VzZXVwJywgdG9Db29yZHMpO1xuICAgICAgICBfbG9nLnNuYXBzaG90KCdhZnRlcicsIHsgYXQ6IDEsIG5leHQ6IG51bGwgfSkuZW5kKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmhhcm5lc3M7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==
{"version":3,"file":"pebula-ngrid-material-sort.js","sources":["ng://@pebula/ngrid-material/sort/lib/mat-sort.directive.ts","ng://@pebula/ngrid-material/sort/lib/mat-sort-component-extension.ts","ng://@pebula/ngrid-material/sort/lib/mat-sort.module.ts"],"sourcesContent":["import { Directive, OnDestroy } from '@angular/core';\nimport { Sort, MatSort, MatSortHeader, SortDirection } from '@angular/material/sort';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, TablePlugin, PblNgridSortDefinition } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    matSort?: PblNgridMatSortDirective;\n  }\n}\nconst PLUGIN_KEY: 'matSort' = 'matSort';\n\n@TablePlugin({ id: PLUGIN_KEY })\n@Directive({ selector: 'pbl-ngrid[matSort]', exportAs: 'pblMatSort' })\n@UnRx()\nexport class PblNgridMatSortDirective implements OnDestroy {\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<any>, private pluginCtrl: PblNgridPluginController, public sort: MatSort) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    let origin: 'ds' | 'click' = 'click';\n    this.sort.sortChange\n      .pipe(UnRx(this))\n      .subscribe( s => {\n        this.onSort(s, origin);\n        origin = 'click';\n      });\n\n    pluginCtrl.events\n      .subscribe( e => {\n        if (e.kind === 'onInvalidateHeaders') {\n          if (table.ds && !table.ds.sort.column) {\n            if (this.sort && this.sort.active) {\n              this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n            }\n          }\n        }\n        if (e.kind === 'onDataSource') {\n          UnRx.kill(this, e.prev);\n          if (this.sort && this.sort.active) {\n            this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n          }\n\n          table.ds.sortChange\n            .pipe(UnRx(this, e.curr))\n            .subscribe( event => {\n              if (this.sort && event.column) {\n                const _sort = event.sort || {};\n                if (this.sort.active === event.column.id && this.sort.direction === (_sort.order || '')) { return; }\n                const sortable: MatSortHeader = this.sort.sortables.get(event.column.id) as any;\n                if (sortable) {\n                  origin = 'ds';\n                  this.sort.active = undefined;\n                  sortable.start = _sort.order || 'asc';\n                  sortable._handleClick();\n                }\n              } else if (this.sort.active) { // clear mode (hit from code, not click).\n                const sortable: MatSortHeader = this.sort.sortables.get(this.sort.active) as any;\n                if (sortable ) {\n                  if (!sortable.disableClear) {\n                    let nextSortDir: SortDirection;\n                    while (nextSortDir = this.sort.getNextSortDirection(sortable)) {\n                      this.sort.direction = nextSortDir;\n                    }\n                  }\n                  origin = 'ds';\n                  sortable._handleClick();\n                }\n              }\n            });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.table);\n  }\n\n  private onSort(sort: Sort, origin: 'ds' | 'click'): void {\n    const table = this.table;\n    const column = table.columnApi.visibleColumns.find(c => c.id === sort.active);\n\n    if ( origin !== 'click' || !column || !column.sort ) {\n      return;\n    } else {\n      const newSort: PblNgridSortDefinition = { };\n      const sortFn = typeof column.sort === 'function' && column.sort;\n      if (sort.direction) {\n        newSort.order = sort.direction;\n      }\n      if (sortFn) {\n        newSort.sortFn = sortFn;\n      }\n      const currentSort = table.ds.sort;\n      if (column === currentSort.column) {\n        const _sort = currentSort.sort || {};\n        if (newSort.order === _sort.order) {\n          return;\n        }\n      }\n      table.ds.setSort(column, newSort);\n    }\n  }\n\n}\n","import { ComponentFactory, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { MatSort, MatSortHeader } from '@angular/material/sort';\n\nimport { PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\nexport class MatSortExtension extends PblNgridMultiComponentRegistry<MatSortHeader, 'dataHeaderExtensions'> {\n  readonly name: 'sortContainer' = 'sortContainer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  readonly projectContent = true;\n\n  constructor(private cfr: ComponentFactoryResolver) {\n    super();\n  }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.sort && !!context.injector.get(MatSort, false);\n  }\n\n  getFactory(context: PblNgridDataHeaderExtensionContext): ComponentFactory<MatSortHeader> {\n    return this.cfr.resolveComponentFactory(MatSortHeader);\n  }\n\n  onCreated(context: PblNgridDataHeaderExtensionContext, cmpRef: ComponentRef<MatSortHeader>): void {\n    // We assign the ID and also verify that it does not exist on the `MatSort` container\n    // It might exists on specific scenarios when a header is removed and added instantly but the \"add\" part happens before the teardown so the `MatSort` will throw.\n    this.deregisterId(context, cmpRef.instance.id = context.col.id);\n    cmpRef.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Check that the current `MatSort` does not already have a sortable header with the provided id.\n   */\n  private deregisterId(context: PblNgridDataHeaderExtensionContext, id: any) {\n    const matSort = context.injector.get<MatSort>(MatSort);\n    const matSortHeader = matSort.sortables.get(id)\n    if (matSortHeader) {\n      matSort.deregister(matSortHeader);\n    }\n  }\n}\n","import { NgModule, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSortModule, MatSortHeader } from '@angular/material/sort';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { PblNgridModule, PblNgridRegistryService } from '@pebula/ngrid';\nimport { PblNgridMatSortDirective } from './mat-sort.directive';\nimport { MatSortExtension } from './mat-sort-component-extension';\n\n@NgModule({\n  imports: [ CommonModule, MatButtonModule, MatSortModule, PblNgridModule ],\n  declarations: [ PblNgridMatSortDirective ],\n  exports: [ PblNgridMatSortDirective, MatSortModule ],\n  entryComponents: [ MatSortHeader ],\n})\nexport class PblNgridMatSortModule {\n  constructor(private registry: PblNgridRegistryService, cfr: ComponentFactoryResolver) {\n    registry.addMulti('dataHeaderExtensions', new MatSortExtension(cfr));\n  }\n}\n"],"names":[],"mappings":"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"}
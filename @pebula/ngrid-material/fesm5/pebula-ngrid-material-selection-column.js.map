{"version":3,"file":"pebula-ngrid-material-selection-column.js","sources":["ng://@pebula/ngrid-material/selection-column/lib/table-checkbox.component.ts","ng://@pebula/ngrid-material/selection-column/lib/checkbox-plugin.directive.ts","ng://@pebula/ngrid-material/selection-column/lib/table-checkbox.module.ts"],"sourcesContent":["import { Component, Input, ViewChild, ViewEncapsulation, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ThemePalette } from '@angular/material/core';\n\nimport {\n  PblNgridComponent,\n  PblNgridHeaderCellDefDirective,\n  PblNgridCellDefDirective,\n  PblNgridFooterCellDefDirective,\n  PblNgridPluginController,\n  utils,\n} from '@pebula/ngrid';\n\nconst ALWAYS_FALSE_FN = () => false;\n\n@Component({\n  selector: 'pbl-ngrid-checkbox',\n  templateUrl: './table-checkbox.component.html',\n  styleUrls: ['./table-checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridCheckboxComponent implements AfterViewInit, OnDestroy {\n  /**\n   * Unique name for the checkbox column.\n   * When not set, the name 'checkbox' is used.\n   *\n   **/\n  @Input() name: string;\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      this.cdr.markForCheck();\n      this.cdr.detectChanges();\n    }\n  }\n  /**\n   * A Custom selection model, optional.\n   * If not set, the selection model from the DataSource is used.\n   */\n  @Input() get selection(): SelectionModel<any> {\n    return this._selection;\n  }\n  set selection(value: SelectionModel<any>) {\n    if (value !== this._selection) {\n      this._selection = value;\n      this.setupSelection();\n    }\n  }\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (!this._isCheckboxDisabled || typeof this._isCheckboxDisabled !== 'function') {\n        this._isCheckboxDisabled = ALWAYS_FALSE_FN;\n      }\n    }\n  }\n\n  @Input() get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    if (value !== this._color) {\n      this._color = value;\n      if (this.table.isInit) {\n        this.cdr.markForCheck();\n        this.cdr.detectChanges();\n      }\n    }\n  }\n\n  @ViewChild(PblNgridHeaderCellDefDirective, { static: true }) headerDef: PblNgridHeaderCellDefDirective<any>;\n  @ViewChild(PblNgridCellDefDirective, { static: true }) cellDef: PblNgridCellDefDirective<any>;\n  @ViewChild(PblNgridFooterCellDefDirective, { static: true }) footerDef: PblNgridFooterCellDefDirective<any>;\n\n  allSelected = false;\n  length: number;\n\n  private _selection: SelectionModel<any>;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _isCheckboxDisabled: (row: any) => boolean = ALWAYS_FALSE_FN;\n  private _color: ThemePalette;\n\n  constructor(public table: PblNgridComponent<any>, private cdr: ChangeDetectorRef) {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    pluginCtrl.events\n      .pipe(utils.unrx(this))\n      .subscribe( e => {\n        if (e.kind === 'onDataSource') {\n          this.selection = e.curr.selection;\n        }\n      });\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.selection && this.table.ds) {\n      this.selection = this.table.ds.selection;\n    }\n\n    const registry = this.table.registry;\n    registry.addMulti('headerCell', this.headerDef);\n    registry.addMulti('tableCell', this.cellDef);\n    registry.addMulti('footerCell', this.footerDef);\n  }\n\n  ngOnDestroy(): void {\n    utils.unrx.kill(this);\n  }\n\n  masterToggle(): void {\n    if (this.allSelected) {\n      this.selection.clear();\n    } else {\n      const selected = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n      this.selection.select(...selected);\n    }\n  }\n\n  rowItemChange(row: any): void {\n    this.selection.toggle(row);\n    this.cdr.markForCheck();\n    this.cdr.detectChanges();\n  }\n\n  private getCollection() {\n    const { ds } = this.table;\n    return this.bulkSelectMode === 'view' ? ds.renderedData : ds.source;\n  }\n\n  private setupSelection(): void {\n    utils.unrx.kill(this, this.table);\n    if (this._selection) {\n      this.length = this.selection.selected.length;\n      this.selection.changed\n        .pipe(utils.unrx(this, this.table))\n        .subscribe(() => {\n          this.handleSelectionChanged();\n        });\n      const changeSource = this.bulkSelectMode === 'view' ? this.table.ds.onRenderedDataChanged : this.table.ds.onSourceChanged;\n      changeSource\n        .pipe(utils.unrx(this, this.table))\n        .subscribe(() => {\n          this.handleSelectionChanged();\n        });\n  } else {\n      this.length = 0;\n    }\n  }\n\n  private handleSelectionChanged() {\n    const { length } = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n    this.allSelected = !this.selection.isEmpty() && this.selection.selected.length === length;\n    this.length = this.selection.selected.length;\n    this.cdr.markForCheck();\n    this.cdr.detectChanges();\n  }\n}\n","import { Directive, Injector, Input, OnDestroy, ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n\nimport { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PblNgridCheckboxComponent } from './table-checkbox.component';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    matCheckboxSelection?: PblNgridMatCheckboxSelectionDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'matCheckboxSelection' = 'matCheckboxSelection';\n\n@Directive({ selector: 'pbl-ngrid[matCheckboxSelection]' })\nexport class PblNgridMatCheckboxSelectionDirective implements OnDestroy {\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean ) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (this.cmpRef && value) {\n        this.cmpRef.instance.isCheckboxDisabled = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Add's a selection column using material's `mat-checkbox` in the column specified.\n   */\n  @Input() get matCheckboxSelection(): string { return this._name; }\n  set matCheckboxSelection(value: string ) {\n    if (value !== this._name) {\n      this._name = value;\n      if (!value) {\n        if (this.cmpRef) {\n          this.cmpRef.destroy();\n          this.cmpRef = undefined;\n        }\n      } else {\n        if (!this.cmpRef) {\n          this.cmpRef = this.cfr.resolveComponentFactory(PblNgridCheckboxComponent).create(this.injector);\n          this.cmpRef.instance.table = this.table;\n          if (this._bulkSelectMode) {\n            this.cmpRef.instance.bulkSelectMode = this._bulkSelectMode;\n          }\n          this.cmpRef.instance.color = this._color;\n        }\n        if (this.isCheckboxDisabled) {\n          this.cmpRef.instance.isCheckboxDisabled = this.isCheckboxDisabled;\n        }\n        this.cmpRef.instance.name = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.bulkSelectMode = value;\n      }\n    }\n  }\n\n  @Input() get matCheckboxSelectionColor(): ThemePalette { return this._color; }\n  set matCheckboxSelectionColor(value: ThemePalette) {\n    if (value !== this._color) {\n      this._color = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.color = value;\n      }\n    }\n  }\n\n  private _name: string;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _color: ThemePalette = 'primary';\n  private cmpRef: ComponentRef<PblNgridCheckboxComponent>;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _isCheckboxDisabled: (row: any) => boolean;\n\n  constructor(private table: PblNgridComponent<any>,\n              private cfr: ComponentFactoryResolver,\n              private injector: Injector,\n              pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    this._removePlugin(this.table);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { PblNgridModule, ngridPlugin } from '@pebula/ngrid';\nimport { PblNgridMatCheckboxSelectionDirective, PLUGIN_KEY } from './checkbox-plugin.directive';\nimport { PblNgridCheckboxComponent } from './table-checkbox.component';\n\n@NgModule({\n  imports: [ CommonModule, MatCheckboxModule, PblNgridModule ],\n  declarations: [ PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent ],\n  exports: [ PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent ],\n  // TODO: remove when ViewEngine is no longer supported by angular (V11 ???)\n  entryComponents: [ PblNgridCheckboxComponent ]\n})\nexport class PblNgridCheckboxModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY }, PblNgridMatCheckboxSelectionDirective);\n}\n"],"names":[],"mappings":"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"}
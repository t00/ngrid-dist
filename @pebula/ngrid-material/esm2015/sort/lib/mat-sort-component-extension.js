import { MatSort, MatSortHeader } from '@angular/material/sort';
import { PblNgridMultiComponentRegistry } from '@pebula/ngrid';
export class MatSortExtension extends PblNgridMultiComponentRegistry {
    constructor(cfr) {
        super();
        this.cfr = cfr;
        this.name = 'sortContainer';
        this.kind = 'dataHeaderExtensions';
        this.projectContent = true;
    }
    shouldRender(context) {
        return !!context.col.sort && !!context.injector.get(MatSort, false);
    }
    getFactory(context) {
        return this.cfr.resolveComponentFactory(MatSortHeader);
    }
    onCreated(context, cmpRef) {
        // We assign the ID and also verify that it does not exist on the `MatSort` container
        // It might exists on specific scenarios when a header is removed and added instantly but the "add" part happens before the teardown so the `MatSort` will throw.
        this.deregisterId(context, cmpRef.instance.id = context.col.id);
        cmpRef.changeDetectorRef.markForCheck();
    }
    /**
     * Check that the current `MatSort` does not already have a sortable header with the provided id.
     */
    deregisterId(context, id) {
        const matSort = context.injector.get(MatSort);
        const matSortHeader = matSort.sortables.get(id);
        if (matSortHeader) {
            matSort.deregister(matSortHeader);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNvcnQtY29tcG9uZW50LWV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQtbWF0ZXJpYWwvc29ydC9zcmMvbGliL21hdC1zb3J0LWNvbXBvbmVudC1leHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsOEJBQThCLEVBQXNDLE1BQU0sZUFBZSxDQUFDO0FBRW5HLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSw4QkFBcUU7SUFLekcsWUFBb0IsR0FBNkI7UUFDL0MsS0FBSyxFQUFFLENBQUM7UUFEVSxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUp4QyxTQUFJLEdBQW9CLGVBQWUsQ0FBQztRQUN4QyxTQUFJLEdBQTJCLHNCQUFzQixDQUFDO1FBQ3RELG1CQUFjLEdBQUcsSUFBSSxDQUFDO0lBSS9CLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBMkM7UUFDdEQsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFVLE9BQU8sRUFBRSxLQUFZLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQTJDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQTJDLEVBQUUsTUFBbUM7UUFDeEYscUZBQXFGO1FBQ3JGLGlLQUFpSztRQUNqSyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSyxZQUFZLENBQUMsT0FBMkMsRUFBRSxFQUFPO1FBQ3ZFLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFVLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLElBQUksYUFBYSxFQUFFO1lBQ2pCLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0U29ydCwgTWF0U29ydEhlYWRlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NvcnQnO1xuXG5pbXBvcnQgeyBQYmxOZ3JpZE11bHRpQ29tcG9uZW50UmVnaXN0cnksIFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQgfSBmcm9tICdAcGVidWxhL25ncmlkJztcblxuZXhwb3J0IGNsYXNzIE1hdFNvcnRFeHRlbnNpb24gZXh0ZW5kcyBQYmxOZ3JpZE11bHRpQ29tcG9uZW50UmVnaXN0cnk8TWF0U29ydEhlYWRlciwgJ2RhdGFIZWFkZXJFeHRlbnNpb25zJz4ge1xuICByZWFkb25seSBuYW1lOiAnc29ydENvbnRhaW5lcicgPSAnc29ydENvbnRhaW5lcic7XG4gIHJlYWRvbmx5IGtpbmQ6ICdkYXRhSGVhZGVyRXh0ZW5zaW9ucycgPSAnZGF0YUhlYWRlckV4dGVuc2lvbnMnO1xuICByZWFkb25seSBwcm9qZWN0Q29udGVudCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzaG91bGRSZW5kZXIoY29udGV4dDogUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIWNvbnRleHQuY29sLnNvcnQgJiYgISFjb250ZXh0LmluamVjdG9yLmdldDxNYXRTb3J0PihNYXRTb3J0LCBmYWxzZSBhcyBhbnkpO1xuICB9XG5cbiAgZ2V0RmFjdG9yeShjb250ZXh0OiBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0KTogQ29tcG9uZW50RmFjdG9yeTxNYXRTb3J0SGVhZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KE1hdFNvcnRIZWFkZXIpO1xuICB9XG5cbiAgb25DcmVhdGVkKGNvbnRleHQ6IFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQsIGNtcFJlZjogQ29tcG9uZW50UmVmPE1hdFNvcnRIZWFkZXI+KTogdm9pZCB7XG4gICAgLy8gV2UgYXNzaWduIHRoZSBJRCBhbmQgYWxzbyB2ZXJpZnkgdGhhdCBpdCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgYE1hdFNvcnRgIGNvbnRhaW5lclxuICAgIC8vIEl0IG1pZ2h0IGV4aXN0cyBvbiBzcGVjaWZpYyBzY2VuYXJpb3Mgd2hlbiBhIGhlYWRlciBpcyByZW1vdmVkIGFuZCBhZGRlZCBpbnN0YW50bHkgYnV0IHRoZSBcImFkZFwiIHBhcnQgaGFwcGVucyBiZWZvcmUgdGhlIHRlYXJkb3duIHNvIHRoZSBgTWF0U29ydGAgd2lsbCB0aHJvdy5cbiAgICB0aGlzLmRlcmVnaXN0ZXJJZChjb250ZXh0LCBjbXBSZWYuaW5zdGFuY2UuaWQgPSBjb250ZXh0LmNvbC5pZCk7XG4gICAgY21wUmVmLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoYXQgdGhlIGN1cnJlbnQgYE1hdFNvcnRgIGRvZXMgbm90IGFscmVhZHkgaGF2ZSBhIHNvcnRhYmxlIGhlYWRlciB3aXRoIHRoZSBwcm92aWRlZCBpZC5cbiAgICovXG4gIHByaXZhdGUgZGVyZWdpc3RlcklkKGNvbnRleHQ6IFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQsIGlkOiBhbnkpIHtcbiAgICBjb25zdCBtYXRTb3J0ID0gY29udGV4dC5pbmplY3Rvci5nZXQ8TWF0U29ydD4oTWF0U29ydCk7XG4gICAgY29uc3QgbWF0U29ydEhlYWRlciA9IG1hdFNvcnQuc29ydGFibGVzLmdldChpZClcbiAgICBpZiAobWF0U29ydEhlYWRlcikge1xuICAgICAgbWF0U29ydC5kZXJlZ2lzdGVyKG1hdFNvcnRIZWFkZXIpO1xuICAgIH1cbiAgfVxufVxuIl19
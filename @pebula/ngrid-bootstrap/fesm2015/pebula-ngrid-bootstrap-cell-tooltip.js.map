{"version":3,"file":"pebula-ngrid-bootstrap-cell-tooltip.js","sources":["../../../../libs/ngrid-bootstrap/cell-tooltip/src/lib/cell-tooltip.directive.ts","../../../../libs/ngrid-bootstrap/cell-tooltip/src/lib/cell-tooltip.module.ts","../../../../libs/ngrid-bootstrap/cell-tooltip/src/pebula-ngrid-bootstrap-cell-tooltip.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Injector,\n  OnDestroy,\n  Input,\n  NgZone,\n  ViewContainerRef,\n  Renderer2,\n  ComponentFactoryResolver,\n  ChangeDetectorRef,\n  ApplicationRef,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgbTooltip, NgbTooltipConfig } from '@ng-bootstrap/ng-bootstrap';\n\nimport { unrx, PblNgridConfigService } from '@pebula/ngrid/core';\nimport { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';\nimport { PblNgridCellEvent } from '@pebula/ngrid/target-events';\n\ndeclare module '@pebula/ngrid/core/lib/configuration/type' {\n  interface PblNgridConfig {\n    bsCellTooltip?: CellTooltipOptions & {\n      /** When set to true will apply the default cell tooltip to ALL tables */\n      autoSetAll?: boolean;\n    };\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    bsCellTooltip?: PblNgridCellTooltipDirective<any>;\n  }\n  interface PblNgridPluginExtensionFactories {\n    bsCellTooltip: keyof typeof PblNgridCellTooltipDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'bsCellTooltip' = 'bsCellTooltip';\n\nconst DEFAULT_OPTIONS: CellTooltipOptions = {\n  canShow: (event: PblNgridCellEvent<any>): boolean => {\n    const element = (event.cellTarget.firstElementChild || event.cellTarget) as HTMLElement;\n    return element.scrollWidth > element.offsetWidth;\n  },\n  message: (event: PblNgridCellEvent<any>): string => {\n    return event.cellTarget.innerText;\n  }\n};\n\nexport interface CellTooltipOptions {\n  canShow?: boolean | ( (event: PblNgridCellEvent<any>) => boolean );\n  message?: (event: PblNgridCellEvent<any>) => string;\n}\n\n@Directive({ selector: '[bsCellTooltip]', exportAs: 'bsCellTooltip' })\nexport class PblNgridCellTooltipDirective<T> implements CellTooltipOptions, OnDestroy {\n  static readonly PLUGIN_KEY: 'bsCellTooltip' = PLUGIN_KEY;\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('bsCellTooltip') set canShow(value: boolean | ( (event: PblNgridCellEvent<T>) => boolean )) {\n    if (typeof value === 'function') {\n      this._canShow = value;\n    } else if ( (value as any) === '') {\n      this._canShow = undefined;\n    } else {\n      this._canShow = coerceBooleanProperty(value) ? e => true : e => false;\n    }\n  }\n\n  @Input() message: (event: PblNgridCellEvent<T>) => string;\n\n  @Input() tooltipClass: string;\n  @Input() showDelay: number;\n  @Input() hideDelay: number;\n\n  private initArgs: [ Renderer2, Injector, ComponentFactoryResolver, ViewContainerRef, NgbTooltipConfig, NgZone, any, ChangeDetectorRef, ApplicationRef ];\n\n  private toolTip: NgbTooltip;\n  private lastConfig: CellTooltipOptions;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _canShow: (event: PblNgridCellEvent<T>) => boolean;\n\n  constructor(private table: PblNgridComponent<any>, private injector: Injector, pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    const configService = injector.get(PblNgridConfigService);\n\n    this.initArgs = [\n      injector.get(Renderer2),\n      injector,\n      injector.get(ComponentFactoryResolver),\n      injector.get(ViewContainerRef),\n      injector.get(NgbTooltipConfig),\n      injector.get(NgZone),\n      injector.get(DOCUMENT),\n      injector.get(ChangeDetectorRef),\n      injector.get(ApplicationRef),\n    ];\n\n    configService.onUpdate('bsCellTooltip')\n      .pipe(unrx(this))\n      .subscribe( cfg => this.lastConfig = cfg.curr );\n\n    pluginCtrl.onInit().subscribe( () => this.init(pluginCtrl) );\n  }\n\n  static create<T = any>(table: PblNgridComponent<any>, injector: Injector): PblNgridCellTooltipDirective<T> {\n    return new PblNgridCellTooltipDirective<T>(table, injector, PblNgridPluginController.find(table));\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.table);\n    this.killTooltip();\n    unrx.kill(this);\n  }\n\n  private init(pluginCtrl: PblNgridPluginController): void {\n    // Depends on target-events plugin\n    // if it's not set, create it.\n    const targetEventsPlugin = pluginCtrl.getPlugin('targetEvents') || pluginCtrl.createPlugin('targetEvents');\n    targetEventsPlugin.cellEnter\n      .pipe(unrx(this))\n      .subscribe( event => this.cellEnter(event) );\n\n    targetEventsPlugin.cellLeave\n      .pipe(unrx(this))\n      .subscribe( event => this.cellLeave(event) );\n  }\n\n  private cellEnter(event: PblNgridCellEvent<T>): void {\n    this.killTooltip();\n\n    if (!this._canShow) {\n      // TODO: this will set lastConfig / default option once\n      // but if user changes lastConfig it will never update again...\n      this.canShow = (this.lastConfig && this.lastConfig.canShow) || DEFAULT_OPTIONS.canShow;\n    }\n\n    if (this._canShow(event)) {\n      const params = this.initArgs.slice() as PblNgridCellTooltipDirective<any>['initArgs'];\n\n      this.toolTip = new NgbTooltip(\n        new ElementRef<any>(event.cellTarget),\n        ...params,\n      );\n\n      this.toolTip.container = 'body';\n      const message = this.message || (this.lastConfig && this.lastConfig.message) || DEFAULT_OPTIONS.message;\n      this.toolTip.ngbTooltip = message(event);\n\n      // if (this.position) {\n      //   this.toolTip.position = this.position;\n      // }\n      if (this.tooltipClass) {\n        this.toolTip.tooltipClass = this.tooltipClass;\n      }\n      if (this.showDelay >= 0) {\n        this.toolTip.openDelay = this.showDelay;\n      }\n      if (this.hideDelay >= 0) {\n        this.toolTip.closeDelay = this.hideDelay;\n      }\n      this.toolTip.open();\n    }\n  }\n\n  private cellLeave(event: PblNgridCellEvent<T>): void {\n    this.killTooltip();\n  }\n\n  private killTooltip(): void {\n    if (this.toolTip) {\n      this.toolTip.close();\n      this.toolTip.ngOnDestroy();\n      this.toolTip = undefined;\n    }\n  }\n\n  static ngAcceptInputType_canShow: BooleanInput;\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { PblNgridConfigService } from '@pebula/ngrid/core';\nimport { PblNgridModule, PblNgridPluginController, ngridPlugin } from '@pebula/ngrid';\nimport { PblNgridTargetEventsModule } from '@pebula/ngrid/target-events';\n\nimport { PblNgridCellTooltipDirective, PLUGIN_KEY } from './cell-tooltip.directive';\n\n@NgModule({\n  imports: [ CommonModule, NgbTooltipModule, PblNgridModule, PblNgridTargetEventsModule ],\n  declarations: [ PblNgridCellTooltipDirective ],\n  exports: [ PblNgridCellTooltipDirective, NgbTooltipModule ],\n})\nexport class PblNgridBsCellTooltipModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY, factory: 'create' }, PblNgridCellTooltipDirective);\n\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridBsCellTooltipModule,\n              configService: PblNgridConfigService) {\n    if (parentModule) {\n      return;\n    }\n\n    PblNgridPluginController.created\n      .subscribe( event => {\n        // Do not remove the explicit reference to `PblNgridCellTooltipDirective`\n        // We use `PblNgridCellTooltipDirective.PLUGIN_KEY` to create a direct reference to `PblNgridCellTooltipDirective`\n        // which will disable dead code elimination for the `PblNgridCellTooltipDirective` plugin.\n        // If it is not set, using the plugin will only work when it is used in templates, other wise, if used programmatically (`autoSetAll`)\n        // CLI prod builds will remove the plugin's code.\n        const cellTooltipConfig = configService.get(PblNgridCellTooltipDirective.PLUGIN_KEY);\n        if (cellTooltipConfig && cellTooltipConfig.autoSetAll === true) {\n          const pluginCtrl = event.controller;\n          pluginCtrl.onInit()\n          .subscribe( evt => pluginCtrl.ensurePlugin(PblNgridCellTooltipDirective.PLUGIN_KEY) );\n        }\n      });\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;AAwCO,MAAM,UAAU,GAAoB,eAAe,CAAC;AAE3D,MAAM,eAAe,GAAuB;IAC1C,OAAO,EAAE,CAAC,KAA6B;QACrC,MAAM,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,iBAAiB,IAAI,KAAK,CAAC,UAAU,CAAgB,CAAC;QACxF,OAAO,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;KAClD;IACD,OAAO,EAAE,CAAC,KAA6B;QACrC,OAAO,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC;KACnC;CACF,CAAC;MAQW,4BAA4B;IA2BvC,YAAoB,KAA6B,EAAU,QAAkB,EAAE,UAAoC;QAA/F,UAAK,GAAL,KAAK,CAAwB;QAAU,aAAQ,GAAR,QAAQ,CAAU;QAC3E,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE5D,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAE1D,IAAI,CAAC,QAAQ,GAAG;YACd,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC;YACvB,QAAQ;YACR,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC;YACtC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC;YAC9B,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC;YAC9B,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;YACpB,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC;YACtB,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC;YAC/B,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC;SAC7B,CAAC;QAEF,aAAa,CAAC,QAAQ,CAAC,eAAe,CAAC;aACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChB,SAAS,CAAE,GAAG,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,IAAI,CAAE,CAAC;QAElD,UAAU,CAAC,MAAM,EAAE,CAAC,SAAS,CAAE,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAE,CAAC;KAC9D;;IA7CD,IAA4B,OAAO,CAAC,KAA6D;QAC/F,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;aAAM,IAAM,KAAa,KAAK,EAAE,EAAE;YACjC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,KAAK,CAAC;SACvE;KACF;IAuCD,OAAO,MAAM,CAAU,KAA6B,EAAE,QAAkB;QACtE,OAAO,IAAI,4BAA4B,CAAI,KAAK,EAAE,QAAQ,EAAE,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;KACnG;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACjB;IAEO,IAAI,CAAC,UAAoC;;;QAG/C,MAAM,kBAAkB,GAAG,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC3G,kBAAkB,CAAC,SAAS;aACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChB,SAAS,CAAE,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAE,CAAC;QAE/C,kBAAkB,CAAC,SAAS;aACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChB,SAAS,CAAE,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAE,CAAC;KAChD;IAEO,SAAS,CAAC,KAA2B;QAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;;;YAGlB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,eAAe,CAAC,OAAO,CAAC;SACxF;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAmD,CAAC;YAEtF,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAC3B,IAAI,UAAU,CAAM,KAAK,CAAC,UAAU,CAAC,EACrC,GAAG,MAAM,CACV,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC;YAChC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC;YACxG,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;;;YAKzC,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;aAC/C;YACD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE;gBACvB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;aACzC;YACD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE;gBACvB,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAC1C;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACrB;KACF;IAEO,SAAS,CAAC,KAA2B;QAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAEO,WAAW;QACjB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;SAC1B;KACF;;AAxHe,uCAAU,GAAoB,UAAU,CAAC;4IAD9C,4BAA4B;gIAA5B,4BAA4B;2FAA5B,4BAA4B;kBADxC,SAAS;mBAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,eAAe,EAAE;sKAKvC,OAAO;sBAAlC,KAAK;uBAAC,eAAe;gBAUb,OAAO;sBAAf,KAAK;gBAEG,YAAY;sBAApB,KAAK;gBACG,SAAS;sBAAjB,KAAK;gBACG,SAAS;sBAAjB,KAAK;;;MC7DK,2BAA2B;IAGtC,YAAoC,YAAyC,EACjE,aAAoC;QAC9C,IAAI,YAAY,EAAE;YAChB,OAAO;SACR;QAED,wBAAwB,CAAC,OAAO;aAC7B,SAAS,CAAE,KAAK;;;;;;YAMf,MAAM,iBAAiB,GAAG,aAAa,CAAC,GAAG,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAC;YACrF,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,KAAK,IAAI,EAAE;gBAC9D,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;gBACpC,UAAU,CAAC,MAAM,EAAE;qBAClB,SAAS,CAAE,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAE,CAAC;aACvF;SACF,CAAC,CAAC;KACN;;AAtBe,wCAAY,GAAG,WAAW,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,4BAA4B,CAAC,CAAC;2IADrG,2BAA2B,kBAGY,2BAA2B;4IAHlE,2BAA2B,iBAHtB,4BAA4B,aADjC,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,0BAA0B,aAE1E,4BAA4B,EAAE,gBAAgB;4IAE9C,2BAA2B,YAJ7B,CAAE,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,0BAA0B,CAAE,EAE9C,gBAAgB;2FAE9C,2BAA2B;kBALvC,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAE,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,0BAA0B,CAAE;oBACvF,YAAY,EAAE,CAAE,4BAA4B,CAAE;oBAC9C,OAAO,EAAE,CAAE,4BAA4B,EAAE,gBAAgB,CAAE;iBAC5D;0DAImD,2BAA2B;0BAAhE,QAAQ;;0BAAI,QAAQ;;;AClBnC;;;;;;"}
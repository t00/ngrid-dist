{"version":3,"file":"pebula-ngrid-bootstrap-sort.js","sources":["../../../../libs/ngrid-bootstrap/sort/src/lib/sort-errors.ts","../../../../libs/ngrid-bootstrap/sort/src/lib/bs-sortable-plugin.ts","../../../../libs/ngrid-bootstrap/sort/src/lib/bs-sortable/bs-sortable.component.ts","../../../../libs/ngrid-bootstrap/sort/src/lib/bs-sortable/bs-sortable.component.html","../../../../libs/ngrid-bootstrap/sort/src/lib/bs-sortable-component-extension.ts","../../../../libs/ngrid-bootstrap/sort/src/lib/bs-sortable.module.ts","../../../../libs/ngrid-bootstrap/sort/src/pebula-ngrid-bootstrap-sort.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two PblNgridBsSortable with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`PblNgridBsSortable must be placed within a parent element with the bsSortable directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`PblNgridBsSortable must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","import { Subject } from 'rxjs';\nimport { Directive, OnDestroy, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ON_INVALIDATE_HEADERS, unrx } from '@pebula/ngrid/core';\nimport { PblNgridComponent, PblNgridPluginController, PblNgridSortDefinition, PblDataSource } from '@pebula/ngrid';\nimport { PblNgridSortable, PblNgridBsSortDirection, PblNgridBsSortState } from './types';\nimport { getSortDuplicateSortableIdError, getSortHeaderMissingIdError, getSortInvalidDirectionError } from './sort-errors';\nimport { PblNgridBsSortable } from './bs-sortable/bs-sortable.component';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    bsSortable?: PblNgridBsSortablePlugin;\n  }\n}\nexport const PLUGIN_KEY: 'bsSortable' = 'bsSortable';\n\n@Directive({ selector: 'pbl-ngrid[bsSortable]', exportAs: 'pblBsSortable' })\nexport class PblNgridBsSortablePlugin implements OnChanges, OnDestroy {\n\n  get bsSortableDisabled() { return this._disabled; }\n  set bsSortableDisabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, PblNgridSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('bsSortableActive') active: string;\n\n  /**\n   * The direction to set when an PblNgridSortable is initially sorted.\n   * May be overriden by the PblNgridSortable's sort start.\n   */\n  @Input('bsSortableStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('bsSortableDirection') get direction(): PblNgridBsSortDirection { return this._direction; }\n  set direction(direction: PblNgridBsSortDirection) {\n    if (direction && direction !== 'asc' && direction !== 'desc' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n\n  @Input() bsArrowPosition: 'before' | 'after' = 'after';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<PblNgridBsSortState> = new EventEmitter<PblNgridBsSortState>();\n\n  private _direction: PblNgridBsSortDirection = '';\n  private _disabled: boolean = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private origin: 'ds' | 'click' = 'click';\n\n  constructor(public grid: PblNgridComponent<any>, private pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.sortChange\n      .pipe(unrx(this))\n      .subscribe( s => {\n        this.onSort(s, this.origin);\n        this.origin = 'click';\n      });\n\n    this.handleEvents();\n  }\n\n  /**\n   * Register function to be used by the contained PblNgridSortable. Adds the PblNgridSortable to the\n   * collection of PblNgridSortable.\n   */\n  register(sortable: PblNgridSortable): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained PblNgridSortables. Removes the PblNgridSortable from the\n   * collection of contained PblNgridSortables.\n   */\n  deregister(sortable: PblNgridSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: PblNgridSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: PblNgridSortable): PblNgridBsSortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n    this._removePlugin(this.grid);\n    unrx.kill(this);\n  }\n\n  private onSort(sort: PblNgridBsSortState, origin: 'ds' | 'click'): void {\n    const table = this.grid;\n    const column = table.columnApi.visibleColumns.find(c => c.id === sort.active);\n\n    if ( origin !== 'click' || !column || !column.sort ) {\n      return;\n    } else {\n      const newSort: PblNgridSortDefinition = { };\n      const sortFn = typeof column.sort === 'function' && column.sort;\n      if (sort.direction) {\n        newSort.order = sort.direction;\n      }\n      if (sortFn) {\n        newSort.sortFn = sortFn;\n      }\n      const currentSort = table.ds.sort;\n      if (column === currentSort.column) {\n        const _sort = currentSort.sort || {};\n        if (newSort.order === _sort.order) {\n          return;\n        }\n      }\n      table.ds.setSort(column, newSort);\n    }\n  }\n\n  private handleEvents() {\n    const handleDataSourceSortChange = (sortChange: PblDataSource['sort']) => {\n      const { column } = sortChange;\n      const order = sortChange.sort ? sortChange.sort.order : undefined;\n\n      if (column) {\n        if (this.active === column.id && this.direction === (order || '')) { return; }\n        const sortable: PblNgridSortable = this.sortables.get(column.id) as any;\n        if (sortable) {\n          this.origin = 'ds';\n          this.active = undefined;\n          sortable.start = order || 'asc';\n          (sortable as PblNgridBsSortable)._handleClick();\n        }\n      } else if (this.active) { // clear mode (hit from code, not click).\n        const sortable: PblNgridSortable = this.sortables.get(this.active) as any;\n        if (sortable ) {\n          if (!sortable.disableClear) {\n            let nextSortDir: PblNgridBsSortDirection;\n            while (nextSortDir = this.getNextSortDirection(sortable)) {\n              this.direction = nextSortDir;\n            }\n          }\n          this.origin = 'ds';\n          (sortable as PblNgridBsSortable)._handleClick();\n        }\n      }\n    }\n\n    this.pluginCtrl.events\n      .pipe(ON_INVALIDATE_HEADERS)\n      .subscribe( e => {\n        const hasActiveSort = this.active;\n        if (this.grid.ds?.sort) {\n          if (!this.grid.ds.sort.column && hasActiveSort) {\n            this.onSort({ active: this.active, direction: this.direction || 'asc' }, this.origin);\n          } else if (this.grid.ds.sort.column && !hasActiveSort) {\n            setTimeout(() => handleDataSourceSortChange(this.grid.ds.sort));\n          }\n        }\n      });\n\n    this.pluginCtrl.events\n      .subscribe( e => {\n        if (e.kind === 'onDataSource') {\n          unrx.kill(this, e.prev);\n          if (this.active) {\n            this.onSort({ active: this.active, direction: this.direction || 'asc' }, this.origin);\n          }\n          this.grid.ds.sortChange\n            .pipe(unrx(this, e.curr))\n            .subscribe( event => { handleDataSourceSortChange(event); });\n        }\n      });\n  }\n\n  static ngAcceptInputType_bsSortableDisabled: BooleanInput;\n  static ngAcceptInputType_disableClear: BooleanInput;\n}\n\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): PblNgridBsSortDirection[] {\n  let sortOrder: PblNgridBsSortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","import { merge } from 'rxjs';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation } from '@angular/core';\nimport { unrx } from '@pebula/ngrid/core';\nimport { PblNgridBsSortablePlugin } from '../bs-sortable-plugin';\nimport { PblNgridBsSortDirection, PblNgridSortable } from '../types';\n\n@Component({\n  selector: 'pbl-bs-sortable',\n  templateUrl: './bs-sortable.component.html',\n  styleUrls: ['./bs-sortable.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '(click)': '_handleClick()',\n  }\n})\nexport class PblNgridBsSortable implements PblNgridSortable {\n\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n\n  _direction: PblNgridBsSortDirection;\n\n  constructor(cdRef: ChangeDetectorRef, private plugin: PblNgridBsSortablePlugin) {\n    merge(plugin.sortChange, plugin._stateChanges)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          cdRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n\n    this.plugin.register(this);\n  }\n\n  ngOnDestroy() {\n    this.plugin.deregister(this);\n    unrx.kill(this);\n  }\n\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._toggleOnInteraction();\n    }\n  }\n  _updateArrowDirection() {\n    this._direction = this._isSorted()\n      ? this.plugin.direction\n      : (this.start || this.plugin.start)\n    ;\n  }\n\n  _isAfter() {\n    return this.plugin.bsArrowPosition === 'after';\n  }\n\n  /** Whether this PblNgridBsSortable is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this.plugin.active == this.id && (this.plugin.direction === 'asc' || this.plugin.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this.plugin.bsSortableDisabled; //|| this.disabled;\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _toggleOnInteraction() {\n\n    this.plugin.sort(this);\n  }\n}\n","<div class=\"pbl-bs-sortable\"\n     [class.pbl-bs-sortable-after]=\"_isAfter()\"\n     [class.pbl-bs-sortable-sorted]=\"_isSorted()\"\n     [class.pbl-bs-sortable-disabled]=\"_isDisabled()\"\n     [class.asc]=\"_direction === 'asc'\"\n     [class.desc]=\"_direction === 'desc'\"\n     role=\"button\">\n\n  <ng-content></ng-content>\n</div>\n","import { ComponentFactory, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\nimport { PblNgridBsSortablePlugin } from './bs-sortable-plugin';\nimport { PblNgridBsSortable } from './bs-sortable/bs-sortable.component';\n\nexport class PblBsSortableExtension extends PblNgridMultiComponentRegistry<PblNgridBsSortable, 'dataHeaderExtensions'> {\n  readonly name: 'bsSortContainer' = 'bsSortContainer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  readonly projectContent = true;\n\n  constructor(private cfr: ComponentFactoryResolver) {\n    super();\n  }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.sort && !!context.injector.get<PblNgridBsSortablePlugin>(PblNgridBsSortablePlugin, false as any);\n  }\n\n  getFactory(context: PblNgridDataHeaderExtensionContext): ComponentFactory<PblNgridBsSortable> {\n    return this.cfr.resolveComponentFactory(PblNgridBsSortable);\n  }\n\n  onCreated(context: PblNgridDataHeaderExtensionContext, cmpRef: ComponentRef<PblNgridBsSortable>): void {\n    // We assign the ID and also verify that it does not exist on the `MatSort` container\n    // It might exists on specific scenarios when a header is removed and added instantly but the \"add\" part happens before the teardown so the `MatSort` will throw.\n    this.deregisterId(context, cmpRef.instance.id = context.col.id);\n    cmpRef.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Check that the current `MatSort` does not already have a sortable header with the provided id.\n   */\n  private deregisterId(context: PblNgridDataHeaderExtensionContext, id: any) {\n    const matSort = context.injector.get(PblNgridBsSortablePlugin);\n    const matSortHeader = matSort.sortables.get(id)\n    if (matSortHeader) {\n      matSort.deregister(matSortHeader);\n    }\n  }\n}\n","import { NgModule, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PblNgridRegistryService, PblNgridModule, ngridPlugin } from '@pebula/ngrid';\nimport { PblNgridBsSortablePlugin, PLUGIN_KEY } from './bs-sortable-plugin';\nimport { PblBsSortableExtension } from './bs-sortable-component-extension';\nimport { PblNgridBsSortable } from './bs-sortable/bs-sortable.component';\n\n@NgModule({\n  imports: [ CommonModule, PblNgridModule ],\n  declarations: [ PblNgridBsSortablePlugin, PblNgridBsSortable ],\n  exports: [ PblNgridBsSortablePlugin, PblNgridBsSortable ],\n  // TODO(REFACTOR_REF 2): remove when ViewEngine is no longer supported by angular (V12 ???)\n  entryComponents: [ PblNgridBsSortable ],\n})\nexport class PblNgridBsSortableModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY }, PblNgridBsSortablePlugin);\n\n  constructor(private registry: PblNgridRegistryService, cfr: ComponentFactoryResolver) {\n    registry.addMulti('dataHeaderExtensions', new PblBsSortableExtension(cfr));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
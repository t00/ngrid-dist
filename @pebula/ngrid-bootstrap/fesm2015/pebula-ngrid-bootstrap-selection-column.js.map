{"version":3,"file":"pebula-ngrid-bootstrap-selection-column.js","sources":["../../../../libs/ngrid-bootstrap/selection-column/src/lib/bs-selection.component.ts","../../../../libs/ngrid-bootstrap/selection-column/src/lib/bs-selection.component.html","../../../../libs/ngrid-bootstrap/selection-column/src/lib/bs-selection-plugin.directive.ts","../../../../libs/ngrid-bootstrap/selection-column/src/lib/bs-selection.module.ts","../../../../libs/ngrid-bootstrap/selection-column/src/pebula-ngrid-bootstrap-selection-column.ts"],"sourcesContent":["import { Component, Input, ViewChild, ViewEncapsulation, AfterViewInit, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\n\nimport { unrx } from '@pebula/ngrid/core';\nimport {\n  PblNgridComponent,\n  PblNgridHeaderCellDefDirective,\n  PblNgridCellDefDirective,\n  PblNgridFooterCellDefDirective,\n  PblNgridPluginController,\n} from '@pebula/ngrid';\n\nconst ALWAYS_FALSE_FN = () => false;\n\n@Component({\n  selector: 'pbl-ngrid-bs-checkbox',\n  templateUrl: './bs-selection.component.html',\n  styleUrls: ['./bs-selection.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridBsSelectionComponent implements AfterViewInit, OnDestroy {\n  /**\n   * Unique name for the checkbox column.\n   * When not set, the name 'checkbox' is used.\n   *\n   **/\n  @Input() name: string;\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      this.setupSelection();\n    }\n  }\n  /**\n   * A Custom selection model, optional.\n   * If not set, the selection model from the DataSource is used.\n   */\n  @Input() get selection(): SelectionModel<any> {\n    return this._selection;\n  }\n  set selection(value: SelectionModel<any>) {\n    if (value !== this._selection) {\n      this._selection = value;\n      this.setupSelection();\n    }\n  }\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (!this._isCheckboxDisabled || typeof this._isCheckboxDisabled !== 'function') {\n        this._isCheckboxDisabled = ALWAYS_FALSE_FN;\n      }\n    }\n  }\n\n  @Input() get selectionClass(): string { return this._selectionClass; }\n  set selectionClass(value: string) {\n    if (value !== this._selectionClass) {\n      this._selectionClass = value;\n      if (this.table.isInit) {\n        this.markAndDetect();\n      }\n    }\n  }\n\n  @ViewChild(PblNgridHeaderCellDefDirective, { static: true }) headerDef: PblNgridHeaderCellDefDirective<any>;\n  @ViewChild(PblNgridCellDefDirective, { static: true }) cellDef: PblNgridCellDefDirective<any>;\n  @ViewChild(PblNgridFooterCellDefDirective, { static: true }) footerDef: PblNgridFooterCellDefDirective<any>;\n\n  allSelected = false;\n  length: number;\n\n  private _selection: SelectionModel<any>;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _isCheckboxDisabled: (row: any) => boolean = ALWAYS_FALSE_FN;\n  private _selectionClass: string;\n\n  constructor(public table: PblNgridComponent<any>, private cdr: ChangeDetectorRef) {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    pluginCtrl.events\n      .pipe(unrx(this))\n      .subscribe( e => {\n        if (e.kind === 'onDataSource') {\n          this.selection = e.curr.selection;\n        }\n      });\n\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.selection && this.table.ds) {\n      this.selection = this.table.ds.selection;\n    }\n\n    const registry = this.table.registry;\n    registry.addMulti('headerCell', this.headerDef);\n    registry.addMulti('tableCell', this.cellDef);\n    registry.addMulti('footerCell', this.footerDef);\n  }\n\n  ngOnDestroy(): void {\n    unrx.kill(this);\n  }\n\n  masterToggle(): void {\n    if (this.allSelected) {\n      this.selection.clear();\n    } else {\n      const selected = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n      this.selection.select(...selected);\n    }\n  }\n\n  rowItemChange(row: any): void {\n    this.selection.toggle(row);\n    this.markAndDetect();\n  }\n\n  onInput(a,b){\n    console.log(a,b)\n  }\n  private getCollection() {\n    const { ds } = this.table;\n    return this.bulkSelectMode === 'view' ? ds.renderedData : ds.source;\n  }\n\n  private setupSelection(): void {\n    unrx.kill(this, this.table);\n    if (this._selection) {\n      this.length = this.selection.selected.length;\n      this.selection.changed\n        .pipe(unrx(this, this.table))\n        .subscribe(() => this.handleSelectionChanged());\n      const changeSource = this.bulkSelectMode === 'view' ? this.table.ds.onRenderedDataChanged : this.table.ds.onSourceChanged;\n      changeSource\n        .pipe(unrx(this, this.table))\n        .subscribe(() => this.handleSelectionChanged());\n    } else {\n      this.length = 0;\n    }\n  }\n\n  private handleSelectionChanged() {\n    const { length } = this.getCollection().filter(data => !this._isCheckboxDisabled(data));\n    this.allSelected = !this.selection.isEmpty() && this.selection.selected.length === length;\n    this.length = this.selection.selected.length;\n    this.markAndDetect();\n  }\n\n  private markAndDetect() {\n    this.cdr.markForCheck();\n    this.cdr.detectChanges();\n  }\n}\n","<ng-container *pblNgridHeaderCellDef=\"name; col as col;\">\n  <label *ngIf=\"bulkSelectMode !== 'none'\"\n         [class]=\"selectionClass\">\n    <input type=\"checkbox\"\n           [checked]=\"allSelected\"\n           (input)=\"masterToggle()\">\n  </label>\n</ng-container>\n\n<label *pblNgridCellDef=\"name; row as row;\">\n  <input type=\"checkbox\"\n         [class]=\"selectionClass\"\n         [checked]=\"selection.isSelected(row)\"\n         [disabled]=\"isCheckboxDisabled(row)\"\n         (input)=\"rowItemChange(row)\">\n</label>\n\n<span *pblNgridFooterCellDef=\"name; col as col;\">{{ length ? length : '' }}</span>\n","import { Directive, Injector, Input, OnDestroy, ComponentFactoryResolver, ComponentRef } from '@angular/core';\n\nimport { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PblNgridBsSelectionComponent } from './bs-selection.component';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    bsSelectionColumn?: PblNgridBsSelectionPlugin;\n  }\n}\n\nexport const PLUGIN_KEY: 'bsSelectionColumn' = 'bsSelectionColumn';\n\n@Directive({ selector: 'pbl-ngrid[bsSelectionColumn]' })\nexport class PblNgridBsSelectionPlugin implements OnDestroy {\n\n  @Input() get isCheckboxDisabled() { return this._isCheckboxDisabled; }\n  set isCheckboxDisabled(value: (row: any) => boolean ) {\n    if (value !== this._isCheckboxDisabled) {\n      this._isCheckboxDisabled = value;\n      if (this.cmpRef && value) {\n        this.cmpRef.instance.isCheckboxDisabled = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Add's a selection column using material's `mat-checkbox` in the column specified.\n   */\n  @Input() get bsSelectionColumn(): string { return this._name; }\n  set bsSelectionColumn(value: string ) {\n    if (value !== this._name) {\n      this._name = value;\n      if (!value) {\n        if (this.cmpRef) {\n          this.cmpRef.destroy();\n          this.cmpRef = undefined;\n        }\n      } else {\n        if (!this.cmpRef) {\n          this.cmpRef = this.cfr.resolveComponentFactory(PblNgridBsSelectionComponent).create(this.injector);\n          this.cmpRef.instance.table = this.table;\n          if (this._bulkSelectMode) {\n            this.cmpRef.instance.bulkSelectMode = this._bulkSelectMode;\n          }\n          this.cmpRef.instance.selectionClass = this._selectionClass;\n        }\n        if (this.isCheckboxDisabled) {\n          this.cmpRef.instance.isCheckboxDisabled = this.isCheckboxDisabled;\n        }\n        this.cmpRef.instance.name = value;\n        this.cmpRef.changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * Defines the behavior when clicking on the bulk select checkbox (header).\n   * There are 2 options:\n   *\n   * - all: Will select all items in the current collection\n   * - view: Will select only the rendered items in the view\n   *\n   * The default value is `all`\n   */\n  @Input() get bulkSelectMode(): 'all' | 'view' | 'none' { return this._bulkSelectMode; }\n  set bulkSelectMode(value: 'all' | 'view' | 'none') {\n    if (value !== this._bulkSelectMode) {\n      this._bulkSelectMode = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.bulkSelectMode = value;\n      }\n    }\n  }\n\n  @Input() get bsSelectionClass(): string { return this._selectionClass; }\n  set matCheckboxSelectionColor(value: string) {\n    if (value !== this._selectionClass) {\n      this._selectionClass = value;\n      if (this.cmpRef) {\n        this.cmpRef.instance.selectionClass = value;\n      }\n    }\n  }\n\n  private _name: string;\n  private _bulkSelectMode: 'all' | 'view' | 'none';\n  private _selectionClass: string = '';\n  private cmpRef: ComponentRef<PblNgridBsSelectionComponent>;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _isCheckboxDisabled: (row: any) => boolean;\n\n  constructor(private table: PblNgridComponent<any>,\n              private cfr: ComponentFactoryResolver,\n              private injector: Injector,\n              pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    this._removePlugin(this.table);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { PblNgridModule, ngridPlugin } from '@pebula/ngrid';\nimport { PblNgridBsSelectionPlugin, PLUGIN_KEY } from './bs-selection-plugin.directive';\nimport { PblNgridBsSelectionComponent } from './bs-selection.component';\n\n@NgModule({\n  imports: [ CommonModule, MatCheckboxModule, PblNgridModule ],\n  declarations: [ PblNgridBsSelectionPlugin, PblNgridBsSelectionComponent ],\n  exports: [ PblNgridBsSelectionPlugin, PblNgridBsSelectionComponent ],\n  // TODO(REFACTOR_REF 2): remove when ViewEngine is no longer supported by angular (V12 ???)\n  entryComponents: [ PblNgridBsSelectionComponent ]\n})\nexport class PblNgridBsSelectionModule {\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY }, PblNgridBsSelectionPlugin);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}
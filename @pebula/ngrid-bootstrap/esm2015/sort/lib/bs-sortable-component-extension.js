import { PblNgridMultiComponentRegistry } from '@pebula/ngrid';
import { PblNgridBsSortablePlugin } from './bs-sortable-plugin';
import { PblNgridBsSortable } from './bs-sortable/bs-sortable.component';
export class PblBsSortableExtension extends PblNgridMultiComponentRegistry {
    constructor(cfr) {
        super();
        this.cfr = cfr;
        this.name = 'bsSortContainer';
        this.kind = 'dataHeaderExtensions';
        this.projectContent = true;
    }
    shouldRender(context) {
        return !!context.col.sort && !!context.injector.get(PblNgridBsSortablePlugin, false);
    }
    getFactory(context) {
        return this.cfr.resolveComponentFactory(PblNgridBsSortable);
    }
    onCreated(context, cmpRef) {
        // We assign the ID and also verify that it does not exist on the `MatSort` container
        // It might exists on specific scenarios when a header is removed and added instantly but the "add" part happens before the teardown so the `MatSort` will throw.
        this.deregisterId(context, cmpRef.instance.id = context.col.id);
        cmpRef.changeDetectorRef.markForCheck();
    }
    /**
     * Check that the current `MatSort` does not already have a sortable header with the provided id.
     */
    deregisterId(context, id) {
        const matSort = context.injector.get(PblNgridBsSortablePlugin);
        const matSortHeader = matSort.sortables.get(id);
        if (matSortHeader) {
            matSort.deregister(matSortHeader);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtc29ydGFibGUtY29tcG9uZW50LWV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQtYm9vdHN0cmFwL3NvcnQvc3JjL2xpYi9icy1zb3J0YWJsZS1jb21wb25lbnQtZXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw4QkFBOEIsRUFBc0MsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFekUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLDhCQUEwRTtJQUtwSCxZQUFvQixHQUE2QjtRQUMvQyxLQUFLLEVBQUUsQ0FBQztRQURVLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBSnhDLFNBQUksR0FBc0IsaUJBQWlCLENBQUM7UUFDNUMsU0FBSSxHQUEyQixzQkFBc0IsQ0FBQztRQUN0RCxtQkFBYyxHQUFHLElBQUksQ0FBQztJQUkvQixDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQTJDO1FBQ3RELE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBMkIsd0JBQXdCLEVBQUUsS0FBWSxDQUFDLENBQUM7SUFDeEgsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUEyQztRQUNwRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQTJDLEVBQUUsTUFBd0M7UUFDN0YscUZBQXFGO1FBQ3JGLGlLQUFpSztRQUNqSyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSyxZQUFZLENBQUMsT0FBMkMsRUFBRSxFQUFPO1FBQ3ZFLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDL0QsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDL0MsSUFBSSxhQUFhLEVBQUU7WUFDakIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYmxOZ3JpZE11bHRpQ29tcG9uZW50UmVnaXN0cnksIFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQgfSBmcm9tICdAcGVidWxhL25ncmlkJztcbmltcG9ydCB7IFBibE5ncmlkQnNTb3J0YWJsZVBsdWdpbiB9IGZyb20gJy4vYnMtc29ydGFibGUtcGx1Z2luJztcbmltcG9ydCB7IFBibE5ncmlkQnNTb3J0YWJsZSB9IGZyb20gJy4vYnMtc29ydGFibGUvYnMtc29ydGFibGUuY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIFBibEJzU29ydGFibGVFeHRlbnNpb24gZXh0ZW5kcyBQYmxOZ3JpZE11bHRpQ29tcG9uZW50UmVnaXN0cnk8UGJsTmdyaWRCc1NvcnRhYmxlLCAnZGF0YUhlYWRlckV4dGVuc2lvbnMnPiB7XG4gIHJlYWRvbmx5IG5hbWU6ICdic1NvcnRDb250YWluZXInID0gJ2JzU29ydENvbnRhaW5lcic7XG4gIHJlYWRvbmx5IGtpbmQ6ICdkYXRhSGVhZGVyRXh0ZW5zaW9ucycgPSAnZGF0YUhlYWRlckV4dGVuc2lvbnMnO1xuICByZWFkb25seSBwcm9qZWN0Q29udGVudCA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzaG91bGRSZW5kZXIoY29udGV4dDogUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIWNvbnRleHQuY29sLnNvcnQgJiYgISFjb250ZXh0LmluamVjdG9yLmdldDxQYmxOZ3JpZEJzU29ydGFibGVQbHVnaW4+KFBibE5ncmlkQnNTb3J0YWJsZVBsdWdpbiwgZmFsc2UgYXMgYW55KTtcbiAgfVxuXG4gIGdldEZhY3RvcnkoY29udGV4dDogUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCk6IENvbXBvbmVudEZhY3Rvcnk8UGJsTmdyaWRCc1NvcnRhYmxlPiB7XG4gICAgcmV0dXJuIHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFBibE5ncmlkQnNTb3J0YWJsZSk7XG4gIH1cblxuICBvbkNyZWF0ZWQoY29udGV4dDogUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCwgY21wUmVmOiBDb21wb25lbnRSZWY8UGJsTmdyaWRCc1NvcnRhYmxlPik6IHZvaWQge1xuICAgIC8vIFdlIGFzc2lnbiB0aGUgSUQgYW5kIGFsc28gdmVyaWZ5IHRoYXQgaXQgZG9lcyBub3QgZXhpc3Qgb24gdGhlIGBNYXRTb3J0YCBjb250YWluZXJcbiAgICAvLyBJdCBtaWdodCBleGlzdHMgb24gc3BlY2lmaWMgc2NlbmFyaW9zIHdoZW4gYSBoZWFkZXIgaXMgcmVtb3ZlZCBhbmQgYWRkZWQgaW5zdGFudGx5IGJ1dCB0aGUgXCJhZGRcIiBwYXJ0IGhhcHBlbnMgYmVmb3JlIHRoZSB0ZWFyZG93biBzbyB0aGUgYE1hdFNvcnRgIHdpbGwgdGhyb3cuXG4gICAgdGhpcy5kZXJlZ2lzdGVySWQoY29udGV4dCwgY21wUmVmLmluc3RhbmNlLmlkID0gY29udGV4dC5jb2wuaWQpO1xuICAgIGNtcFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGF0IHRoZSBjdXJyZW50IGBNYXRTb3J0YCBkb2VzIG5vdCBhbHJlYWR5IGhhdmUgYSBzb3J0YWJsZSBoZWFkZXIgd2l0aCB0aGUgcHJvdmlkZWQgaWQuXG4gICAqL1xuICBwcml2YXRlIGRlcmVnaXN0ZXJJZChjb250ZXh0OiBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0LCBpZDogYW55KSB7XG4gICAgY29uc3QgbWF0U29ydCA9IGNvbnRleHQuaW5qZWN0b3IuZ2V0KFBibE5ncmlkQnNTb3J0YWJsZVBsdWdpbik7XG4gICAgY29uc3QgbWF0U29ydEhlYWRlciA9IG1hdFNvcnQuc29ydGFibGVzLmdldChpZClcbiAgICBpZiAobWF0U29ydEhlYWRlcikge1xuICAgICAgbWF0U29ydC5kZXJlZ2lzdGVyKG1hdFNvcnRIZWFkZXIpO1xuICAgIH1cbiAgfVxufVxuIl19
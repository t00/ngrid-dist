/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid/columns/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function PblColumnTypeDefinitionDataMap() { }
/**
 * Optional value to be used by the template when rendering the cell.
 * Any value is allowed, including functions which allow complex scenarios, for example rendering a cell based on values from other cells.
 * @record
 */
export function PblBaseColumnDefinition() { }
if (false) {
    /**
     * A Unique ID for the column.
     * The ID must be unique across all columns, regardless of the type.
     * Columns with identical ID will share result in identical template.
     *
     * For example, having a header column and a footer column with the same id will result in the same cell presentation for both.
     *
     * > The ID is mandatory. Some implementation might use other values to auto-generate it and some might require it explicitly.
     * This is what it is optional.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.id;
    /** @type {?|undefined} */
    PblBaseColumnDefinition.prototype.label;
    /**
     * The type of the values in this column.
     * This is an additional level for matching columns to templates, grouping templates for a type.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.type;
    /**
     * CSS class that get applied on the header and cell.
     * You can apply unique header/cell styles using the element name.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.css;
    /**
     * The width in px or % in the following format: ##% or ##px
     * Examples: '50%', '50px'
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.width;
    /**
     * This minimum width in pixels
     * This is an absolute value, thus a number.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.minWidth;
    /**
     * This maximum width in pixels
     * This is an absolute value, thus a number.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.maxWidth;
    /**
     * A place to store things...
     * This must be an object, values are shadow-copied so persist data between multiple plugins.
     * @type {?|undefined}
     */
    PblBaseColumnDefinition.prototype.data;
}
/**
 * @record
 */
export function PblMetaColumnDefinition() { }
if (false) {
    /**
     * A Unique ID for the column.
     * @type {?}
     */
    PblMetaColumnDefinition.prototype.id;
    /** @type {?} */
    PblMetaColumnDefinition.prototype.kind;
    /**
     * The index (zero based) of the header row this column is attached to, used for multi-header setup.
     * When not set (undefined) the index is considered the LAST index.
     * @type {?}
     */
    PblMetaColumnDefinition.prototype.rowIndex;
}
/**
 * @record
 */
export function PblColumnGroupDefinition() { }
if (false) {
    /**
     * A Unique ID for the column.
     * Auto-generated from the property
     * @type {?|undefined}
     */
    PblColumnGroupDefinition.prototype.id;
    /**
     * The index (zero based) of the header row this header group column is attached to, used for multi-header setup.
     * @type {?}
     */
    PblColumnGroupDefinition.prototype.rowIndex;
    /**
     * The grid's column that is the first child column for this group.
     * @type {?}
     */
    PblColumnGroupDefinition.prototype.prop;
    /**
     * The total span of the group (excluding the first child - i.e. prop).
     * The span and prop are used to get the child columns of this group.
     * The span is not dynamic, once the columns are set they don't change.
     *
     * For example, if a we have a span of 2 and the column at the 2nd position is hidden it will still count as
     * being spanned although the UI will span only 1 column... (because the 2nd is hidden...)
     * @type {?}
     */
    PblColumnGroupDefinition.prototype.span;
}
/**
 * @record
 */
export function PblColumnDefinition() { }
if (false) {
    /**
     * A Unique ID for the column.
     * Whe not set (recommend) it is auto-generated by concatenating the values of `prop` and ,
     * If you set this value manually, make sure it does not conflict with other columns!
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.id;
    /**
     * When set, defines this column as the primary index of the data-set with all values in this column being unique.
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.pIndex;
    /**
     * The property to display (from the row element)
     * You can use dot notation to display deep paths.
     * @type {?}
     */
    PblColumnDefinition.prototype.prop;
    /** @type {?|undefined} */
    PblColumnDefinition.prototype.headerType;
    /** @type {?|undefined} */
    PblColumnDefinition.prototype.footerType;
    /**
     * A path to a nested object, relative to the row element.
     * The grid will display `prop` from the object referenced by `path`.
     *
     * You can also use dot notation directly from `prop`.
     *
     * Example:
     * prop: "street"
     * path: [ "myInstance", "user", "address"
     *
     * is identical to:
     * prop: "myInstance.user.address.street"
     *
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.path;
    /** @type {?|undefined} */
    PblColumnDefinition.prototype.sort;
    /**
     * A custom predicate function to filter rows using the current column.
     *
     * Valid only when filtering by value.
     * See `PblDataSource.setFilter` for more information.
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.filter;
    /**
     * Indicates if the grid is editable or not.
     * Note that an editable also requires an edit template to qualify as editable, this flag alone is not enough.
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.editable;
    /** @type {?|undefined} */
    PblColumnDefinition.prototype.pin;
    /**
     * @deprecated BREAKING CHANGE 1.0.0 - Use `alias` instead.
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.sortAlias;
    /**
     * An alias used to identify the column.
     * Useful when the server provides sort/filter metadata that does not have a 1:1 match with the column names.
     * e.g. Deep path props, property name convention mismatch, etc...
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.alias;
    /**
     * Optional transformer that control the value output from the combination of a column and a row.
     * The value returned from this transformer will be returned from `PblColumn.getValue`
     * @type {?|undefined}
     */
    PblColumnDefinition.prototype.transform;
}
/**
 * @record
 */
export function PblMetaRowDefinitions() { }
if (false) {
    /** @type {?|undefined} */
    PblMetaRowDefinitions.prototype.rowClassName;
    /** @type {?|undefined} */
    PblMetaRowDefinitions.prototype.type;
}
/**
 * Represent a list of meta column's that together form a META ROW.
 * In other words, this is the definition of a row, using it's building blocks - the columns.
 *
 * > A row in the grid represents a row in the datasource, A **meta row** does not, it can represent anything.
 * Meta rows are header, footer and header group.
 * @record
 * @template T
 */
export function PblColumnSet() { }
if (false) {
    /** @type {?} */
    PblColumnSet.prototype.rowIndex;
    /** @type {?} */
    PblColumnSet.prototype.cols;
}
/**
 * Represent a complete column definition set for a grid. (table, header, footer and headerGroup columns).
 *
 * `PblNgridColumnDefinitionSet` contains POJO objects (simple JSON like objects) for each column type (`PblColumnDefinition`, `PblMetaColumnDefinition` and `PblColumnGroupDefinition`)
 * which are later used to create runtime instance for each column type (`PblColumn`, `PblMetaColumn` and `PblColumnGroup`)
 *
 * Because `PblNgridColumnDefinitionSet` contains POJO objects it can be serialized easily.
 * @record
 */
export function PblNgridColumnDefinitionSet() { }
if (false) {
    /** @type {?} */
    PblNgridColumnDefinitionSet.prototype.table;
    /** @type {?} */
    PblNgridColumnDefinitionSet.prototype.header;
    /** @type {?} */
    PblNgridColumnDefinitionSet.prototype.footer;
    /** @type {?} */
    PblNgridColumnDefinitionSet.prototype.headerGroup;
}
/**
 * Represent a complete column set for a grid. (table, header, footer and headerGroup columns).
 *
 * `PblNgridColumnSet` contains runtime instances of for each column type (`PblColumn`, `PblMetaColumn` and `PblColumnGroup`)
 * which
 * @record
 */
export function PblNgridColumnSet() { }
if (false) {
    /** @type {?} */
    PblNgridColumnSet.prototype.table;
    /** @type {?} */
    PblNgridColumnSet.prototype.header;
    /** @type {?} */
    PblNgridColumnSet.prototype.footer;
    /** @type {?} */
    PblNgridColumnSet.prototype.headerGroup;
    /** @type {?} */
    PblNgridColumnSet.prototype.groupStore;
}
//# sourceMappingURL=data:application/json;base64,
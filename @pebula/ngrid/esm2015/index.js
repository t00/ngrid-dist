/* LEAVE THIS, WE NEED IT SO THE AUGMENTATION IN THE FILE WILL LOAD. */
import './lib/grid/bind-grid-to-datasource';
import { isPblColumn, isPblMetaColumn, isPblColumnGroup } from './lib/grid/index';
/* Some symbols in `@pebula/ngrid/core` are also used by "regular" users of ngrid (as opposed to internal/plugin use) so we need to re-export them
   from the main package so "regular" user will not have to specifically address `@pebula/ngrid/core` */
export { 
// Configuration
PEB_NGRID_CONFIG, PblNgridConfigService, PblDataSourceAdapter, PblDataSource, PblDataSourceFactory, createDS, applySort, } from '@pebula/ngrid/core';
export { PblColumn, PblMetaColumn, PblColumnGroup, PblColumnFactory, columnFactory, isPblMetaColumn, isPblColumnGroup, isPblColumn, NGRID_CELL_FACTORY, PBL_NGRID_ROW_TEMPLATE, PblNgridRowDef, PblNgridRowOverride, PblNgridRowComponent, PblNgridColumnRowComponent, PblNgridMetaRowComponent, PblNgridComponent, ColumnApi, PblNgridRegistryService, PblNgridSingleTemplateRegistry, PblNgridMultiTemplateRegistry, PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext, PblNgridCellDefDirective, PblNgridHeaderCellDefDirective, PblNgridFooterCellDefDirective, PblNgridCellStyling, PblNgridNoDataRefDirective, DISABLE_INTERSECTION_OBSERVABLE, PblNgridBaseVirtualScrollDirective, NoVirtualScrollStrategy, PblNgridDynamicVirtualScrollStrategy, 
// TODO: Move to an independent package in v4
PblNgridFixedSizeVirtualScrollStrategy, PblNgridAutoSizeVirtualScrollStrategy, PblRowContext, } from './lib/grid/index';
export { EXT_API_TOKEN } from './lib/ext/grid-ext-api';
export { ngridPlugin } from './lib/ext/grid-plugin';
export { PblNgridPluginController } from './lib/ext/plugin-control';
export const utils = {
    isPblColumn,
    isPblMetaColumn,
    isPblColumnGroup,
};
export { PblNgridModule, provideCommon } from './lib/ngrid.module';
export { PblCdkAutoSizeVirtualScrollDirective } from './lib/grid/features/virtual-scroll/strategies/cdk-wrappers/v-scroll-auto.directive';
export { PblCdkFixedSizedVirtualScrollDirective } from './lib/grid/features/virtual-scroll/strategies/cdk-wrappers/v-scroll-fixed.directive';
export { PblNgridOuterSectionDirective, PblNgridCellComponent, PblNgridFooterCellComponent, PblNgridMetaCellComponent, PblNgridHeaderCellComponent, PblNgridScrolling, PblNgridPaginatorRefDirective, PblNgridHeaderExtensionRefDirective, PblNgridHideColumns, PblCdkVirtualScrollDirective, PblNgridCellEditAutoFocusDirective, PblNgridEditorCellDefDirective, } from './lib/grid/index';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWJzL25ncmlkL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1RUFBdUU7QUFDdkUsT0FBTyxvQ0FBb0MsQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxGO3dHQUN3RztBQUN4RyxPQUFPO0FBQ0wsZ0JBQWdCO0FBQ2hCLGdCQUFnQixFQUFrQixxQkFBcUIsRUFTdkQsb0JBQW9CLEVBQ3BCLGFBQWEsRUFFYixvQkFBb0IsRUFHcEIsUUFBUSxFQUFFLFNBQVMsR0FXcEIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixPQUFPLEVBQ0wsU0FBUyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQVUsYUFBYSxFQUNqRixlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUk5QyxrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSwwQkFBMEIsRUFBRSx3QkFBd0IsRUFFL0csaUJBQWlCLEVBQ0ssU0FBUyxFQUUvQix1QkFBdUIsRUFDdkIsOEJBQThCLEVBQUUsNkJBQTZCLEVBQUUsOEJBQThCLEVBQzdELGtDQUFrQyxFQUNsRSx3QkFBd0IsRUFDeEIsOEJBQThCLEVBQzlCLDhCQUE4QixFQUM5QixtQkFBbUIsRUFDbkIsMEJBQTBCLEVBRzFCLCtCQUErQixFQUNBLGtDQUFrQyxFQUNqRSx1QkFBdUIsRUFBRSxvQ0FBb0M7QUFDN0QsNkNBQTZDO0FBQzdDLHNDQUFzQyxFQUFFLHFDQUFxQyxFQUdYLGFBQWEsR0FFaEYsTUFBTSxrQkFBa0IsQ0FBQztBQUkxQixPQUFPLEVBQUUsYUFBYSxFQUF3QixNQUFNLHdCQUF3QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQXVCLE1BQU0sdUJBQXVCLENBQUM7QUFDekUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFcEUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHO0lBQ25CLFdBQVc7SUFDWCxlQUFlO0lBQ2YsZ0JBQWdCO0NBQ2pCLENBQUM7QUFFRixPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLG9GQUFvRixDQUFDO0FBQzFJLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLHFGQUFxRixDQUFDO0FBQzdJLE9BQU8sRUFDTCw2QkFBNkIsRUFBRSxxQkFBcUIsRUFBRSwyQkFBMkIsRUFBRSx5QkFBeUIsRUFBRSwyQkFBMkIsRUFBRSxpQkFBaUIsRUFDNUosNkJBQTZCLEVBQUUsbUNBQW1DLEVBQUUsbUJBQW1CLEVBQUUsNEJBQTRCLEVBQ3JILGtDQUFrQyxFQUFFLDhCQUE4QixHQUNuRSxNQUFNLGtCQUFrQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogTEVBVkUgVEhJUywgV0UgTkVFRCBJVCBTTyBUSEUgQVVHTUVOVEFUSU9OIElOIFRIRSBGSUxFIFdJTEwgTE9BRC4gKi9cbmltcG9ydCAnLi9saWIvZ3JpZC9iaW5kLWdyaWQtdG8tZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBpc1BibENvbHVtbiwgaXNQYmxNZXRhQ29sdW1uLCBpc1BibENvbHVtbkdyb3VwIH0gZnJvbSAnLi9saWIvZ3JpZC9pbmRleCc7XG5cbi8qIFNvbWUgc3ltYm9scyBpbiBgQHBlYnVsYS9uZ3JpZC9jb3JlYCBhcmUgYWxzbyB1c2VkIGJ5IFwicmVndWxhclwiIHVzZXJzIG9mIG5ncmlkIChhcyBvcHBvc2VkIHRvIGludGVybmFsL3BsdWdpbiB1c2UpIHNvIHdlIG5lZWQgdG8gcmUtZXhwb3J0IHRoZW1cbiAgIGZyb20gdGhlIG1haW4gcGFja2FnZSBzbyBcInJlZ3VsYXJcIiB1c2VyIHdpbGwgbm90IGhhdmUgdG8gc3BlY2lmaWNhbGx5IGFkZHJlc3MgYEBwZWJ1bGEvbmdyaWQvY29yZWAgKi9cbmV4cG9ydCB7XG4gIC8vIENvbmZpZ3VyYXRpb25cbiAgUEVCX05HUklEX0NPTkZJRywgUGJsTmdyaWRDb25maWcsIFBibE5ncmlkQ29uZmlnU2VydmljZSxcblxuICAvLyBQYWdpbmF0aW9uXG4gIFBibE5ncmlkUGFnaW5hdG9yS2luZCwgUGJsUGFnaW5hdG9yLCBQYmxQYWdpbmF0b3JDaGFuZ2VFdmVudCxcblxuICAvLyBEYXRhIFNvdXJjZVxuICBQYmxEYXRhU291cmNlQ29uZmlndXJhYmxlVHJpZ2dlcnMsXG4gIFBibERhdGFTb3VyY2VUcmlnZ2VycyxcbiAgUGJsRGF0YVNvdXJjZVRyaWdnZXJDaGFuZ2UsIFBibERhdGFTb3VyY2VUcmlnZ2VyQ2hhbmdlZEV2ZW50LCBQYmxEYXRhU291cmNlVHJpZ2dlckNoYW5nZWRFdmVudFNvdXJjZSwgUGJsRGF0YVNvdXJjZVRyaWdnZXJDaGFuZ2VIYW5kbGVyLFxuICBQYmxEYXRhU291cmNlQWRhcHRlcixcbiAgUGJsRGF0YVNvdXJjZSwgUGJsRGF0YVNvdXJjZU9wdGlvbnMsXG4gIFBibE5ncmlkU29ydEluc3RydWN0aW9ucywgUGJsTmdyaWRTb3J0RGVmaW5pdGlvbiwgUGJsTmdyaWRTb3J0ZXIsIFBibE5ncmlkU29ydE9yZGVyLFxuICBQYmxEYXRhU291cmNlRmFjdG9yeSwgRGF0YVNvdXJjZU9mLFxuICBEYXRhU291cmNlRmlsdGVyVG9rZW4sIERhdGFTb3VyY2VQcmVkaWNhdGUsIERhdGFTb3VyY2VDb2x1bW5QcmVkaWNhdGUsXG4gIFBibERhdGFTb3VyY2VBZGFwdGVyUHJvY2Vzc2VkUmVzdWx0LFxuICBjcmVhdGVEUywgYXBwbHlTb3J0LFxuXG4gIC8vIE1vZGVsczogQ29sdW1uXG4gIFBibENvbHVtblR5cGVEZWZpbml0aW9uRGF0YU1hcCxcbiAgUGJsQ29sdW1uVHlwZURlZmluaXRpb24sXG4gIFBibENvbHVtbkRlZmluaXRpb24sXG4gIFBibE1ldGFDb2x1bW5EZWZpbml0aW9uLFxuICBQYmxDb2x1bW5Hcm91cERlZmluaXRpb24sXG4gIFBibENvbHVtblNldCxcbiAgUGJsTWV0YVJvd0RlZmluaXRpb25zLFxuICBQYmxOZ3JpZENvbHVtbkRlZmluaXRpb25TZXQsXG59IGZyb20gJ0BwZWJ1bGEvbmdyaWQvY29yZSc7XG5cbmV4cG9ydCB7XG4gIFBibENvbHVtbiwgUGJsTWV0YUNvbHVtbiwgUGJsQ29sdW1uR3JvdXAsIFBibENvbHVtbkZhY3RvcnksIENPTFVNTiwgY29sdW1uRmFjdG9yeSxcbiAgaXNQYmxNZXRhQ29sdW1uLCBpc1BibENvbHVtbkdyb3VwLCBpc1BibENvbHVtbixcblxuICBHcmlkUm93VHlwZSxcbiAgUm93c0FwaSxcbiAgTkdSSURfQ0VMTF9GQUNUT1JZLFxuICBQQkxfTkdSSURfUk9XX1RFTVBMQVRFLFxuICBQYmxOZ3JpZFJvd0RlZiwgUGJsTmdyaWRSb3dPdmVycmlkZSwgUGJsTmdyaWRSb3dDb21wb25lbnQsIFBibE5ncmlkQ29sdW1uUm93Q29tcG9uZW50LCBQYmxOZ3JpZE1ldGFSb3dDb21wb25lbnQsXG5cbiAgUGJsTmdyaWRDb21wb25lbnQsXG4gIEF1dG9TaXplVG9GaXRPcHRpb25zLCBDb2x1bW5BcGksXG5cbiAgUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2UsXG4gIFBibE5ncmlkU2luZ2xlVGVtcGxhdGVSZWdpc3RyeSwgUGJsTmdyaWRNdWx0aVRlbXBsYXRlUmVnaXN0cnksIFBibE5ncmlkTXVsdGlDb21wb25lbnRSZWdpc3RyeSxcbiAgUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uUmVmLCBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0LFxuICBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmUsXG4gIFBibE5ncmlkSGVhZGVyQ2VsbERlZkRpcmVjdGl2ZSxcbiAgUGJsTmdyaWRGb290ZXJDZWxsRGVmRGlyZWN0aXZlLFxuICBQYmxOZ3JpZENlbGxTdHlsaW5nLFxuICBQYmxOZ3JpZE5vRGF0YVJlZkRpcmVjdGl2ZSxcbiAgUGJsTmdyaWRDb2x1bW5TZXQsXG5cbiAgRElTQUJMRV9JTlRFUlNFQ1RJT05fT0JTRVJWQUJMRSxcbiAgUGJsTmdyaWRWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3ksIFBibE5ncmlkQmFzZVZpcnR1YWxTY3JvbGxEaXJlY3RpdmUsXG4gIE5vVmlydHVhbFNjcm9sbFN0cmF0ZWd5LCBQYmxOZ3JpZER5bmFtaWNWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3ksXG4gIC8vIFRPRE86IE1vdmUgdG8gYW4gaW5kZXBlbmRlbnQgcGFja2FnZSBpbiB2NFxuICBQYmxOZ3JpZEZpeGVkU2l6ZVZpcnR1YWxTY3JvbGxTdHJhdGVneSwgUGJsTmdyaWRBdXRvU2l6ZVZpcnR1YWxTY3JvbGxTdHJhdGVneSxcblxuICBQYmxOZ3JpZEZvY3VzQ2hhbmdlZEV2ZW50LCBQYmxOZ3JpZFNlbGVjdGlvbkNoYW5nZWRFdmVudCxcbiAgUGJsTmdyaWRNZXRhQ2VsbENvbnRleHQsIFBibE5ncmlkQ2VsbENvbnRleHQsIFBibE5ncmlkUm93Q29udGV4dCwgUGJsUm93Q29udGV4dCwgUGJsTmdyaWRDb250ZXh0QXBpLFxuICBDZWxsUmVmZXJlbmNlLCBHcmlkRGF0YVBvaW50LFxufSBmcm9tICcuL2xpYi9ncmlkL2luZGV4JztcblxuZXhwb3J0IHsgUGJsTmdyaWRQbHVnaW4sIFBibE5ncmlkUGx1Z2luRXh0ZW5zaW9uIH0gZnJvbSAnLi9saWIvZXh0L3R5cGVzJztcblxuZXhwb3J0IHsgRVhUX0FQSV9UT0tFTiwgUGJsTmdyaWRFeHRlbnNpb25BcGkgfSBmcm9tICcuL2xpYi9leHQvZ3JpZC1leHQtYXBpJztcbmV4cG9ydCB7IG5ncmlkUGx1Z2luLCBOZ3JpZFBsdWdpbk1ldGFkYXRhIH0gZnJvbSAnLi9saWIvZXh0L2dyaWQtcGx1Z2luJztcbmV4cG9ydCB7IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciB9IGZyb20gJy4vbGliL2V4dC9wbHVnaW4tY29udHJvbCc7XG5cbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgaXNQYmxDb2x1bW4sXG4gIGlzUGJsTWV0YUNvbHVtbixcbiAgaXNQYmxDb2x1bW5Hcm91cCxcbn07XG5cbmV4cG9ydCB7IFBibE5ncmlkTW9kdWxlLCBwcm92aWRlQ29tbW9uIH0gZnJvbSAnLi9saWIvbmdyaWQubW9kdWxlJztcblxuZXhwb3J0IHsgUGJsQ2RrQXV0b1NpemVWaXJ0dWFsU2Nyb2xsRGlyZWN0aXZlIH0gZnJvbSAnLi9saWIvZ3JpZC9mZWF0dXJlcy92aXJ0dWFsLXNjcm9sbC9zdHJhdGVnaWVzL2Nkay13cmFwcGVycy92LXNjcm9sbC1hdXRvLmRpcmVjdGl2ZSc7XG5leHBvcnQgeyBQYmxDZGtGaXhlZFNpemVkVmlydHVhbFNjcm9sbERpcmVjdGl2ZSB9IGZyb20gJy4vbGliL2dyaWQvZmVhdHVyZXMvdmlydHVhbC1zY3JvbGwvc3RyYXRlZ2llcy9jZGstd3JhcHBlcnMvdi1zY3JvbGwtZml4ZWQuZGlyZWN0aXZlJztcbmV4cG9ydCB7XG4gIFBibE5ncmlkT3V0ZXJTZWN0aW9uRGlyZWN0aXZlLCBQYmxOZ3JpZENlbGxDb21wb25lbnQsIFBibE5ncmlkRm9vdGVyQ2VsbENvbXBvbmVudCwgUGJsTmdyaWRNZXRhQ2VsbENvbXBvbmVudCwgUGJsTmdyaWRIZWFkZXJDZWxsQ29tcG9uZW50LCBQYmxOZ3JpZFNjcm9sbGluZyxcbiAgUGJsTmdyaWRQYWdpbmF0b3JSZWZEaXJlY3RpdmUsIFBibE5ncmlkSGVhZGVyRXh0ZW5zaW9uUmVmRGlyZWN0aXZlLCBQYmxOZ3JpZEhpZGVDb2x1bW5zLCBQYmxDZGtWaXJ0dWFsU2Nyb2xsRGlyZWN0aXZlLFxuICBQYmxOZ3JpZENlbGxFZGl0QXV0b0ZvY3VzRGlyZWN0aXZlLCBQYmxOZ3JpZEVkaXRvckNlbGxEZWZEaXJlY3RpdmUsXG59IGZyb20gJy4vbGliL2dyaWQvaW5kZXgnO1xuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPblColumn, isPblMetaColumn, isPblColumnGroup } from './lib/table/index';
export { PblPagingPaginator, PblTokenPaginator } from './lib/paginator/index';
export { PblDataSourceAdapter, PblDataSource, applySort, PblDataSourceFactory, createDS, } from './lib/data-source/index';
export { PEB_NGRID_CONFIG, PblNgridConfigService, PblColumn, PblMetaColumn, PblColumnGroup, PblColumnFactory, columnFactory, PBL_NGRID_ROW_TEMPLATE, PblNgridRowComponent, PblNgridComponent, PblNgridRegistryService, ColumnApi, PblNgridSingleTemplateRegistry, PblNgridMultiTemplateRegistry, PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext, PblNgridCellDefDirective, PblNgridHeaderCellDefDirective, PblNgridFooterCellDefDirective, PblNgridCellStyling, PblNgridNoDataRefDirective, NoVirtualScrollStrategy, TableAutoSizeVirtualScrollStrategy, PblRowContext, } from './lib/table/index';
export { EXT_API_TOKEN } from './lib/ext/table-ext-api';
export { TablePlugin } from './lib/ext/table-plugin';
export { PblNgridPluginController } from './lib/ext/plugin-control';
/** @type {?} */
export const utils = {
    isPblColumn,
    isPblMetaColumn,
    isPblColumnGroup,
};
export { PblNgridModule, provideCommon } from './lib/table.module';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcGVidWxhL25ncmlkLyIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkYsT0FBTyxFQUdMLGtCQUFrQixFQUNsQixpQkFBaUIsRUFFbEIsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBS0wsb0JBQW9CLEVBQ3BCLGFBQWEsRUFDcUQsU0FBUyxFQUMzRSxvQkFBb0IsRUFBRSxRQUFRLEdBRy9CLE1BQU0seUJBQXlCLENBQUM7QUFFakMsT0FBTyxFQUNMLGdCQUFnQixFQUFrQixxQkFBcUIsRUFFdkQsU0FBUyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQVUsYUFBYSxFQUVqRixzQkFBc0IsRUFBRSxvQkFBb0IsRUFFNUMsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUNELFNBQVMsRUFFL0IsOEJBQThCLEVBQUUsNkJBQTZCLEVBQUUsOEJBQThCLEVBQzdELGtDQUFrQyxFQUNsRSx3QkFBd0IsRUFDeEIsOEJBQThCLEVBQzlCLDhCQUE4QixFQUM5QixtQkFBbUIsRUFDbkIsMEJBQTBCLEVBUTFCLHVCQUF1QixFQUFFLGtDQUFrQyxFQUdPLGFBQWEsR0FFaEYsTUFBTSxtQkFBbUIsQ0FBQztBQVkzQixPQUFPLEVBQUUsYUFBYSxFQUF3QixNQUFNLHlCQUF5QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxXQUFXLEVBQXVCLE1BQU0sd0JBQXdCLENBQUM7QUFDMUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBRXBFLE1BQU0sT0FBTyxLQUFLLEdBQUc7SUFDbkIsV0FBVztJQUNYLGVBQWU7SUFDZixnQkFBZ0I7Q0FDakI7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQYmxDb2x1bW4sIGlzUGJsTWV0YUNvbHVtbiwgaXNQYmxDb2x1bW5Hcm91cCB9IGZyb20gJy4vbGliL3RhYmxlL2luZGV4JztcblxuZXhwb3J0IHtcbiAgUGJsTmdyaWRQYWdpbmF0b3JLaW5kLFxuICBQYmxQYWdpbmF0b3IsXG4gIFBibFBhZ2luZ1BhZ2luYXRvcixcbiAgUGJsVG9rZW5QYWdpbmF0b3IsXG4gIFBibFBhZ2luYXRvckNoYW5nZUV2ZW50XG59IGZyb20gJy4vbGliL3BhZ2luYXRvci9pbmRleCc7XG5cbmV4cG9ydCB7XG4gIFBibERhdGFTb3VyY2VDb25maWd1cmFibGVUcmlnZ2VycyxcbiAgUGJsRGF0YVNvdXJjZVRyaWdnZXJzLFxuICBQYmxEYXRhU291cmNlVHJpZ2dlckNoYW5nZSxcbiAgUGJsRGF0YVNvdXJjZVRyaWdnZXJDaGFuZ2VkRXZlbnQsXG4gIFBibERhdGFTb3VyY2VBZGFwdGVyLFxuICBQYmxEYXRhU291cmNlLCBQYmxEYXRhU291cmNlT3B0aW9ucyxcbiAgUGJsTmdyaWRTb3J0SW5zdHJ1Y3Rpb25zLCBQYmxOZ3JpZFNvcnREZWZpbml0aW9uLCBQYmxOZ3JpZFNvcnRlciwgYXBwbHlTb3J0LCBQYmxOZ3JpZFNvcnRPcmRlcixcbiAgUGJsRGF0YVNvdXJjZUZhY3RvcnksIGNyZWF0ZURTLCBEYXRhU291cmNlT2YsXG4gIERhdGFTb3VyY2VGaWx0ZXJUb2tlbiwgRGF0YVNvdXJjZVByZWRpY2F0ZSwgRGF0YVNvdXJjZUNvbHVtblByZWRpY2F0ZSxcbiAgUGJsRGF0YVNvdXJjZUFkYXB0ZXJQcm9jZXNzZWRSZXN1bHQsXG59IGZyb20gJy4vbGliL2RhdGEtc291cmNlL2luZGV4JztcblxuZXhwb3J0IHtcbiAgUEVCX05HUklEX0NPTkZJRywgUGJsTmdyaWRDb25maWcsIFBibE5ncmlkQ29uZmlnU2VydmljZSxcblxuICBQYmxDb2x1bW4sIFBibE1ldGFDb2x1bW4sIFBibENvbHVtbkdyb3VwLCBQYmxDb2x1bW5GYWN0b3J5LCBDT0xVTU4sIGNvbHVtbkZhY3RvcnksXG5cbiAgUEJMX05HUklEX1JPV19URU1QTEFURSwgUGJsTmdyaWRSb3dDb21wb25lbnQsXG5cbiAgUGJsTmdyaWRDb21wb25lbnQsXG4gIFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlLFxuICBBdXRvU2l6ZVRvRml0T3B0aW9ucywgQ29sdW1uQXBpLFxuXG4gIFBibE5ncmlkU2luZ2xlVGVtcGxhdGVSZWdpc3RyeSwgUGJsTmdyaWRNdWx0aVRlbXBsYXRlUmVnaXN0cnksIFBibE5ncmlkTXVsdGlDb21wb25lbnRSZWdpc3RyeSxcbiAgUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uUmVmLCBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0LFxuICBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmUsXG4gIFBibE5ncmlkSGVhZGVyQ2VsbERlZkRpcmVjdGl2ZSxcbiAgUGJsTmdyaWRGb290ZXJDZWxsRGVmRGlyZWN0aXZlLFxuICBQYmxOZ3JpZENlbGxTdHlsaW5nLFxuICBQYmxOZ3JpZE5vRGF0YVJlZkRpcmVjdGl2ZSxcbiAgUGJsQ29sdW1uVHlwZURlZmluaXRpb24sIFBibENvbHVtblR5cGVEZWZpbml0aW9uRGF0YU1hcCxcbiAgUGJsQ29sdW1uRGVmaW5pdGlvbixcbiAgUGJsTWV0YUNvbHVtbkRlZmluaXRpb24sXG4gIFBibENvbHVtbkdyb3VwRGVmaW5pdGlvbixcbiAgUGJsQ29sdW1uU2V0LCBQYmxNZXRhUm93RGVmaW5pdGlvbnMsXG4gIFBibE5ncmlkQ29sdW1uU2V0LCBQYmxOZ3JpZENvbHVtbkRlZmluaXRpb25TZXQsXG5cbiAgTm9WaXJ0dWFsU2Nyb2xsU3RyYXRlZ3ksIFRhYmxlQXV0b1NpemVWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3ksXG5cbiAgUGJsTmdyaWRGb2N1c0NoYW5nZWRFdmVudCwgUGJsTmdyaWRTZWxlY3Rpb25DaGFuZ2VkRXZlbnQsXG4gIFBibE5ncmlkTWV0YUNlbGxDb250ZXh0LCBQYmxOZ3JpZENlbGxDb250ZXh0LCBQYmxOZ3JpZFJvd0NvbnRleHQsIFBibFJvd0NvbnRleHQsIFBibE5ncmlkQ29udGV4dEFwaSxcbiAgQ2VsbFJlZmVyZW5jZSwgR3JpZERhdGFQb2ludCxcbn0gZnJvbSAnLi9saWIvdGFibGUvaW5kZXgnO1xuXG5leHBvcnQge1xuICBQYmxOZ3JpZFBsdWdpbixcbiAgUGJsTmdyaWRQbHVnaW5FeHRlbnNpb24sXG4gIFBibE5ncmlkT25Jbml0RXZlbnQsXG4gIFBibE5ncmlkT25SZXNpemVSb3dFdmVudCxcbiAgUGJsTmdyaWRPbkludmFsaWRhdGVIZWFkZXJzRXZlbnQsXG4gIFBibE5ncmlkT25EYXRhU291cmNlRXZlbnQsXG4gIFBibE5ncmlkRXZlbnRzLFxuIH0gZnJvbSAnLi9saWIvZXh0L3R5cGVzJztcblxuZXhwb3J0IHsgRVhUX0FQSV9UT0tFTiwgUGJsTmdyaWRFeHRlbnNpb25BcGkgfSBmcm9tICcuL2xpYi9leHQvdGFibGUtZXh0LWFwaSc7XG5leHBvcnQgeyBUYWJsZVBsdWdpbiwgVGFibGVQbHVnaW5NZXRhZGF0YSB9IGZyb20gJy4vbGliL2V4dC90YWJsZS1wbHVnaW4nO1xuZXhwb3J0IHsgUGJsTmdyaWRQbHVnaW5Db250cm9sbGVyIH0gZnJvbSAnLi9saWIvZXh0L3BsdWdpbi1jb250cm9sJztcblxuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICBpc1BibENvbHVtbixcbiAgaXNQYmxNZXRhQ29sdW1uLFxuICBpc1BibENvbHVtbkdyb3VwLFxufTtcblxuZXhwb3J0IHsgUGJsTmdyaWRNb2R1bGUsIHByb3ZpZGVDb21tb24gfSBmcm9tICcuL2xpYi90YWJsZS5tb2R1bGUnO1xuIl19
import { createStateChunkHandler } from '../../handling';
import { stateVisor } from '../../state-visor';
export function registerColumnOrderHandlers() {
    stateVisor.registerRootChunkSection('columnOrder', {
        sourceMatcher: ctx => ctx.grid.columnApi,
        stateMatcher: state => {
            if (!state.columnOrder) {
                state.columnOrder = [];
            }
            return state;
        }
    });
    createStateChunkHandler('columnOrder')
        .handleKeys('columnOrder')
        .serialize((key, ctx) => ctx.source.visibleColumnIds.slice())
        .deserialize((key, columnOrder, ctx) => {
        const { extApi, grid } = ctx;
        let lastMove;
        if ((columnOrder === null || columnOrder === void 0 ? void 0 : columnOrder.length) === grid.columnApi.visibleColumns.length) {
            for (let i = 0, len = columnOrder.length; i < len; i++) {
                const anchor = grid.columnApi.visibleColumns[i];
                if (columnOrder[i] !== anchor.id) {
                    const column = grid.columnApi.findColumn(columnOrder[i]);
                    if (!column) {
                        return;
                    }
                    lastMove = [column, anchor];
                    grid.columnApi.moveColumn(column, anchor);
                }
            }
        }
        // With this revert/redo of the last move we just trigger a redraw.
        if (lastMove) {
            grid.columnApi.moveColumn(lastMove[1], lastMove[0]);
            grid.columnApi.moveColumn(lastMove[0], lastMove[1]);
        }
    })
        .register();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3N0YXRlL3NyYy9saWIvY29yZS9idWlsdC1pbi1oYW5kbGVycy9jb2x1bW4tb3JkZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRy9DLE1BQU0sVUFBVSwyQkFBMkI7SUFDekMsVUFBVSxDQUFDLHdCQUF3QixDQUNqQyxhQUFhLEVBQ2I7UUFDRSxhQUFhLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVM7UUFDeEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUN0QixLQUFLLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQzthQUN4QjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztLQUNGLENBQ0YsQ0FBQztJQUVGLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztTQUNuQyxVQUFVLENBQUMsYUFBYSxDQUFDO1NBQ3pCLFNBQVMsQ0FBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUU7U0FDOUQsV0FBVyxDQUFFLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN0QyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUM3QixJQUFJLFFBQWdDLENBQUM7UUFFckMsSUFBSSxDQUFBLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxNQUFNLE1BQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ2hFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFO29CQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekQsSUFBSSxDQUFDLE1BQU0sRUFBRTt3QkFDWCxPQUFPO3FCQUNSO29CQUNELFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUMzQzthQUNGO1NBQ0Y7UUFDRCxtRUFBbUU7UUFDbkUsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsUUFBUSxFQUFFLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGJsQ29sdW1uIH0gZnJvbSAnQHBlYnVsYS9uZ3JpZCc7XG5pbXBvcnQgeyBjcmVhdGVTdGF0ZUNodW5rSGFuZGxlciB9IGZyb20gJy4uLy4uL2hhbmRsaW5nJztcbmltcG9ydCB7IHN0YXRlVmlzb3IgfSBmcm9tICcuLi8uLi9zdGF0ZS12aXNvcic7XG5pbXBvcnQgeyBQYmxOZ3JpZFN0YXRlTG9hZE9wdGlvbnMgfSBmcm9tICcuLi8uLi9tb2RlbHMvaW5kZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb2x1bW5PcmRlckhhbmRsZXJzKCkge1xuICBzdGF0ZVZpc29yLnJlZ2lzdGVyUm9vdENodW5rU2VjdGlvbihcbiAgICAnY29sdW1uT3JkZXInLFxuICAgIHtcbiAgICAgIHNvdXJjZU1hdGNoZXI6IGN0eCA9PiBjdHguZ3JpZC5jb2x1bW5BcGksXG4gICAgICBzdGF0ZU1hdGNoZXI6IHN0YXRlID0+IHtcbiAgICAgICAgaWYgKCFzdGF0ZS5jb2x1bW5PcmRlcikge1xuICAgICAgICAgIHN0YXRlLmNvbHVtbk9yZGVyID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBjcmVhdGVTdGF0ZUNodW5rSGFuZGxlcignY29sdW1uT3JkZXInKVxuICAgIC5oYW5kbGVLZXlzKCdjb2x1bW5PcmRlcicpXG4gICAgLnNlcmlhbGl6ZSggKGtleSwgY3R4KSA9PiBjdHguc291cmNlLnZpc2libGVDb2x1bW5JZHMuc2xpY2UoKSApXG4gICAgLmRlc2VyaWFsaXplKCAoa2V5LCBjb2x1bW5PcmRlciwgY3R4KSA9PiB7XG4gICAgICBjb25zdCB7IGV4dEFwaSwgZ3JpZCB9ID0gY3R4O1xuICAgICAgbGV0IGxhc3RNb3ZlOiBbUGJsQ29sdW1uLCBQYmxDb2x1bW5dO1xuXG4gICAgICBpZiAoY29sdW1uT3JkZXI/Lmxlbmd0aCA9PT0gZ3JpZC5jb2x1bW5BcGkudmlzaWJsZUNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjb2x1bW5PcmRlci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGdyaWQuY29sdW1uQXBpLnZpc2libGVDb2x1bW5zW2ldO1xuICAgICAgICAgIGlmIChjb2x1bW5PcmRlcltpXSAhPT0gYW5jaG9yLmlkKSB7XG4gICAgICAgICAgICBjb25zdCBjb2x1bW4gPSBncmlkLmNvbHVtbkFwaS5maW5kQ29sdW1uKGNvbHVtbk9yZGVyW2ldKTtcbiAgICAgICAgICAgIGlmICghY29sdW1uKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RNb3ZlID0gW2NvbHVtbiwgYW5jaG9yXTtcbiAgICAgICAgICAgIGdyaWQuY29sdW1uQXBpLm1vdmVDb2x1bW4oY29sdW1uLCBhbmNob3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2l0aCB0aGlzIHJldmVydC9yZWRvIG9mIHRoZSBsYXN0IG1vdmUgd2UganVzdCB0cmlnZ2VyIGEgcmVkcmF3LlxuICAgICAgaWYgKGxhc3RNb3ZlKSB7XG4gICAgICAgIGdyaWQuY29sdW1uQXBpLm1vdmVDb2x1bW4obGFzdE1vdmVbMV0sIGxhc3RNb3ZlWzBdKTtcbiAgICAgICAgZ3JpZC5jb2x1bW5BcGkubW92ZUNvbHVtbihsYXN0TW92ZVswXSwgbGFzdE1vdmVbMV0pO1xuICAgICAgfVxuICAgIH0pXG4gICAgLnJlZ2lzdGVyKCk7XG4gIH1cbiJdfQ==
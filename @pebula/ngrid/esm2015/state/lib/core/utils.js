import { PblNgridPluginController } from '@pebula/ngrid';
import { stateVisor } from './state-visor';
import { PblNgridLocalStoragePersistAdapter } from './persistance/local-storage';
import { PblNgridIdAttributeIdentResolver } from './identification/index';
export function resolveId(grid, options) {
    const id = options.identResolver.resolveId(createChunkSectionContext(grid, options));
    if (!id) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            throw new Error('Could not resolve a unique id for an ngrid instance, state is disabled');
        }
    }
    return id;
}
export function serialize(def, state, ctx) {
    const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);
    for (const key of def.keys) {
        if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key)) {
            state[key] = def.serialize(key, ctx);
        }
    }
}
export function deserialize(def, state, ctx) {
    const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);
    for (const key of def.keys) {
        if (key in state) {
            if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key)) {
                def.deserialize(key, state[key], ctx);
            }
        }
    }
}
export function normalizeOptions(mode, options) {
    if (!options) {
        options = {};
    }
    if (!options.persistenceAdapter) {
        options.persistenceAdapter = new PblNgridLocalStoragePersistAdapter();
    }
    if (!options.identResolver) {
        options.identResolver = new PblNgridIdAttributeIdentResolver();
    }
    if (mode === 'load') {
        const opt = options;
        if (!opt.strategy) {
            opt.strategy = 'overwrite';
        }
    }
    return options;
}
export function getExtApi(grid) {
    const controller = PblNgridPluginController.find(grid);
    if (controller) {
        return controller.extApi;
    }
}
export function createChunkSectionContext(grid, options) {
    return { grid, extApi: getExtApi(grid), options };
}
export function createChunkContext(sectionContext, chunkConfig, mode) {
    return Object.assign(Object.assign({}, sectionContext), { source: chunkConfig.sourceMatcher(sectionContext), runChildChunk(childChunkId, state, source, data) {
            const childContext = Object.assign(Object.assign({}, sectionContext), { source, data });
            const defs = stateVisor.getDefinitionsForSection(childChunkId);
            const action = mode === 'serialize' ? serialize : deserialize;
            for (const def of defs) {
                action(def, state, childContext);
            }
        } });
}
export function stateKeyPredicateFactory(chunkId, options, rootPredicate = false) {
    // TODO: chunkId ans options include/exclude combination does not change
    // we need to cache it... e.g. each column def will create a new predicate if we don't cache.
    const filter = options.include || options.exclude;
    if (filter) {
        // -1: Exclude, 1: Include
        const mode = filter === options.include ? 1 : -1;
        const chunkFilter = filter[chunkId];
        if (typeof chunkFilter === 'boolean') {
            return mode === 1
                ? (key) => chunkFilter
                : (key) => !chunkFilter;
        }
        else if (Array.isArray(chunkFilter)) {
            if (rootPredicate) {
                // root predicate is for RootStateChunks and when set to true
                // the key itself has no impact on the predicate. If the filter is boolean nothing changes
                // but if it's an array, the array is ignored and considered as true ignoring the key because a key does not existing when checking the root
                return k => true;
            }
            else {
                return mode === 1
                    ? (key) => chunkFilter.indexOf(key) > -1
                    : (key) => chunkFilter.indexOf(key) === -1;
            }
        }
        else if (mode === 1) {
            return (key) => false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
import { stateVisor } from '../state-visor';
export class PblNgridStateChunkHandlerHost {
    constructor(chunkId) {
        this.chunkId = chunkId;
        this.keys = new Set();
        this.rKeys = new Set();
    }
    handleKeys(...keys) {
        for (const k of keys) {
            this.keys.add(k);
        }
        return this;
    }
    /**
     * Required keys are keys that cannot get excluded.
     * Either by adding the to the `exclude` option or by omitting them from the `include` option.
     */
    requiredKeys(...keys) {
        for (const k of keys) {
            this.keys.add(k);
            this.rKeys.add(k);
        }
        return this;
    }
    serialize(fn) {
        this.sFn = fn;
        return this;
    }
    deserialize(fn) {
        this.dFn = fn;
        return this;
    }
    register() {
        if (this.keys.size === 0) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                throw new Error('Invalid state chunk handler, no keys defined.');
            }
            return;
        }
        if (!this.sFn) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                throw new Error('Invalid state chunk handler, missing serialize handler.');
            }
            return;
        }
        if (!this.dFn) {
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                throw new Error('Invalid state chunk handler, missing deserialize handler.');
            }
            return;
        }
        stateVisor.registerChunkHandlerDefinition({
            chunkId: this.chunkId,
            keys: Array.from(this.keys.values()),
            rKeys: Array.from(this.rKeys.values()),
            serialize: this.sFn,
            deserialize: this.dFn,
        });
    }
}
export function createStateChunkHandler(section) {
    return new PblNgridStateChunkHandlerHost(section);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQvc3RhdGUvc3JjL2xpYi9jb3JlL2hhbmRsaW5nL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE1BQU0sT0FBTyw2QkFBNkI7SUFNeEMsWUFBb0IsT0FBVTtRQUFWLFlBQU8sR0FBUCxPQUFPLENBQUc7UUFMdEIsU0FBSSxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7UUFDcEIsVUFBSyxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7SUFJSyxDQUFDO0lBRW5DLFVBQVUsQ0FBQyxHQUFHLElBQWM7UUFDMUIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFFO1FBQzFDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7T0FHRztJQUNILFlBQVksQ0FBQyxHQUFHLElBQWM7UUFDNUIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBNkU7UUFDckYsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxXQUFXLENBQUMsRUFBZ0c7UUFDMUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxFQUFFO2dCQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7YUFDbEU7WUFDRCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRTtnQkFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO2FBQzVFO1lBQ0QsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEVBQUU7Z0JBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQzthQUM5RTtZQUNELE9BQU87U0FDUjtRQUVELFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQztZQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNuQixXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUc7U0FDdEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGO0FBVUQsTUFBTSxVQUFVLHVCQUF1QixDQUE4QixPQUFVO0lBQzdFLE9BQU8sSUFBSSw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVDaHVua3MsIFBibE5ncmlkU3RhdGVDaHVua0NvbnRleHQgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xuaW1wb3J0IHsgc3RhdGVWaXNvciB9IGZyb20gJy4uL3N0YXRlLXZpc29yJztcblxuZXhwb3J0IGNsYXNzIFBibE5ncmlkU3RhdGVDaHVua0hhbmRsZXJIb3N0PFQgZXh0ZW5kcyBrZXlvZiBTdGF0ZUNodW5rcywgWiBleHRlbmRzIGtleW9mIFN0YXRlQ2h1bmtzW1RdWydzdGF0ZSddID0ga2V5b2YgU3RhdGVDaHVua3NbVF1bJ3N0YXRlJ10+IHtcbiAgcHJpdmF0ZSBrZXlzID0gbmV3IFNldDxaPigpO1xuICBwcml2YXRlIHJLZXlzID0gbmV3IFNldDxaPigpO1xuICBwcml2YXRlIHNGbjogUGFyYW1ldGVyczxQYmxOZ3JpZFN0YXRlQ2h1bmtIYW5kbGVySG9zdDxULCBaPlsnc2VyaWFsaXplJ10+WzBdO1xuICBwcml2YXRlIGRGbjogUGFyYW1ldGVyczxQYmxOZ3JpZFN0YXRlQ2h1bmtIYW5kbGVySG9zdDxULCBaPlsnZGVzZXJpYWxpemUnXT5bMF07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaHVua0lkOiBUKSB7IH1cblxuICBoYW5kbGVLZXlzKC4uLmtleXM6IEFycmF5PFo+KTogdGhpcyB7XG4gICAgZm9yIChjb25zdCBrIG9mIGtleXMpIHsgdGhpcy5rZXlzLmFkZChrKSB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWlyZWQga2V5cyBhcmUga2V5cyB0aGF0IGNhbm5vdCBnZXQgZXhjbHVkZWQuXG4gICAqIEVpdGhlciBieSBhZGRpbmcgdGhlIHRvIHRoZSBgZXhjbHVkZWAgb3B0aW9uIG9yIGJ5IG9taXR0aW5nIHRoZW0gZnJvbSB0aGUgYGluY2x1ZGVgIG9wdGlvbi5cbiAgICovXG4gIHJlcXVpcmVkS2V5cyguLi5rZXlzOiBBcnJheTxaPik6IHRoaXMge1xuICAgIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG4gICAgICB0aGlzLmtleXMuYWRkKGspXG4gICAgICB0aGlzLnJLZXlzLmFkZChrKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXJpYWxpemUoZm46IChrZXk6IFosIGN0eDogUGJsTmdyaWRTdGF0ZUNodW5rQ29udGV4dDxUPikgPT4gU3RhdGVDaHVua3NbVF1bJ3N0YXRlJ11bWl0pOiB0aGlzIHtcbiAgICB0aGlzLnNGbiA9IGZuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZm46IChrZXk6IFosIHN0YXRlVmFsdWU6IFN0YXRlQ2h1bmtzW1RdWydzdGF0ZSddW1pdLCAgY3R4OiBQYmxOZ3JpZFN0YXRlQ2h1bmtDb250ZXh0PFQ+KSA9PiB2b2lkKTogdGhpcyB7XG4gICAgdGhpcy5kRm4gPSBmbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlZ2lzdGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmtleXMuc2l6ZSA9PT0gMCkge1xuICAgICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RhdGUgY2h1bmsgaGFuZGxlciwgbm8ga2V5cyBkZWZpbmVkLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc0ZuKSB7XG4gICAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdGF0ZSBjaHVuayBoYW5kbGVyLCBtaXNzaW5nIHNlcmlhbGl6ZSBoYW5kbGVyLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZEZuKSB7XG4gICAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdGF0ZSBjaHVuayBoYW5kbGVyLCBtaXNzaW5nIGRlc2VyaWFsaXplIGhhbmRsZXIuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGVWaXNvci5yZWdpc3RlckNodW5rSGFuZGxlckRlZmluaXRpb24oe1xuICAgICAgY2h1bmtJZDogdGhpcy5jaHVua0lkLFxuICAgICAga2V5czogQXJyYXkuZnJvbSh0aGlzLmtleXMudmFsdWVzKCkpLFxuICAgICAgcktleXM6IEFycmF5LmZyb20odGhpcy5yS2V5cy52YWx1ZXMoKSksXG4gICAgICBzZXJpYWxpemU6IHRoaXMuc0ZuLFxuICAgICAgZGVzZXJpYWxpemU6IHRoaXMuZEZuLFxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYmxOZ3JpZFN0YXRlQ2h1bmtIYW5kbGVyRGVmaW5pdGlvbjxUIGV4dGVuZHMga2V5b2YgU3RhdGVDaHVua3MsIFogZXh0ZW5kcyBrZXlvZiBTdGF0ZUNodW5rc1tUXVsnc3RhdGUnXSA9IGtleW9mIFN0YXRlQ2h1bmtzW1RdWydzdGF0ZSddPntcbiAgY2h1bmtJZDogVDtcbiAga2V5czogQXJyYXk8Wj47XG4gIHJLZXlzOiBBcnJheTxaPjtcbiAgc2VyaWFsaXplOiBQYXJhbWV0ZXJzPFBibE5ncmlkU3RhdGVDaHVua0hhbmRsZXJIb3N0PFQsIFo+WydzZXJpYWxpemUnXT5bMF07XG4gIGRlc2VyaWFsaXplOiBQYXJhbWV0ZXJzPFBibE5ncmlkU3RhdGVDaHVua0hhbmRsZXJIb3N0PFQsIFo+WydkZXNlcmlhbGl6ZSddPlswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRlQ2h1bmtIYW5kbGVyPFQgZXh0ZW5kcyBrZXlvZiBTdGF0ZUNodW5rcz4oc2VjdGlvbjogVCkge1xuICByZXR1cm4gbmV3IFBibE5ncmlkU3RhdGVDaHVua0hhbmRsZXJIb3N0KHNlY3Rpb24pO1xufVxuIl19
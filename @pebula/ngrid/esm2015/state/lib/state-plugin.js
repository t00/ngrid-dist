import { Subject } from 'rxjs';
import { map, mapTo, filter, take, skip, debounceTime } from 'rxjs/operators';
import { Directive, Injector, Input } from '@angular/core';
import { ON_INVALIDATE_HEADERS, ON_RESIZE_ROW, ON_DESTROY } from '@pebula/ngrid/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import { hasState, saveState, loadState } from './core/index';
import { userSessionPref } from './presets';
import * as i0 from "@angular/core";
import * as i1 from "@pebula/ngrid";
export const PLUGIN_KEY = 'state';
export class PblNgridStatePlugin {
    constructor(grid, injector, pluginCtrl) {
        this.grid = grid;
        this.injector = injector;
        this.pluginCtrl = pluginCtrl;
        this._events = new Subject();
        this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);
        this.afterLoadState = this._events.pipe(filter(e => e.phase === 'load' && e.position === 'after'), mapTo(undefined));
        this.afterSaveState = this._events.pipe(filter(e => e.phase === 'save' && e.position === 'after'), mapTo(undefined));
        this.onError = this._events.pipe(filter(e => !!e.error), map(e => ({ phase: e.phase, error: e.error })));
        pluginCtrl.events
            .pipe(ON_INVALIDATE_HEADERS, take(1))
            .subscribe(event => {
            const initialLoadOptions = Object.assign(Object.assign({}, (this.loadOptions || {})), { avoidRedraw: true });
            hasState(grid, initialLoadOptions)
                .then(value => {
                if (value) {
                    return this._load(initialLoadOptions);
                }
            })
                .then(() => {
                pluginCtrl.events
                    .pipe(ON_RESIZE_ROW, skip(1), debounceTime(500))
                    .subscribe(event => this.save());
            });
        });
        pluginCtrl.events
            .pipe(ON_DESTROY)
            .subscribe(event => {
            event.wait(this.save());
            this._events.complete();
        });
    }
    static create(table, injector) {
        const pluginCtrl = PblNgridPluginController.find(table);
        return new PblNgridStatePlugin(table, injector, pluginCtrl);
    }
    load() {
        return this._load(this.loadOptions);
    }
    save() {
        return saveState(this.grid, this.saveOptions)
            .then(() => this._events.next({ phase: 'save', position: 'after' }))
            .catch(error => this._events.next({ phase: 'save', position: 'after', error }));
    }
    destroy() {
        this._removePlugin(this.grid);
    }
    _load(loadOptions) {
        return loadState(this.grid, loadOptions)
            .then(() => this._events.next({ phase: 'load', position: 'after' }))
            .catch(error => this._events.next({ phase: 'load', position: 'after', error }));
    }
}
export class PblNgridStatePluginDirective extends PblNgridStatePlugin {
    constructor(grid, injector, pluginCtrl) {
        super(grid, injector, pluginCtrl);
        this.loadOptions = { include: userSessionPref() };
        this.saveOptions = { include: userSessionPref() };
    }
    ngOnDestroy() {
        this.destroy();
    }
}
/** @nocollapse */ PblNgridStatePluginDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridStatePluginDirective, deps: [{ token: i1.PblNgridComponent }, { token: i0.Injector }, { token: i1.PblNgridPluginController }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PblNgridStatePluginDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.0", type: PblNgridStatePluginDirective, selector: "pbl-ngrid[persistState]", inputs: { loadOptions: "loadOptions", saveOptions: "saveOptions" }, outputs: { afterLoadState: "afterLoadState", afterSaveState: "afterSaveState", onError: "onError" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridStatePluginDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'pbl-ngrid[persistState]',
                    outputs: ['afterLoadState', 'afterSaveState', 'onError'],
                }]
        }], ctorParameters: function () { return [{ type: i1.PblNgridComponent }, { type: i0.Injector }, { type: i1.PblNgridPluginController }]; }, propDecorators: { loadOptions: [{
                type: Input
            }], saveOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
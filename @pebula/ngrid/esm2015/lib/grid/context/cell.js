export class MetaCellContext {
    constructor() { }
    get $implicit() { return this; }
    // workaround, we need a parameter-less constructor since @ngtools/webpack@8.0.4
    // Non @Injectable classes are now getting addded with hard reference to the ctor params which at the class creation point are undefined
    // forwardRef() will not help since it's not inject by angular, we instantiate the class..
    // probably due to https://github.com/angular/angular-cli/commit/639198499973e0f437f059b3c933c72c733d93d8
    static create(col, grid) {
        const instance = new MetaCellContext();
        instance.col = col;
        instance.grid = grid;
        return instance;
    }
}
export class PblCellContext {
    constructor() {
        this._editing = false;
        this._focused = false;
        this._selected = false;
        this._external = {};
    }
    get $implicit() { return this; }
    get row() { return this.rowContext.$implicit; }
    ;
    get value() { return this.col.getValue(this.row); }
    set value(v) { this.col.setValue(this.row, v); }
    get rowContext() { return this._rowContext; }
    get editing() { return this._editing; }
    get focused() { return this._focused; }
    get selected() { return this._selected; }
    // workaround, we need a parameter-less constructor since @ngtools/webpack@8.0.4
    // Non @Injectable classes are now getting addded with hard reference to the ctor params which at the class creation point are undefined
    // forwardRef() will not help since it's not inject by angular, we instantiate the class..
    // probably due to https://github.com/angular/angular-cli/commit/639198499973e0f437f059b3c933c72c733d93d8
    static create(rowContext, col, extApi) {
        const instance = new PblCellContext();
        instance._rowContext = rowContext;
        instance.col = col;
        instance.extApi = extApi;
        Object.defineProperties(instance, {
            grid: { value: extApi.grid },
            index: { value: extApi.grid.columnApi.indexOf(col) },
        });
        return instance;
    }
    static defaultState() {
        return { editing: false, focused: false, selected: false, external: {} };
    }
    clone(col) {
        const ctx = PblCellContext.create(this._rowContext, col || this.col, this.extApi);
        ctx.fromState(this.getState(), this._rowContext, true);
        return ctx;
    }
    getExternal(key) {
        return this._external[key];
    }
    setExternal(key, value, saveState = false) {
        this._external[key] = value;
        if (saveState) {
            this._rowContext.saveState();
        }
    }
    getState() {
        return {
            editing: this._editing,
            focused: this._focused,
            selected: this._selected,
            external: this._external,
        };
    }
    fromState(state, rowContext, skipRowUpdate) {
        const requiresReset = !skipRowUpdate && this._editing === state.editing;
        this._rowContext = rowContext;
        this._editing = state.editing;
        this._focused = state.focused;
        this._selected = state.selected;
        this._external = state.external;
        if (requiresReset) {
            rowContext.updateCell(this);
        }
    }
    startEdit(markForCheck) {
        if (this.col.editorTpl && !this.editing) {
            this._editing = true;
            this._rowContext.updateCell(this);
            if (markForCheck) {
                this.grid.rowsApi.syncRows('data', true, this.rowContext.index);
            }
        }
    }
    stopEdit(markForCheck) {
        if (this.editing && !this.grid.viewport.isScrolling) {
            this._editing = false;
            this._rowContext.updateCell(this);
            if (markForCheck) {
                this.grid.rowsApi.syncRows('data', this.rowContext.index);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
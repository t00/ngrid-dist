import { PblCellContext } from './cell';
export class PblRowContext {
    constructor(_data, dsIndex, extApi) {
        this.extApi = extApi;
        this.external = {};
        this.dsIndex = dsIndex;
        this._$implicit = _data;
        this.identity = this.extApi.contextApi.getRowIdentity(dsIndex, _data);
        this.grid = extApi.grid;
        this._rebuildCells(this.extApi.grid.columnApi.columns);
    }
    /** Data for the row that this cell is located within. */
    get $implicit() { return this._$implicit; }
    set $implicit(value) {
        if (this._$implicit !== value) {
            this._$implicit = value;
            this.updateRowData();
        }
    }
    ;
    /** Index of the data object in the provided data array. */
    get dataIndex() { return this.index; }
    set dataIndex(value) { this.index = value; }
    /**
     * Returns the length of cells context stored in this row
     */
    get length() { var _a, _b; return (_b = (_a = this.cells) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }
    static defaultState(identity, dsIndex, cellsCount) {
        const cells = [];
        for (let i = 0; i < cellsCount; i++) {
            cells.push(PblCellContext.defaultState());
        }
        return { identity, dsIndex, cells, firstRender: true, external: {} };
    }
    getExternal(key) {
        return this.external[key];
    }
    setExternal(key, value, saveState = false) {
        this.external[key] = value;
        if (saveState) {
            this.saveState();
        }
    }
    getState() {
        return {
            identity: this.identity,
            dsIndex: this.dsIndex,
            firstRender: this.firstRender,
            cells: this.cells.map(c => c.getState()),
            external: this.external,
        };
    }
    fromState(state) {
        this.firstRender = state.firstRender;
        this.dsIndex = state.dsIndex;
        this.external = state.external;
        for (let i = 0, len = this.cells.length; i < len; i++) {
            this.cells[i].fromState(state.cells[i], this);
        }
    }
    saveState() {
        this.extApi.contextApi.saveState(this);
    }
    /**
     * Returns the cell context for the column at the specified position.
     * > The position is relative to ALL columns (NOT RENDERED COLUMNS)
     */
    cell(index) {
        const idx = typeof index === 'number' ? index : this.grid.columnApi.indexOf(index);
        return this.cells[idx];
    }
    getCells() {
        return (this.cells && this.cells.slice()) || [];
    }
    updateCell(cell) {
        this.cells[cell.index] = cell.clone();
    }
    attachRow(row) {
        this.detachRow(this._attachedRow);
        this._attachedRow = row;
        if (this._updatePending) {
            this.updateRowData();
        }
    }
    detachRow(row) {
        if (row && this._attachedRow === row) {
            this.saveState();
            this._attachedRow = undefined;
        }
    }
    _rebuildCells(columns) {
        const cells = this.cells = [];
        const len = columns.length;
        for (let columnIndex = 0; columnIndex < len; columnIndex++) {
            const cellContext = PblCellContext.create(this, columns[columnIndex], this.extApi);
            cells.push(cellContext);
        }
    }
    updateRowData() {
        if (this._attachedRow) {
            this._updatePending = false;
            this.extApi.contextApi._updateRowContext(this, this._attachedRow.rowIndex);
            this._attachedRow.updateRow();
        }
        else {
            this._updatePending = !!this._$implicit;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
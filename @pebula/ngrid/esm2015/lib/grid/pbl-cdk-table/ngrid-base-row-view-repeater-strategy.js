import { Inject, Injectable } from '@angular/core';
import { EXT_API_TOKEN } from '../../ext/grid-ext-api';
import { rowContextBridge } from '../row/row-to-repeater-bridge';
import * as i0 from "@angular/core";
export class PblNgridBaseRowViewRepeaterStrategy {
    constructor(extApi) {
        this.extApi = extApi;
        this.workaroundEnabled = false;
        this._cachedRenderDefMap = new Map();
        extApi
            .onConstructed(() => {
            const cdkTable = extApi.cdkTable;
            this.renderer = cdkTable;
            this.workaroundEnabled = !cdkTable['_cachedRenderDefMap'] && typeof this.renderer._renderCellTemplateForItem === 'function';
        });
    }
    applyChanges(changes, vcRef, itemContextFactory, itemValueResolver, itemViewChanged) {
        const createEmbeddedView = (record, adjustedPreviousIndex, currentIndex) => {
            const itemArgs = itemContextFactory(record, adjustedPreviousIndex, currentIndex);
            itemArgs.context = this.extApi.contextApi._createRowContext(itemArgs.context.$implicit, itemArgs.index);
            return rowContextBridge.bridgeContext(itemArgs, () => vcRef.createEmbeddedView(itemArgs.templateRef, itemArgs.context, itemArgs.index));
        };
        const baseState = { vcRef, createEmbeddedView, itemValueResolver };
        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
            const state = Object.create(baseState);
            state.record = record;
            if (record.previousIndex == null) {
                this.addItem(adjustedPreviousIndex, currentIndex, state);
                if (state.op === 1 /* INSERTED */) {
                }
            }
            else if (currentIndex == null) {
                this.removeItem(adjustedPreviousIndex, state);
            }
            else {
                this.moveItem(adjustedPreviousIndex, currentIndex, state);
            }
            if (this.workaroundEnabled) {
                this.patch20765afterOp(state);
            }
            this.afterOperation(state);
        });
        if (this.workaroundEnabled) {
            this.patch20765(changes, baseState);
        }
    }
    detach() { }
    addItem(adjustedPreviousIndex, currentIndex, state) { }
    removeItem(removeAt, state) { }
    moveItem(moveFrom, moveTo, state) { }
    afterOperation(state) { }
    // See https://github.com/angular/components/pull/20765
    patch20765(changes, baseState) {
        changes.forEachIdentityChange = (fn) => {
            changes.constructor.prototype.forEachIdentityChange.call(changes, (record) => {
                fn(record);
                if (this._cachedRenderDefMap.get(record.currentIndex) !== record.item.rowDef) {
                    baseState.vcRef.remove(record.currentIndex);
                    baseState.createEmbeddedView(record, null, record.currentIndex);
                    this._cachedRenderDefMap.set(record.currentIndex, record.item.rowDef);
                }
            });
        };
    }
    patch20765afterOp(state) {
        switch (state.op) {
            case 0 /* REPLACED */:
            case 1 /* INSERTED */:
            case 2 /* MOVED */:
                this._cachedRenderDefMap.set(state.record.currentIndex, state.record.item.rowDef);
                break;
            case 3 /* REMOVED */:
                this._cachedRenderDefMap.delete(state.record.previousIndex);
                break;
        }
    }
}
/** @nocollapse */ PblNgridBaseRowViewRepeaterStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridBaseRowViewRepeaterStrategy, deps: [{ token: EXT_API_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PblNgridBaseRowViewRepeaterStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridBaseRowViewRepeaterStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridBaseRowViewRepeaterStrategy, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [EXT_API_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
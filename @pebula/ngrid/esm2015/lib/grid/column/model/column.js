import { getValue, deepPathSet, } from '@pebula/ngrid/core';
import { initDefinitions, parseStyleWidth } from './utils';
import { PblColumnGroupStore } from './group-column';
const PBL_NGRID_COLUMN_MARK = Symbol('PblColumn');
const CLONE_PROPERTIES = ['pIndex', 'transform', 'filter', 'sort', 'alias', 'headerType', 'footerType', 'pin'];
export function isPblColumn(def) {
    return def instanceof PblColumn || (def && def[PBL_NGRID_COLUMN_MARK] === true);
}
export class PblColumn {
    constructor(def, groupStore) {
        /**
         * A place to store things...
         * This must be an object, values are shadow-copied so persist data between multiple plugins.
         */
        this.data = {};
        this.defaultWidth = '';
        /**
         * Groups that this column belongs to.
         * WARNING: DO NOT ADD/REMOVE GROUPS DIRECTLY, USE markInGroup/markNotInGroup.
         */
        this._groups = new Set();
        this[PBL_NGRID_COLUMN_MARK] = true;
        if (isPblColumn(def)) {
            initDefinitions(def, this);
            this.prop = def.prop;
            this.path = def.path;
            this.orgProp = def.orgProp;
            this.groupStore = groupStore || def.groupStore;
            this._groups = new Set(def._groups);
            for (const id of Array.from(def._groups.values())) {
                const g = this.groupStore.find(id);
                if (g) {
                    this.markInGroup(g);
                    g.replace(this);
                }
            }
        }
        else {
            const path = def.path || def.prop.split('.');
            const prop = def.path ? def.prop : path.pop();
            def = Object.create(def);
            def.id = def.id || def.prop || def.label;
            def.label = 'label' in def ? def.label : prop;
            if (typeof def.type === 'string') {
                def.type = { name: def.type };
            }
            if (typeof def.headerType === 'string') {
                def.headerType = { name: def.headerType };
            }
            if (typeof def.footerType === 'string') {
                def.footerType = { name: def.footerType };
            }
            initDefinitions(def, this);
            this.groupStore = groupStore || new PblColumnGroupStore();
            this.prop = prop;
            this.orgProp = def.prop;
            if (path.length) {
                this.path = path;
            }
        }
        for (const prop of CLONE_PROPERTIES) {
            if (prop in def) {
                this[prop] = def[prop];
            }
        }
    }
    /**
     * The width in px or % in the following format: ##% or ##px
     * Examples: '50%', '50px'
     */
    get width() { return this._width; }
    set width(value) {
        var _a;
        if (value !== this._width) {
            this._parsedWidth = parseStyleWidth(this._width = value);
            // Error in dev, on prod just let it be unset
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                if (!this._parsedWidth && value) {
                    throw new Error(`Invalid width "${value}" in column ${this.prop}. Valid values are ##% or ##px (50% / 50px)`);
                }
            }
            const isFixedWidth = ((_a = this._parsedWidth) === null || _a === void 0 ? void 0 : _a.type) === 'px';
            Object.defineProperty(this, 'isFixedWidth', { value: isFixedWidth, configurable: true });
        }
    }
    get parsedWidth() { return this._parsedWidth; }
    /**
     * The column def for this column.
     */
    get columnDef() { return this._columnDef; }
    get groups() { return Array.from(this._groups.values()); }
    static extendProperty(name) {
        if (CLONE_PROPERTIES.indexOf(name) === -1) {
            CLONE_PROPERTIES.push(name);
        }
    }
    attach(columnDef) {
        this.detach();
        this._columnDef = columnDef;
        if (this.defaultWidth) {
            this.columnDef.updateWidth(this.width || this.defaultWidth, 'attach');
        }
    }
    detach() {
        this._columnDef = undefined;
    }
    setDefaultWidth(defaultWidth) {
        this.defaultWidth = defaultWidth;
    }
    updateWidth(width) {
        if (width) {
            this.width = width;
        }
        const { columnDef } = this;
        if (columnDef) {
            columnDef.updateWidth(this.width || this.defaultWidth || '', 'update');
        }
    }
    /**
     * Get the value this column points to in the provided row
     */
    getValue(row) { return getValue(this, row); }
    /**
     * Set a value in the provided row where this column points to
     */
    setValue(row, value) { return deepPathSet(row, this, value); }
    /**
     * Mark's that this column belong to the provided group.
     * \> Note that this internal to the column and does not effect the group in any way.
     */
    markInGroup(g) {
        this.groupStore.attach(g, this);
        this._groups.add(g.id);
    }
    /**
     * Mark's that this column does not belong to the provided group.
     * \> Note that this internal to the column and does not effect the group in any way.
     */
    markNotInGroup(g) {
        this.groupStore.detach(g, this);
        return this._groups.delete(g.id);
    }
    isInGroup(g) {
        return this._groups.has(g.id);
    }
    getGroupOfRow(rowIndex) {
        const groupIds = this.groups;
        for (const id of groupIds) {
            const g = this.groupStore.find(id);
            if (g && g.rowIndex === rowIndex) {
                return g;
            }
        }
    }
    groupLogic(columnGroups, groupExists) {
        const [gPrev, gCurr, gNext] = columnGroups;
        // STATE: This column has same group of previous column, nothing to do.
        if (gCurr === gPrev) {
            return gCurr;
        }
        // STATE: The group exists in one of the columns BUT NOT in the LAST COLUMN (i.e: Its a slave split)
        if (groupExists) {
            // If the previous sibling group is a slave and this group is the origin of the slave, convert this group to the slave.
            if (gPrev && gCurr === gPrev.slaveOf) {
                return gPrev;
            }
            if (gNext && gCurr === gNext.slaveOf) {
                return gNext;
            }
            // Otherwise create the slave.
            const g = gCurr.createSlave([this]);
            this.groupStore.add(g);
            // If the current group is a placeholder and either the previous OR next sibling group is a placeholder as well
            // we want to group them together, although they are not related, because they both have identical headers (empty header).
            // Note that we still create the salve, we just don't use it.
            if (gCurr.placeholder) {
                const prevPH = gPrev && gPrev.placeholder;
                const nextPH = gNext && gNext.slaveOf && gNext.placeholder;
                const groupWithPlaceholder = prevPH ? gPrev : nextPH ? gNext : undefined;
                // const groupWithPlaceholder = prevPH && gPrev;
                if (groupWithPlaceholder) {
                    return groupWithPlaceholder;
                }
            }
            return g;
        }
        else if (gCurr === null || gCurr === void 0 ? void 0 : gCurr.slaveOf) {
            // STATE: The group IS a slave and it is set AFTER an item that belongs to the group it is slave of.
            if (gCurr.slaveOf === gPrev) {
                return gCurr.slaveOf;
            }
            if (gCurr.slaveOf === (gPrev === null || gPrev === void 0 ? void 0 : gPrev.slaveOf)) {
                return gPrev;
            }
            // STATE: The group IS a slave and it is set BEFORE an item that belongs to the group it is slave of.
            if (gCurr.slaveOf === gNext) {
                return gCurr.slaveOf;
            }
        }
        else {
            if ((gPrev === null || gPrev === void 0 ? void 0 : gPrev.placeholder) && (gCurr === null || gCurr === void 0 ? void 0 : gCurr.placeholder)) {
                return gPrev;
            }
        }
        return gCurr;
    }
    /**
     * Calculates if the column width is locked by a maximum by checking if the given width is equal to the max width.
     * If the result of the calculation (true/false) does not equal the previous lock state it will set the new lock state
     * and return true.
     * Otherwise return false.
     * @internal
     */
    checkMaxWidthLock(actualWidth) {
        if (actualWidth === this.maxWidth) {
            if (!this.maxWidthLock) {
                this.maxWidthLock = true;
                return true;
            }
        }
        else if (this.maxWidthLock) {
            this.maxWidthLock = false;
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,
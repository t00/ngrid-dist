import { PblMetaColumn } from './meta-column';
const PBL_NGRID_COLUMN_GROUP_MARK = Symbol('PblColumnGroup');
const CLONE_PROPERTIES = [];
export function isPblColumnGroup(def) {
    return def instanceof PblColumnGroup || (def && def[PBL_NGRID_COLUMN_GROUP_MARK] === true);
}
function getId(value) {
    return typeof value === 'string' ? value : value.id;
}
export class PblColumnGroupStore {
    constructor() {
        this.store = new Map();
        this._all = [];
    }
    get all() { return this._all; }
    /**
     * Attach a column to a group.
     */
    attach(group, column) {
        const g = this._find(group);
        if (g) {
            g.activeColumns.add(getId(column));
            return true;
        }
        return false;
    }
    /**
     * Detach a column from a group.
     */
    detach(group, column) {
        const g = this._find(group);
        if (g) {
            return g.activeColumns.delete(getId(column));
        }
        return false;
    }
    /**
     * Returns a list of `PblColumnGroup` that does not have columns attached.
     */
    findGhosts() {
        return Array.from(this.store.values())
            .filter(item => item.activeColumns.size === 0)
            .map(item => item.group);
    }
    add(group) {
        this.store.set(group.id, { group, activeColumns: new Set() });
        this.updateAll();
    }
    remove(group) {
        const g = this.find(group);
        if (g && this.store.delete(g.id)) {
            this.updateAll();
            return true;
        }
        return false;
    }
    find(group) {
        const g = this._find(group);
        if (g) {
            return g.group;
        }
    }
    clone() {
        const c = new PblColumnGroupStore();
        c.store = new Map(this.store);
        c.updateAll();
        return c;
    }
    _find(group) {
        return this.store.get(getId(group));
    }
    updateAll() {
        this._all = Array.from(this.store.values()).map(item => item.group);
    }
}
export class PblColumnGroup extends PblMetaColumn {
    constructor(def, columns, placeholder = false) {
        super(isPblColumnGroup(def)
            ? def
            : Object.assign({ id: `group-${def.columnIds.join('.')}-row-${def.rowIndex}`, kind: 'header' }, def));
        this.placeholder = placeholder;
        this[PBL_NGRID_COLUMN_GROUP_MARK] = true;
        this.columnIds = def.columnIds;
        this.columns = columns;
        for (const c of columns) {
            c.markInGroup(this);
        }
        for (const prop of CLONE_PROPERTIES) {
            if (prop in def) {
                this[prop] = def[prop];
            }
        }
    }
    //#endregion PblColumnGroupDefinition
    /**
     * Returns the visible state of the column.
     * The column is visible if AT LEAST ONE child column is visible (i.e. not hidden)
     */
    get isVisible() {
        return this.columns.some(c => !c.hidden);
    }
    static extendProperty(name) {
        if (CLONE_PROPERTIES.indexOf(name) === -1) {
            CLONE_PROPERTIES.push(name);
        }
    }
    createSlave(columns = []) {
        const slave = new PblColumnGroup(Object.assign(Object.assign({}, this), { id: this.id + '-slave' + Date.now() }), columns);
        slave.slaveOf = this;
        Object.defineProperty(slave, 'template', { get: function () { return this.slaveOf.template; }, set: function (value) { } });
        return slave;
    }
    replace(newColumn) {
        const { id } = newColumn;
        const idx = this.columns.findIndex(c => c.id === id);
        if (idx > -1) {
            this.columns.splice(idx, 1, newColumn);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,
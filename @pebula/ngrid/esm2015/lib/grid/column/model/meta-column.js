import { parseStyleWidth, initDefinitions } from './utils';
const PBL_NGRID_META_COLUMN_MARK = Symbol('PblMetaColumn');
const CLONE_PROPERTIES = ['kind', 'rowIndex'];
export function isPblMetaColumn(def) {
    return def instanceof PblMetaColumn || (def && def[PBL_NGRID_META_COLUMN_MARK] === true);
}
export class PblMetaColumn {
    constructor(def) {
        /**
         * A place to store things...
         * This must be an object, values are shadow-copied so persist data between multiple plugins.
         */
        this.data = {};
        this.defaultWidth = '';
        this[PBL_NGRID_META_COLUMN_MARK] = true;
        initDefinitions(def, this);
        for (const prop of CLONE_PROPERTIES) {
            if (prop in def) {
                this[prop] = def[prop];
            }
        }
        if (!isPblMetaColumn(def)) {
            if (typeof def.type === 'string') {
                this.type = { name: def.type };
            }
        }
    }
    /**
     * The width in px or % in the following format: ##% or ##px
     * Examples: '50%', '50px'
     */
    get width() { return this._width; }
    set width(value) {
        if (value !== this._width) {
            this._parsedWidth = parseStyleWidth(this._width = value);
            // Error in dev, on prod just let it be unset
            if (typeof ngDevMode === 'undefined' || ngDevMode) {
                if (!this._parsedWidth && value) {
                    throw new Error(`Invalid width "${value}" in column ${this.id}. Valid values are ##% or ##px (50% / 50px)`);
                }
            }
            const isFixedWidth = this._parsedWidth && this._parsedWidth.type === 'px';
            Object.defineProperty(this, 'isFixedWidth', { value: isFixedWidth, configurable: true });
        }
    }
    //#endregion PblMetaColumnDefinition
    get parsedWidth() { return this._parsedWidth; }
    /**
     * The column def for this column.
     */
    get columnDef() { return this._columnDef; }
    static extendProperty(name) {
        if (CLONE_PROPERTIES.indexOf(name) === -1) {
            CLONE_PROPERTIES.push(name);
        }
    }
    attach(columnDef) {
        this.detach();
        this._columnDef = columnDef;
        this.columnDef.updateWidth(this.width || this.defaultWidth, 'attach');
    }
    detach() {
        this._columnDef = undefined;
    }
    updateWidth(fallbackDefault) {
        this.defaultWidth = fallbackDefault || '';
        if (this.columnDef) {
            this.columnDef.updateWidth(this.width || fallbackDefault, 'update');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
import { deprecatedWarning } from '@pebula/ngrid/core';
import { PblMetaColumn } from './meta-column';
import { PblColumn } from './column';
import { PblColumnGroup, PblColumnGroupStore } from './group-column';
export class PblColumnFactory {
    constructor() {
        this._raw = { table: { cols: [] }, header: [], footer: [], headerGroup: [] };
        this._defaults = {
            table: {},
            header: {},
            footer: {},
        };
        this._currentHeaderRow = 0;
        this._currentFooterRow = 0;
    }
    get currentHeaderRow() { return this._currentHeaderRow; }
    get currentFooterRow() { return this._currentFooterRow; }
    static fromDefinitionSet(defs) {
        const f = new PblColumnFactory();
        Object.assign(f._raw, defs);
        return f;
    }
    build() {
        const { _defaults, _raw } = this;
        const groupStore = new PblColumnGroupStore();
        const table = {
            header: _raw.table.header,
            footer: _raw.table.footer,
            cols: _raw.table.cols.map(d => new PblColumn(Object.assign(Object.assign({}, _defaults.table), d), groupStore)),
        };
        const header = _raw.header.map(h => ({
            rowIndex: h.rowIndex,
            rowClassName: h.rowClassName,
            type: h.type || 'fixed',
            cols: h.cols.map(c => new PblMetaColumn(Object.assign(Object.assign({}, _defaults.header), c))),
        }));
        const footer = _raw.footer.map(f => ({
            rowIndex: f.rowIndex,
            rowClassName: f.rowClassName,
            type: f.type || 'fixed',
            cols: f.cols.map(c => new PblMetaColumn(Object.assign(Object.assign({}, _defaults.footer), c)))
        }));
        const headerGroup = _raw.headerGroup.map(hg => ({
            rowIndex: hg.rowIndex,
            rowClassName: hg.rowClassName,
            type: hg.type || 'fixed',
            cols: this.buildHeaderGroups(hg.rowIndex, hg.cols, table.cols).map(g => {
                groupStore.add(g);
                return g;
            }),
        }));
        return {
            groupStore,
            table,
            header,
            footer,
            headerGroup,
        };
    }
    default(def, type = 'table') {
        this._defaults[type] = def;
        return this;
    }
    table(...defs) {
        const rowOptions = defs[0].prop ? {} : defs.shift();
        const { header, footer } = rowOptions;
        Object.assign(this._raw.table, { header, footer });
        this._raw.table.cols.push(...defs);
        return this;
    }
    header(...defs) {
        const rowIndex = this._currentHeaderRow++;
        const rowOptions = this.processRowOptions(defs);
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const headers = defs.map((d) => {
            const def = {
                id: d.id,
                kind: 'header',
                rowIndex
            };
            return Object.assign(def, d);
        });
        this._raw.header.push({
            rowIndex,
            rowClassName,
            cols: headers,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    footer(...defs) {
        const rowIndex = this._currentFooterRow++;
        const rowOptions = this.processRowOptions(defs);
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const footers = defs.map((d) => {
            const def = {
                id: d.id,
                kind: 'footer',
                rowIndex
            };
            return Object.assign(def, d);
        });
        this._raw.footer.push({
            rowIndex,
            rowClassName,
            cols: footers,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    headerGroup(...defs) {
        const rowIndex = this._currentHeaderRow++;
        const rowOptions = this.processRowOptions(defs, 'columnIds', 'prop');
        const rowClassName = this.genRowClass(rowOptions, rowIndex);
        const headerGroups = defs.map(d => Object.assign({ rowIndex }, d));
        this._raw.headerGroup.push({
            rowIndex,
            rowClassName,
            cols: headerGroups,
            type: (rowOptions && rowOptions.type) || 'fixed',
        });
        return this;
    }
    processRowOptions(defs, ...mustHaveProperty) {
        if (mustHaveProperty.length === 0) {
            mustHaveProperty = ['id'];
        }
        for (const prop of mustHaveProperty) {
            if (prop in defs[0]) {
                return;
            }
        }
        return defs.shift();
    }
    genRowClass(rowOptions, fallbackRowIndex) {
        return (rowOptions && rowOptions.rowClassName) || `pbl-ngrid-row-index-${fallbackRowIndex.toString()}`;
    }
    buildHeaderGroups(rowIndex, headerGroupDefs, table) {
        var _a, _b;
        const headerGroup = [];
        // Building of header group rows requires some work.
        // The user defined groups might not cover all columns, creating gaps between group columns so we need to add placeholder groups to cover these gaps.
        // Moreover, the user might not specify a `prop`, which we might need to complete.
        // We do that for each header group row.
        //
        // The end goal is to return a list of `PblColumnGroup` that span over the entire columns of the grid.
        //
        // The logic is as follows:
        // For each column in the grid, find a matching column group - a group pointing at the column by having the same `prop`
        // If found, check it's span and skip X amount of columns where X is the span.
        // If a span is not defined then treat it as a greedy group that spans over all columns ahead until the next column that has a matching group column.
        //
        // If a column does not have a matching group column, search for group columns without a `prop` specified and when found set their `prop` to the current
        // column so we will now use them as if it's a user provided group for this column...
        //
        // If no group columns exists (or left), we create an ad-hoc group column and we will now use them as if it's a user provided group for this column...
        //
        const tableDefs = table.slice();
        const defs = headerGroupDefs.slice();
        for (const d of defs) {
            // TODO: remove in V5, when prop & span are deprecated
            // @deprecated Will be removed in v5
            if (d.prop) {
                if (typeof ngDevMode === 'undefined' || ngDevMode) {
                    deprecatedWarning('PblColumnGroupDefinition.prop', '4', 'PblColumnGroupDefinition.columnIds');
                    deprecatedWarning('PblColumnGroupDefinition.span', '4', 'PblColumnGroupDefinition.columnIds');
                }
                const start = tableDefs.findIndex(c => c.orgProp === d.prop);
                d.columnIds = tableDefs.slice(start, start + d.span + 1).map(c => c.id);
                delete d.prop;
                delete d.span;
            }
            d.rowIndex = rowIndex;
            const group = new PblColumnGroup(d, tableDefs.filter(c => d.columnIds.indexOf(c.orgProp) > -1), false);
            headerGroup.push(group);
        }
        let marker = 0;
        while (tableDefs.length) {
            const column = tableDefs.shift();
            const orgProp = column.orgProp;
            const existingGroupIndex = headerGroup.findIndex(hg => hg.columnIds.indexOf(orgProp) > -1);
            if (existingGroupIndex > -1) {
                const hg = headerGroup[existingGroupIndex];
                if (existingGroupIndex < marker) {
                    const columns = [column];
                    while (hg.columnIds.indexOf((_a = tableDefs[0]) === null || _a === void 0 ? void 0 : _a.orgProp) > -1) {
                        columns.push(tableDefs.shift());
                    }
                    headerGroup[marker] = hg.createSlave(columns);
                    marker += 1;
                }
                else {
                    while (hg.columnIds.indexOf((_b = tableDefs[0]) === null || _b === void 0 ? void 0 : _b.orgProp) > -1) {
                        tableDefs.shift();
                    }
                    marker += 1;
                }
            }
            else {
                const prev = headerGroup[marker - 1];
                if (prev === null || prev === void 0 ? void 0 : prev.placeholder) {
                    const clone = Object.keys(prev).reduce((p, c) => {
                        p[c] = prev[c];
                        return p;
                    }, {});
                    clone.columnIds = [...clone.columnIds, orgProp];
                    delete clone.id;
                    headerGroup[marker - 1] = new PblColumnGroup(clone, [...prev.columns, column], true);
                }
                else {
                    const d = { rowIndex, kind: 'header', columnIds: [orgProp] };
                    headerGroup.splice(marker, 0, new PblColumnGroup(d, [column], true));
                    marker += 1;
                }
            }
        }
        return headerGroup;
    }
}
export function columnFactory() {
    return new PblColumnFactory();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQvc3JjL2xpYi9ncmlkL2NvbHVtbi9tb2RlbC9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFPTCxpQkFBaUIsRUFDbEIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJFLE1BQU0sT0FBTyxnQkFBZ0I7SUFBN0I7UUFDVSxTQUFJLEdBQWdDLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDckcsY0FBUyxHQUFHO1lBQ2xCLEtBQUssRUFBRSxFQUFrQztZQUN6QyxNQUFNLEVBQUUsRUFBc0M7WUFDOUMsTUFBTSxFQUFFLEVBQXNDO1NBQy9DLENBQUM7UUFFTSxzQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDdEIsc0JBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBNlRoQyxDQUFDO0lBM1RDLElBQUksZ0JBQWdCLEtBQWEsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLElBQUksZ0JBQWdCLEtBQWEsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBRWpFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFpQztRQUN4RCxNQUFNLENBQUMsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElB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QWE7SUFDM0IsT0FBTyxJQUFJLGdCQUFnQixFQUFFLENBQUE7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFBibEJhc2VDb2x1bW5EZWZpbml0aW9uLFxuICBQYmxDb2x1bW5EZWZpbml0aW9uLFxuICBQYmxDb2x1bW5Hcm91cERlZmluaXRpb24sXG4gIFBibE1ldGFDb2x1bW5EZWZpbml0aW9uLFxuICBQYmxOZ3JpZENvbHVtbkRlZmluaXRpb25TZXQsXG4gIFBibE1ldGFSb3dEZWZpbml0aW9ucyxcbiAgZGVwcmVjYXRlZFdhcm5pbmdcbn0gZnJvbSAnQHBlYnVsYS9uZ3JpZC9jb3JlJztcbmltcG9ydCB7IFBibE5ncmlkQ29sdW1uU2V0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBQYmxNZXRhQ29sdW1uIH0gZnJvbSAnLi9tZXRhLWNvbHVtbic7XG5pbXBvcnQgeyBQYmxDb2x1bW4gfSBmcm9tICcuL2NvbHVtbic7XG5pbXBvcnQgeyBQYmxDb2x1bW5Hcm91cCwgUGJsQ29sdW1uR3JvdXBTdG9yZSB9IGZyb20gJy4vZ3JvdXAtY29sdW1uJztcblxuZXhwb3J0IHR5cGUgQ09MVU1OID0gUGJsTWV0YUNvbHVtbiB8IFBibENvbHVtbiB8IFBibENvbHVtbkdyb3VwO1xuXG5leHBvcnQgY2xhc3MgUGJsQ29sdW1uRmFjdG9yeSB7XG4gIHByaXZhdGUgX3JhdzogUGJsTmdyaWRDb2x1bW5EZWZpbml0aW9uU2V0ID0geyB0YWJsZTogeyBjb2xzOiBbXSB9LCBoZWFkZXI6IFtdLCBmb290ZXI6IFtdLCBoZWFkZXJHcm91cDogW10gfTtcbiAgcHJpdmF0ZSBfZGVmYXVsdHMgPSB7XG4gICAgdGFibGU6IHt9IGFzIFBhcnRpYWw8UGJsQ29sdW1uRGVmaW5pdGlvbj4sXG4gICAgaGVhZGVyOiB7fSBhcyBQYXJ0aWFsPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uPixcbiAgICBmb290ZXI6IHt9IGFzIFBhcnRpYWw8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24+LFxuICB9O1xuXG4gIHByaXZhdGUgX2N1cnJlbnRIZWFkZXJSb3cgPSAwO1xuICBwcml2YXRlIF9jdXJyZW50Rm9vdGVyUm93ID0gMDtcblxuICBnZXQgY3VycmVudEhlYWRlclJvdygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fY3VycmVudEhlYWRlclJvdzsgfVxuICBnZXQgY3VycmVudEZvb3RlclJvdygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fY3VycmVudEZvb3RlclJvdzsgfVxuXG4gIHN0YXRpYyBmcm9tRGVmaW5pdGlvblNldChkZWZzOiBQYmxOZ3JpZENvbHVtbkRlZmluaXRpb25TZXQpOiBQYmxDb2x1bW5GYWN0b3J5IHtcbiAgICBjb25zdCBmID0gbmV3IFBibENvbHVtbkZhY3RvcnkoKTtcbiAgICBPYmplY3QuYXNzaWduKGYuX3JhdywgZGVmcyk7XG4gICAgcmV0dXJuIGY7XG4gIH1cblxuICBidWlsZCgpOiBQYmxOZ3JpZENvbHVtblNldCB7XG4gICAgY29uc3QgeyBfZGVmYXVsdHMsIF9yYXcgfSA9IHRoaXM7XG5cbiAgICBjb25zdCBncm91cFN0b3JlID0gbmV3IFBibENvbHVtbkdyb3VwU3RvcmUoKTtcblxuICAgIGNvbnN0IHRhYmxlOiBQYmxOZ3JpZENvbHVtblNldFsndGFibGUnXSA9IHtcbiAgICAgIGhlYWRlcjogX3Jhdy50YWJsZS5oZWFkZXIsXG4gICAgICBmb290ZXI6IF9yYXcudGFibGUuZm9vdGVyLFxuICAgICAgY29sczogX3Jhdy50YWJsZS5jb2xzLm1hcCggZCA9PiBuZXcgUGJsQ29sdW1uKHsgLi4uX2RlZmF1bHRzLnRhYmxlLCAuLi5kIH0sIGdyb3VwU3RvcmUpKSxcbiAgICB9O1xuICAgIGNvbnN0IGhlYWRlciA9IF9yYXcuaGVhZGVyLm1hcCggaCA9PiAoe1xuICAgICAgcm93SW5kZXg6IGgucm93SW5kZXgsXG4gICAgICByb3dDbGFzc05hbWU6IGgucm93Q2xhc3NOYW1lLFxuICAgICAgdHlwZTogaC50eXBlIHx8ICdmaXhlZCcsXG4gICAgICBjb2xzOiBoLmNvbHMubWFwKCBjID0+IG5ldyBQYmxNZXRhQ29sdW1uKCB7IC4uLl9kZWZhdWx0cy5oZWFkZXIsIC4uLmMgfSApKSxcbiAgICB9KSk7XG4gICAgY29uc3QgZm9vdGVyID0gX3Jhdy5mb290ZXIubWFwKCBmID0+ICh7XG4gICAgICByb3dJbmRleDogZi5yb3dJbmRleCxcbiAgICAgIHJvd0NsYXNzTmFtZTogZi5yb3dDbGFzc05hbWUsXG4gICAgICB0eXBlOiBmLnR5cGUgfHwgJ2ZpeGVkJyxcbiAgICAgIGNvbHM6IGYuY29scy5tYXAoIGMgPT4gbmV3IFBibE1ldGFDb2x1bW4oeyAuLi5fZGVmYXVsdHMuZm9vdGVyLCAuLi5jIH0pIClcbiAgICB9KSk7XG4gICAgY29uc3QgaGVhZGVyR3JvdXAgPSBfcmF3LmhlYWRlckdyb3VwLm1hcCggaGcgPT4gKHtcbiAgICAgIHJvd0luZGV4OiBoZy5yb3dJbmRleCxcbiAgICAgIHJvd0NsYXNzTmFtZTogaGcucm93Q2xhc3NOYW1lLFxuICAgICAgdHlwZTogaGcudHlwZSB8fCAnZml4ZWQnLFxuICAgICAgY29sczogdGhpcy5idWlsZEhlYWRlckdyb3VwcyhoZy5yb3dJbmRleCwgaGcuY29scywgdGFibGUuY29scykubWFwKCBnID0+IHtcbiAgICAgICAgZ3JvdXBTdG9yZS5hZGQoZyk7XG4gICAgICAgIHJldHVybiBnO1xuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdyb3VwU3RvcmUsXG4gICAgICB0YWJsZSxcbiAgICAgIGhlYWRlcixcbiAgICAgIGZvb3RlcixcbiAgICAgIGhlYWRlckdyb3VwLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IGNvbHVtbiBkZWZpbml0aW9uIGZvciBoZWFkZXIvZm9vdGVyIGNvbHVtbnMuXG4gICAqL1xuICBkZWZhdWx0KGRlZjogUGFydGlhbDxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbj4sIHR5cGU6ICdoZWFkZXInIHwgJ2Zvb3RlcicpOiB0aGlzO1xuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IGNvbHVtbiBkZWZpbml0aW9uIGZvciB0YWJsZSBjb2x1bW5zLlxuICAgKi9cbiAgZGVmYXVsdChkZWY6IFBhcnRpYWw8UGJsQ29sdW1uRGVmaW5pdGlvbj4sIHR5cGU/OiAndGFibGUnKTogdGhpcztcbiAgZGVmYXVsdChkZWY6IFBhcnRpYWw8UGJsQ29sdW1uRGVmaW5pdGlvbj4gfCBQYXJ0aWFsPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uPiwgdHlwZTogJ3RhYmxlJyB8ICdoZWFkZXInIHwgJ2Zvb3RlcicgPSAndGFibGUnKTogdGhpcyB7XG4gICAgdGhpcy5fZGVmYXVsdHNbdHlwZV0gPSBkZWY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGdyaWQgY29sdW1ucy5cbiAgICpcbiAgICogVGFibGUgY29sdW1ucyBhcmUgbWFuZGF0b3J5LCB0aGV5IGFyZSB0aGUgY29sdW1ucyB0aGF0IGRlZmluZSB0aGUgc3RydWN0dXJlIG9mIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogRWFjaCBjb2x1bW4gd2lsbCB1c3VhbGx5IHBvaW50IHRvIHByb3BlcnR5IG9uIHRoZSByb3csIGFsdGhvdWdoIHlvdSBjYW4gY3JlYXRlIGNvbHVtbnMgdGhhdCBkb2VzIG5vdFxuICAgKiBleGlzdCBvbiB0aGUgcm93IGFuZCBoYW5kbGUgdGhlaXIgcmVuZGVyaW5nIHdpdGggYSBjZWxsIHRlbXBsYXRlLlxuICAgKlxuICAgKiBFYWNoIGdyaWQgY29sdW1uIGlzIGFsc28gYSBoZWFkZXIgY29sdW1uIGFuZCBhIGZvb3RlciBjb2x1bW4gdGhhdCBkaXNwbGF5LlxuICAgKiBUaGUgaGVhZGVyIGFuZCBmb290ZXIgYXJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCwgSWYgeW91IHdpc2ggbm90IHRvIHNob3cgdGhlbSBzZXQgaGVhZGVyUm93L2Zvb3RlclJvdyB0byBmYWxzZSBpbiBQYmxUYWJsZS5cbiAgICpcbiAgICovXG4gIHRhYmxlKHJvd09wdGlvbnM6IHsgaGVhZGVyPzogUGJsTWV0YVJvd0RlZmluaXRpb25zOyBmb290ZXI/OiBQYmxNZXRhUm93RGVmaW5pdGlvbnMgfSwgLi4uZGVmczogUGJsQ29sdW1uRGVmaW5pdGlvbltdKTogdGhpcztcbiAgdGFibGUoLi4uZGVmczogUGJsQ29sdW1uRGVmaW5pdGlvbltdKTogdGhpcztcbiAgdGFibGUoLi4uZGVmczogQXJyYXk8eyBoZWFkZXI/OiBQYmxNZXRhUm93RGVmaW5pdGlvbnM7IGZvb3Rlcj86IFBibE1ldGFSb3dEZWZpbml0aW9ucyB9IHwgUGJsQ29sdW1uRGVmaW5pdGlvbj4pOiB0aGlzIHtcbiAgICBjb25zdCByb3dPcHRpb25zOiB7IGhlYWRlcj86IFBibE1ldGFSb3dEZWZpbml0aW9uczsgZm9vdGVyPzogUGJsTWV0YVJvd0RlZmluaXRpb25zIH0gPSAoZGVmc1swXSBhcyBhbnkpLnByb3AgPyB7fSA6IGRlZnMuc2hpZnQoKSBhcyBhbnk7XG4gICAgY29uc3QgeyBoZWFkZXIsIGZvb3RlciB9ID0gcm93T3B0aW9ucztcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuX3Jhdy50YWJsZSwgeyBoZWFkZXIsIGZvb3RlciB9KTtcbiAgICB0aGlzLl9yYXcudGFibGUuY29scy5wdXNoKC4uLmRlZnMgYXMgUGJsQ29sdW1uRGVmaW5pdGlvbltdKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaGVhZGVyIHJvdyB3aXRoIGhlYWRlciBjb2x1bW5zLlxuICAgKiBDcmVhdGVzIGFuIGFkZGl0aW9uYWwgaGVhZGVyIHJvdyBpbiBwb3NpdGlvbiBgY3VycmVudEhlYWRlclJvd2AgdXNpbmcgdGhlIHByb3ZpZGVkIGhlYWRlciBjb2x1bW4gZGVmaW5pdGlvbnMuXG4gICAqIEVhY2ggZGVmaW5pdGlvbiByZXByZXNlbnQgYSBjZWxsLCB0aGUgY2VsbCdzIGRvZXMgbm90IGhhdmUgdG8gYWxpZ24gd2l0aCB0aGUgbGF5b3V0IG9mIGdyaWQgY29sdW1ucy5cbiAgICpcbiAgICogQWxsIGhlYWRlciByb3cgd2lsbCBwb3NpdGlvbiBCRUZPUkUgdGhlIGdyaWQgY29sdW1uIGhlYWRlciByb3cuXG4gICAqIEhlYWRlciBjb2x1bW5zIGFyZSBvcHRpb25hbC5cbiAgICogRWFjaCBjYWxsIHRvIGBoZWFkZXIoKWAgd2lsbCBjcmVhdGUgYSBuZXcgcm93LCBpbmNyZW1lbnRpbmcgdGhlIGBjdXJyZW50SGVhZGVyUm93YC5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogRXhhbXBsZTpcbiAgICogYGBganNcbiAgICogICBmYWN0b3J5LnRhYmxlKDEsIDIsIDMpXG4gICAqICAgICAuaGVhZGVyKGEsIGIsIGMpLmhlYWRlcihkLCBlLCBmKTtcbiAgICogYGBgXG4gICAqXG4gICAqIHdpbGwgcmVzdWx0IGluOlxuICAgKiAgIGhlYWRlcjEgLVxcPiAgYSBiIGNcbiAgICogICBoZWFkZXIyIC1cXD4gIGQgZSBmXG4gICAqICAgdGFibGUgICAtXFw+ICAxIDIgM1xuICAgKi9cbiAgaGVhZGVyKHJvd09wdGlvbnM6IFBibE1ldGFSb3dEZWZpbml0aW9ucywgLi4uZGVmczogQXJyYXk8UGljazxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbiwgJ2lkJz4gJiBQYXJ0aWFsPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uPiAmIFBibEJhc2VDb2x1bW5EZWZpbml0aW9uPik6IHRoaXM7XG4gIGhlYWRlciguLi5kZWZzOiBBcnJheTxQaWNrPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uLCAnaWQnPiAmIFBhcnRpYWw8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24+ICYgUGJsQmFzZUNvbHVtbkRlZmluaXRpb24+KTogdGhpcztcbiAgaGVhZGVyKC4uLmRlZnM6IEFycmF5PFBibE1ldGFSb3dEZWZpbml0aW9ucyB8IFBpY2s8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24sICdpZCc+ICYgUGFydGlhbDxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbj4gJiBQYmxCYXNlQ29sdW1uRGVmaW5pdGlvbj4pOiB0aGlzIHtcbiAgICBjb25zdCByb3dJbmRleCA9IHRoaXMuX2N1cnJlbnRIZWFkZXJSb3crKztcbiAgICBjb25zdCByb3dPcHRpb25zID0gdGhpcy5wcm9jZXNzUm93T3B0aW9ucyhkZWZzKTtcbiAgICBjb25zdCByb3dDbGFzc05hbWUgPSB0aGlzLmdlblJvd0NsYXNzKHJvd09wdGlvbnMsIHJvd0luZGV4KTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSBkZWZzLm1hcCggKGQ6IFBpY2s8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24sICdpZCc+ICYgUGFydGlhbDxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbj4gJiBQYmxCYXNlQ29sdW1uRGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3QgZGVmOiBQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgaWQ6IGQuaWQsXG4gICAgICAgIGtpbmQ6ICdoZWFkZXInLFxuICAgICAgICByb3dJbmRleFxuICAgICAgfTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlZiwgZCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yYXcuaGVhZGVyLnB1c2goe1xuICAgICAgcm93SW5kZXgsXG4gICAgICByb3dDbGFzc05hbWUsXG4gICAgICBjb2xzOiBoZWFkZXJzLFxuICAgICAgdHlwZTogKHJvd09wdGlvbnMgJiYgcm93T3B0aW9ucy50eXBlKSB8fCAnZml4ZWQnLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBmb290ZXIgcm93IHdpdGggZm9vdGVyIGNvbHVtbnMuXG4gICAqIENyZWF0ZXMgYW4gYWRkaXRpb25hbCBmb290ZXIgcm93IGluIHBvc2l0aW9uIGBjdXJyZW50Rm9vdGVyUm93YCB1c2luZyB0aGUgcHJvdmlkZWQgZm9vdGVyIGNvbHVtbiBkZWZpbml0aW9ucy5cbiAgICogRWFjaCBkZWZpbml0aW9uIHJlcHJlc2VudCBhIGNlbGwsIHRoZSBjZWxsJ3MgZG9lcyBub3QgaGF2ZSB0byBhbGlnbiB3aXRoIHRoZSBsYXlvdXQgb2YgZ3JpZCBjb2x1bW5zLlxuICAgKlxuICAgKiBBbGwgZm9vdGVyIHJvdyB3aWxsIHBvc2l0aW9uIEFGVEVSIHRoZSBncmlkIGNvbHVtbiBmb290ZXIgcm93LlxuICAgKiBGb290ZXIgY29sdW1ucyBhcmUgb3B0aW9uYWwuXG4gICAqIEVhY2ggY2FsbCB0byBgZm9vdGVyKClgIHdpbGwgY3JlYXRlIGEgbmV3IHJvdywgaW5jcmVtZW50aW5nIHRoZSBgY3VycmVudEZvb3RlclJvd2AuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEV4YW1wbGU6XG4gICAqIGBgYGpzXG4gICAqICAgZmFjdG9yeS50YWJsZSgxLCAyLCAzKVxuICAgKiAgICAgLmZvb3RlcihhLCBiLCBjKS5mb290ZXIoZCwgZSwgZik7XG4gICAqIGBgYFxuICAgKlxuICAgKiB3aWxsIHJlc3VsdCBpbjpcbiAgICogICB0YWJsZSAgIC1cXD4gIDEgMiAzXG4gICAqICAgZm9vdGVyMSAtXFw+ICBhIGIgY1xuICAgKiAgIGZvb3RlcjIgLVxcPiAgZCBlIGZcbiAgICovXG4gIGZvb3Rlcihyb3dPcHRpb25zOiBQYmxNZXRhUm93RGVmaW5pdGlvbnMsIC4uLmRlZnM6IEFycmF5PFBpY2s8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24sICdpZCc+ICYgUGFydGlhbDxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbj4gJiBQYmxCYXNlQ29sdW1uRGVmaW5pdGlvbj4pOiB0aGlzO1xuICBmb290ZXIoLi4uZGVmczogQXJyYXk8UGljazxQYmxNZXRhQ29sdW1uRGVmaW5pdGlvbiwgJ2lkJz4gJiBQYXJ0aWFsPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uPiAmIFBibEJhc2VDb2x1bW5EZWZpbml0aW9uPik6IHRoaXM7XG4gIGZvb3RlciguLi5kZWZzOiBBcnJheTxQYmxNZXRhUm93RGVmaW5pdGlvbnMgfCBQaWNrPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uLCAnaWQnPiAmIFBhcnRpYWw8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24+ICYgUGJsQmFzZUNvbHVtbkRlZmluaXRpb24+KTogdGhpcyB7XG4gICAgY29uc3Qgcm93SW5kZXggPSB0aGlzLl9jdXJyZW50Rm9vdGVyUm93Kys7XG4gICAgY29uc3Qgcm93T3B0aW9ucyA9IHRoaXMucHJvY2Vzc1Jvd09wdGlvbnMoZGVmcyk7XG4gICAgY29uc3Qgcm93Q2xhc3NOYW1lID0gdGhpcy5nZW5Sb3dDbGFzcyhyb3dPcHRpb25zLCByb3dJbmRleCk7XG5cbiAgICBjb25zdCBmb290ZXJzID0gZGVmcy5tYXAoIChkOiBQaWNrPFBibE1ldGFDb2x1bW5EZWZpbml0aW9uLCAnaWQnPiAmIFBhcnRpYWw8UGJsTWV0YUNvbHVtbkRlZmluaXRpb24+ICYgUGJsQmFzZUNvbHVtbkRlZmluaXRpb24pID0+IHtcbiAgICAgIGNvbnN0IGRlZjogUGJsTWV0YUNvbHVtbkRlZmluaXRpb24gPSB7XG4gICAgICAgIGlkOiBkLmlkLFxuICAgICAgICBraW5kOiAnZm9vdGVyJyxcbiAgICAgICAgcm93SW5kZXhcbiAgICAgIH07XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZWYsIGQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmF3LmZvb3Rlci5wdXNoKHtcbiAgICAgIHJvd0luZGV4LFxuICAgICAgcm93Q2xhc3NOYW1lLFxuICAgICAgY29sczogZm9vdGVycyxcbiAgICAgIHR5cGU6IChyb3dPcHRpb25zICYmIHJvd09wdGlvbnMudHlwZSkgfHwgJ2ZpeGVkJyxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaGVhZGVyIHJvdyB3aXRoIGhlYWRlciBncm91cCBjb2x1bW5zLlxuICAgKiBBIGhlYWRlciBncm91cCBjb2x1bW4gaXMgYSBjb2x1bW5zIGlzIGEgaGVhZGVyIGNvbHVtbnMgdGhhdCBzcGFucyBvbmUgb3IgbW9yZSBjb2x1bW5zLlxuICAgKlxuICAgKiBDcmVhdGUgYW4gYWRkaXRpb25hbCBoZWFkZXIgcm93IGluIHBvc2l0aW9uIGBjdXJyZW50SGVhZGVyUm93YCB1c2luZyB0aGUgcHJvdmlkZWQgaGVhZGVyIGNvbHVtbiBkZWZpbml0aW9ucy5cbiAgICogRWFjaCBkZWZpbml0aW9uIHJlcHJlc2VudCBhIGNlbGwsIHRoZSBjZWxsJ3MgZG9lcyBub3QgaGF2ZSB0byBhbGlnbiB3aXRoIHRoZSBsYXlvdXQgb2YgZ3JpZCBjb2x1bW5zLlxuICAgKlxuICAgKiBBbGwgaGVhZGVyIHJvdyB3aWxsIHBvc2l0aW9uIEJFRk9SRSB0aGUgZ3JpZCBjb2x1bW4gaGVhZGVyIHJvdy5cbiAgICogSGVhZGVyIGNvbHVtbnMgYXJlIG9wdGlvbmFsLlxuICAgKiBFYWNoIGNhbGwgdG8gYGhlYWRlcigpYCB3aWxsIGNyZWF0ZSBhIG5ldyByb3csIGluY3JlbWVudGluZyB0aGUgYGN1cnJlbnRIZWFkZXJSb3dgLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBFeGFtcGxlOlxuICAgKiBgYGBqc1xuICAgKiAgIGZhY3RvcnkudGFibGUoMSwgMiwgMylcbiAgICogICAgIC5oZWFkZXIoYSwgYiwgYykuaGVhZGVyKGQsIGUsIGYpO1xuICAgKiBgYGBcbiAgICpcbiAgICogd2lsbCByZXN1bHQgaW46XG4gICAqICAgaGVhZGVyMSAtXFw+ICBhIGIgY1xuICAgKiAgIGhlYWRlcjIgLVxcPiAgZCBlIGZcbiAgICogICB0YWJsZSAgIC1cXD4gIDEgMiAzXG4gICAqL1xuICBoZWFkZXJHcm91cChyb3dPcHRpb25zOiBQYmxNZXRhUm93RGVmaW5pdGlvbnMsIC4uLmRlZnM6IEFycmF5PFBhcnRpYWw8T21pdDxQYmxDb2x1bW5Hcm91cERlZmluaXRpb24sICdyb3dJbmRleCcgfCAna2luZCc+Pj4pOiB0aGlzO1xuICBoZWFkZXJHcm91cCguLi5kZWZzOiBBcnJheTxQYXJ0aWFsPE9taXQ8UGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uLCAncm93SW5kZXgnIHwgJ2tpbmQnPj4+KTogdGhpcztcbiAgaGVhZGVyR3JvdXAoLi4uZGVmczogQXJyYXk8UGJsTWV0YVJvd0RlZmluaXRpb25zIHwgKCBQYXJ0aWFsPE9taXQ8UGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uLCAncm93SW5kZXgnIHwgJ2tpbmQnPj4gKSA+KTogdGhpcyB7XG4gICAgY29uc3Qgcm93SW5kZXggPSB0aGlzLl9jdXJyZW50SGVhZGVyUm93Kys7XG4gICAgY29uc3Qgcm93T3B0aW9ucyA9IHRoaXMucHJvY2Vzc1Jvd09wdGlvbnMoZGVmcywgJ2NvbHVtbklkcycsICdwcm9wJyk7XG4gICAgY29uc3Qgcm93Q2xhc3NOYW1lID0gdGhpcy5nZW5Sb3dDbGFzcyhyb3dPcHRpb25zLCByb3dJbmRleCk7XG5cbiAgICBjb25zdCBoZWFkZXJHcm91cHM6IGFueSA9IGRlZnMubWFwKCBkID0+IE9iamVjdC5hc3NpZ24oeyByb3dJbmRleCB9LCBkKSApO1xuXG4gICAgdGhpcy5fcmF3LmhlYWRlckdyb3VwLnB1c2goe1xuICAgICAgcm93SW5kZXgsXG4gICAgICByb3dDbGFzc05hbWUsXG4gICAgICBjb2xzOiBoZWFkZXJHcm91cHMsXG4gICAgICB0eXBlOiAocm93T3B0aW9ucyAmJiByb3dPcHRpb25zLnR5cGUpIHx8ICdmaXhlZCcsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2Vzc1Jvd09wdGlvbnMoZGVmczogYW55W10sIC4uLm11c3RIYXZlUHJvcGVydHk6IHN0cmluZ1tdKTogUGJsTWV0YVJvd0RlZmluaXRpb25zIHtcbiAgICBpZiAobXVzdEhhdmVQcm9wZXJ0eS5sZW5ndGggPT09IDApIHtcbiAgICAgIG11c3RIYXZlUHJvcGVydHkgPSBbJ2lkJ107XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBtdXN0SGF2ZVByb3BlcnR5KSB7XG4gICAgICBpZiAocHJvcCBpbiBkZWZzWzBdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZnMuc2hpZnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuUm93Q2xhc3Mocm93T3B0aW9uczogeyByb3dDbGFzc05hbWU/OiBzdHJpbmcgfSwgZmFsbGJhY2tSb3dJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHJvd09wdGlvbnMgJiYgcm93T3B0aW9ucy5yb3dDbGFzc05hbWUpIHx8IGBwYmwtbmdyaWQtcm93LWluZGV4LSR7ZmFsbGJhY2tSb3dJbmRleC50b1N0cmluZygpfWA7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkSGVhZGVyR3JvdXBzKHJvd0luZGV4OiBudW1iZXIsIGhlYWRlckdyb3VwRGVmczogUGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uW10sIHRhYmxlOiBQYmxDb2x1bW5bXSk6IFBibENvbHVtbkdyb3VwW10ge1xuICAgIGNvbnN0IGhlYWRlckdyb3VwOiBQYmxDb2x1bW5Hcm91cFtdID0gW107XG5cbiAgICAvLyBCdWlsZGluZyBvZiBoZWFkZXIgZ3JvdXAgcm93cyByZXF1aXJlcyBzb21lIHdvcmsuXG4gICAgLy8gVGhlIHVzZXIgZGVmaW5lZCBncm91cHMgbWlnaHQgbm90IGNvdmVyIGFsbCBjb2x1bW5zLCBjcmVhdGluZyBnYXBzIGJldHdlZW4gZ3JvdXAgY29sdW1ucyBzbyB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlciBncm91cHMgdG8gY292ZXIgdGhlc2UgZ2Fwcy5cbiAgICAvLyBNb3Jlb3ZlciwgdGhlIHVzZXIgbWlnaHQgbm90IHNwZWNpZnkgYSBgcHJvcGAsIHdoaWNoIHdlIG1pZ2h0IG5lZWQgdG8gY29tcGxldGUuXG4gICAgLy8gV2UgZG8gdGhhdCBmb3IgZWFjaCBoZWFkZXIgZ3JvdXAgcm93LlxuICAgIC8vXG4gICAgLy8gVGhlIGVuZCBnb2FsIGlzIHRvIHJldHVybiBhIGxpc3Qgb2YgYFBibENvbHVtbkdyb3VwYCB0aGF0IHNwYW4gb3ZlciB0aGUgZW50aXJlIGNvbHVtbnMgb2YgdGhlIGdyaWQuXG4gICAgLy9cbiAgICAvLyBUaGUgbG9naWMgaXMgYXMgZm9sbG93czpcbiAgICAvLyBGb3IgZWFjaCBjb2x1bW4gaW4gdGhlIGdyaWQsIGZpbmQgYSBtYXRjaGluZyBjb2x1bW4gZ3JvdXAgLSBhIGdyb3VwIHBvaW50aW5nIGF0IHRoZSBjb2x1bW4gYnkgaGF2aW5nIHRoZSBzYW1lIGBwcm9wYFxuICAgIC8vIElmIGZvdW5kLCBjaGVjayBpdCdzIHNwYW4gYW5kIHNraXAgWCBhbW91bnQgb2YgY29sdW1ucyB3aGVyZSBYIGlzIHRoZSBzcGFuLlxuICAgIC8vIElmIGEgc3BhbiBpcyBub3QgZGVmaW5lZCB0aGVuIHRyZWF0IGl0IGFzIGEgZ3JlZWR5IGdyb3VwIHRoYXQgc3BhbnMgb3ZlciBhbGwgY29sdW1ucyBhaGVhZCB1bnRpbCB0aGUgbmV4dCBjb2x1bW4gdGhhdCBoYXMgYSBtYXRjaGluZyBncm91cCBjb2x1bW4uXG4gICAgLy9cbiAgICAvLyBJZiBhIGNvbHVtbiBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcgZ3JvdXAgY29sdW1uLCBzZWFyY2ggZm9yIGdyb3VwIGNvbHVtbnMgd2l0aG91dCBhIGBwcm9wYCBzcGVjaWZpZWQgYW5kIHdoZW4gZm91bmQgc2V0IHRoZWlyIGBwcm9wYCB0byB0aGUgY3VycmVudFxuICAgIC8vIGNvbHVtbiBzbyB3ZSB3aWxsIG5vdyB1c2UgdGhlbSBhcyBpZiBpdCdzIGEgdXNlciBwcm92aWRlZCBncm91cCBmb3IgdGhpcyBjb2x1bW4uLi5cbiAgICAvL1xuICAgIC8vIElmIG5vIGdyb3VwIGNvbHVtbnMgZXhpc3RzIChvciBsZWZ0KSwgd2UgY3JlYXRlIGFuIGFkLWhvYyBncm91cCBjb2x1bW4gYW5kIHdlIHdpbGwgbm93IHVzZSB0aGVtIGFzIGlmIGl0J3MgYSB1c2VyIHByb3ZpZGVkIGdyb3VwIGZvciB0aGlzIGNvbHVtbi4uLlxuICAgIC8vXG4gICAgY29uc3QgdGFibGVEZWZzID0gdGFibGUuc2xpY2UoKTtcbiAgICBjb25zdCBkZWZzID0gaGVhZGVyR3JvdXBEZWZzLnNsaWNlKCk7XG5cbiAgICBmb3IgKGNvbnN0IGQgb2YgZGVmcykge1xuICAgICAgLy8gVE9ETzogcmVtb3ZlIGluIFY1LCB3aGVuIHByb3AgJiBzcGFuIGFyZSBkZXByZWNhdGVkXG4gICAgICAvLyBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjVcbiAgICAgIGlmIChkLnByb3ApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkge1xuICAgICAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nKCdQYmxDb2x1bW5Hcm91cERlZmluaXRpb24ucHJvcCcsICc0JywgJ1BibENvbHVtbkdyb3VwRGVmaW5pdGlvbi5jb2x1bW5JZHMnKTtcbiAgICAgICAgICBkZXByZWNhdGVkV2FybmluZygnUGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uLnNwYW4nLCAnNCcsICdQYmxDb2x1bW5Hcm91cERlZmluaXRpb24uY29sdW1uSWRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0YWJsZURlZnMuZmluZEluZGV4KCBjID0+IGMub3JnUHJvcCA9PT0gZC5wcm9wICk7XG4gICAgICAgIGQuY29sdW1uSWRzID0gdGFibGVEZWZzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGQuc3BhbiArIDEpLm1hcCggYyA9PiBjLmlkICk7XG4gICAgICAgIGRlbGV0ZSBkLnByb3A7XG4gICAgICAgIGRlbGV0ZSBkLnNwYW47XG4gICAgICB9XG4gICAgICBkLnJvd0luZGV4ID0gcm93SW5kZXg7XG4gICAgICBjb25zdCBncm91cCA9IG5ldyBQYmxDb2x1bW5Hcm91cChkLCB0YWJsZURlZnMuZmlsdGVyKCBjID0+IGQuY29sdW1uSWRzLmluZGV4T2YoYy5vcmdQcm9wKSA+IC0xICksIGZhbHNlKTtcbiAgICAgIGhlYWRlckdyb3VwLnB1c2goZ3JvdXApO1xuICAgIH1cblxuICAgIGxldCBtYXJrZXIgPSAwO1xuICAgIHdoaWxlICh0YWJsZURlZnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjb2x1bW4gPSB0YWJsZURlZnMuc2hpZnQoKTtcbiAgICAgIGNvbnN0IG9yZ1Byb3AgPSBjb2x1bW4ub3JnUHJvcDtcbiAgICAgIGNvbnN0IGV4aXN0aW5nR3JvdXBJbmRleCA9IGhlYWRlckdyb3VwLmZpbmRJbmRleCggaGcgPT4gaGcuY29sdW1uSWRzLmluZGV4T2Yob3JnUHJvcCkgPiAtMSApO1xuICAgICAgaWYgKGV4aXN0aW5nR3JvdXBJbmRleCA+IC0xKSB7XG4gICAgICAgIGNvbnN0IGhnID0gaGVhZGVyR3JvdXBbZXhpc3RpbmdHcm91cEluZGV4XTtcbiAgICAgICAgaWYgKGV4aXN0aW5nR3JvdXBJbmRleCA8IG1hcmtlcikge1xuICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSBbY29sdW1uXTtcbiAgICAgICAgICB3aGlsZSAoaGcuY29sdW1uSWRzLmluZGV4T2YodGFibGVEZWZzWzBdPy5vcmdQcm9wKSA+IC0xKSB7XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2godGFibGVEZWZzLnNoaWZ0KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoZWFkZXJHcm91cFttYXJrZXJdID0gaGcuY3JlYXRlU2xhdmUoY29sdW1ucyk7XG4gICAgICAgICAgbWFya2VyICs9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2hpbGUgKGhnLmNvbHVtbklkcy5pbmRleE9mKHRhYmxlRGVmc1swXT8ub3JnUHJvcCkgPiAtMSkge1xuICAgICAgICAgICAgdGFibGVEZWZzLnNoaWZ0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcmtlciArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcmV2ID0gaGVhZGVyR3JvdXBbbWFya2VyIC0gMV07XG4gICAgICAgIGlmIChwcmV2Py5wbGFjZWhvbGRlcikge1xuICAgICAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmtleXMocHJldikucmVkdWNlKCAocCwgYykgPT4ge1xuICAgICAgICAgICAgcFtjXSA9IHByZXZbY107XG4gICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICB9LCB7fSBhcyBQYmxDb2x1bW5Hcm91cERlZmluaXRpb24pO1xuICAgICAgICAgIGNsb25lLmNvbHVtbklkcyA9IFsuLi5jbG9uZS5jb2x1bW5JZHMsIG9yZ1Byb3BdO1xuICAgICAgICAgIGRlbGV0ZSBjbG9uZS5pZDtcbiAgICAgICAgICBoZWFkZXJHcm91cFttYXJrZXIgLSAxXSA9IG5ldyBQYmxDb2x1bW5Hcm91cChjbG9uZSwgWy4uLnByZXYuY29sdW1ucywgY29sdW1uXSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZDogUGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uID0geyByb3dJbmRleCwga2luZDogJ2hlYWRlcicsIGNvbHVtbklkczogW29yZ1Byb3BdfTtcbiAgICAgICAgICBoZWFkZXJHcm91cC5zcGxpY2UobWFya2VyLCAwLCBuZXcgUGJsQ29sdW1uR3JvdXAoZCwgW2NvbHVtbl0sIHRydWUpKVxuICAgICAgICAgIG1hcmtlciArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJHcm91cDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sdW1uRmFjdG9yeSgpOiBQYmxDb2x1bW5GYWN0b3J5IHtcbiAgcmV0dXJuIG5ldyBQYmxDb2x1bW5GYWN0b3J5KClcbn1cbiJdfQ==
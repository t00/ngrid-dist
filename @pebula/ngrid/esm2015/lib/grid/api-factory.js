import { of, Subject, EMPTY } from 'rxjs';
import { ChangeDetectorRef, ElementRef, Injector, IterableDiffers, ViewContainerRef } from '@angular/core';
import { ON_DESTROY, ON_CONSTRUCTED } from '@pebula/ngrid/core';
import { PblNgridPluginContext } from '../ext/plugin-control';
import { ColumnApi, PblColumnStore } from './column/management';
import { PblNgridColumnWidthCalc } from './column/width-logic/column-width-calc';
import { PblRowsApi } from './row/rows-api';
import { PblNgridCellFactoryResolver } from './row/cell-factory.service';
import { ContextApi } from './context/api';
import { bindGridToDataSource } from './bind-grid-to-datasource';
import { logicap } from './logicap/index';
export function createApis(grid, tokens) {
    return new InternalExtensionApi(grid, tokens);
}
class InternalExtensionApi {
    constructor(grid, tokens) {
        this.grid = grid;
        this.propChanged = this._propChanged = new Subject();
        this.config = tokens.config;
        this.registry = tokens.registry;
        this.element = tokens.elRef.nativeElement;
        if (tokens.dir) {
            this.dir = tokens.dir;
        }
        const { plugin, init } = this.createPlugin(tokens);
        this._create = init;
        this.plugin = plugin;
        this.events = plugin.events;
        this.columnStore = new PblColumnStore(this, tokens.injector.get(IterableDiffers));
        this.widthCalc = new PblNgridColumnWidthCalc(this);
        const cellFactory = tokens.injector.get(PblNgridCellFactoryResolver);
        this.rowsApi = new PblRowsApi(this, tokens.ngZone, cellFactory);
        this.columnApi = ColumnApi.create(this);
        this._contextApi = new ContextApi(this);
        this.logicaps = logicap(this);
        bindGridToDataSource(this);
        this.events.pipe(ON_DESTROY).subscribe(e => this._propChanged.complete());
        this.widthCalc
            .onWidthCalc
            .subscribe(rowWidth => {
            this._cdkTable.minWidth = rowWidth.minimumRowWidth;
            tokens.ngZone.run(() => {
                this.rowsApi.syncRows('header');
                this.plugin.emitEvent({ source: 'grid', kind: 'onResizeRow' });
            });
        });
    }
    get cdkTable() { return this._cdkTable; }
    get contextApi() { return this._contextApi || (this._contextApi = new ContextApi(this)); }
    get viewport() { return this._viewPort; }
    get pluginCtrl() { return this.plugin.controller; }
    getDirection() {
        var _a, _b;
        return (_b = (_a = this.dir) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 'ltr';
    }
    directionChange() {
        var _a, _b;
        return (_b = (_a = this.dir) === null || _a === void 0 ? void 0 : _a.change.asObservable()) !== null && _b !== void 0 ? _b : EMPTY;
    }
    onConstructed(fn) {
        if (!this._create) {
            of(false);
        }
        else {
            this.events.pipe(ON_CONSTRUCTED).subscribe(fn);
        }
    }
    onInit(fn) {
        this.plugin.controller.onInit().subscribe(fn);
    }
    setCdkTable(cdkTable) {
        this._cdkTable = cdkTable;
        const globalCreateEvent = this._create;
        delete this._create;
        this.plugin.emitEvent({ source: 'grid', kind: 'onConstructed' });
        globalCreateEvent();
    }
    setViewport(viewport) {
        this._viewPort = viewport;
    }
    notifyPropChanged(source, key, prev, curr) {
        if (prev !== curr) {
            this._propChanged.next({ source, key, prev, curr });
        }
    }
    createPlugin(tokens) {
        // Create an injector for the extensions/plugins
        // This injector allow plugins (that choose so) to provide a factory function for runtime use.
        // I.E: as if they we're created by angular via template...
        // This allows seamless plugin-to-plugin dependencies without requiring specific template syntax.
        // And also allows auto plugin binding (app wide) without the need for template syntax.
        const pluginInjector = Injector.create({
            providers: [
                { provide: ViewContainerRef, useValue: tokens.vcRef },
                { provide: ElementRef, useValue: tokens.elRef },
                { provide: ChangeDetectorRef, useValue: tokens.cdRef },
            ],
            parent: tokens.injector,
        });
        return PblNgridPluginContext.create(pluginInjector, this);
    }
}
//# sourceMappingURL=data:application/json;base64,
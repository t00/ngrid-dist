export class SizeGroup {
    constructor(groupIndex, maxItems) {
        this.groupIndex = groupIndex;
        this.maxItems = maxItems;
        this.rawTotal = 0;
        this.length = 0;
        this.items = [];
        this.dsStart = groupIndex * maxItems;
        this.dsEnd = this.dsStart + maxItems - 1;
    }
    set(dsIndex, height) {
        const index = dsIndex - this.dsStart;
        const prev = this.items[index];
        this.items[index] = height;
        this.rawTotal += height - (prev || 0);
        if (!prev && height) {
            this.length += 1;
        }
    }
    remove(dsIndex) {
        const index = dsIndex - this.dsStart;
        const prev = this.items[index];
        if (prev) {
            this.rawTotal -= prev;
            this.items[index] = undefined;
            this.length -= 1;
            return true;
        }
        return false;
    }
    has(dsIndex) {
        const index = dsIndex - this.dsStart;
        return !!this.items[index];
    }
    clear() {
        this.rawTotal = this.length = 0;
        this.items = [];
    }
    getItemSize(dsIndex) {
        const index = dsIndex - this.dsStart;
        return this.items[index];
    }
    getSizeBefore(dsIndex, itemSize) {
        const index = dsIndex - this.dsStart;
        let total = index * itemSize;
        for (let i = 0; i < index; i++) {
            const size = this.items[i];
            if (size) {
                total += size - itemSize;
            }
        }
        return total;
    }
    getSize(itemSize) {
        return (itemSize * (this.maxItems - this.length)) + this.rawTotal;
    }
    getSubSize(dsIndexStart, dsIndexEnd, itemSize) {
        const indexStart = Math.max(dsIndexStart, this.dsStart) - this.dsStart;
        const indexEnd = this.maxItems - (this.dsEnd - Math.min(dsIndexEnd, this.dsEnd)) - 1;
        let total = 0;
        for (let i = indexStart; i <= indexEnd; i++) {
            total += this.items[i] || itemSize;
        }
        return total;
    }
    getSizeAfter(dsIndex, itemSize) {
        const index = this.dsEnd - dsIndex;
        let total = index * itemSize;
        for (let i = (this.maxItems - index); i < this.maxItems; i++) {
            const size = this.items[i];
            if (size) {
                total += size - itemSize;
            }
        }
        return total;
    }
    getRawDiffSize(itemSize) {
        return this.rawTotal - itemSize - this.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQvc3JjL2xpYi9ncmlkL2ZlYXR1cmVzL3ZpcnR1YWwtc2Nyb2xsL3N0cmF0ZWdpZXMvZHluYW1pYy1zaXplL3NpemUtZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFNBQVM7SUFPcEIsWUFBNEIsVUFBa0IsRUFBbUIsUUFBZ0I7UUFBckQsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUFtQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBSmpGLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsVUFBSyxHQUFhLEVBQUUsQ0FBQztRQUduQixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUFlLEVBQUUsTUFBYztRQUNqQyxNQUFNLEtBQUssR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ25CLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFlO1FBQ3BCLE1BQU0sS0FBSyxHQUFHLE9BQU8sR0FBRyxJ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R0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsS0FBSyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUM7YUFDMUI7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFnQjtRQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDaEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFNpemVHcm91cCB7XG4gIHJlYWRvbmx5IGRzU3RhcnQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgZHNFbmQ6IG51bWJlcjtcbiAgcmF3VG90YWwgPSAwO1xuICBsZW5ndGggPSAwO1xuICBpdGVtczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZ3JvdXBJbmRleDogbnVtYmVyLCBwcml2YXRlIHJlYWRvbmx5IG1heEl0ZW1zOiBudW1iZXIpIHtcbiAgICB0aGlzLmRzU3RhcnQgPSBncm91cEluZGV4ICogbWF4SXRlbXM7XG4gICAgdGhpcy5kc0VuZCA9IHRoaXMuZHNTdGFydCArIG1heEl0ZW1zIC0gMTtcbiAgfVxuXG4gIHNldChkc0luZGV4OiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXggPSBkc0luZGV4IC0gdGhpcy5kc1N0YXJ0O1xuICAgIGNvbnN0IHByZXYgPSB0aGlzLml0ZW1zW2luZGV4XTtcbiAgICB0aGlzLml0ZW1zW2luZGV4XSA9IGhlaWdodDtcbiAgICB0aGlzLnJhd1RvdGFsICs9IGhlaWdodCAtIChwcmV2IHx8IDApO1xuICAgIGlmICghcHJldiAmJiBoZWlnaHQpIHtcbiAgICAgIHRoaXMubGVuZ3RoICs9IDE7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlKGRzSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGluZGV4ID0gZHNJbmRleCAtIHRoaXMuZHNTdGFydDtcbiAgICBjb25zdCBwcmV2ID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgaWYgKHByZXYpIHtcbiAgICAgIHRoaXMucmF3VG90YWwgLT0gcHJldjtcbiAgICAgIHRoaXMuaXRlbXNbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYXMoZHNJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaW5kZXggPSBkc0luZGV4IC0gdGhpcy5kc1N0YXJ0O1xuICAgIHJldHVybiAhIXRoaXMuaXRlbXNbaW5kZXhdO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5yYXdUb3RhbCA9IHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLml0ZW1zID0gW107XG4gIH1cblxuICBnZXRJdGVtU2l6ZShkc0luZGV4OiBudW1iZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IGRzSW5kZXggLSB0aGlzLmRzU3RhcnQ7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNbaW5kZXhdO1xuICB9XG5cbiAgZ2V0U2l6ZUJlZm9yZShkc0luZGV4OiBudW1iZXIsIGl0ZW1TaXplOiBudW1iZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IGRzSW5kZXggLSB0aGlzLmRzU3RhcnQ7XG5cbiAgICBsZXQgdG90YWwgPSBpbmRleCAqIGl0ZW1TaXplO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuaXRlbXNbaV07XG4gICAgICBpZiAoc2l6ZSkge1xuICAgICAgICB0b3RhbCArPSBzaXplIC0gaXRlbVNpemU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvdGFsO1xuICB9XG5cbiAgZ2V0U2l6ZShpdGVtU2l6ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChpdGVtU2l6ZSAqICh0aGlzLm1heEl0ZW1zIC0gdGhpcy5sZW5ndGgpKSArIHRoaXMucmF3VG90YWw7XG4gIH1cblxuICBnZXRTdWJTaXplKGRzSW5kZXhTdGFydDogbnVtYmVyLCBkc0luZGV4RW5kOiBudW1iZXIsIGl0ZW1TaXplOiBudW1iZXIpIHtcbiAgICBjb25zdCBpbmRleFN0YXJ0ID0gTWF0aC5tYXgoZHNJbmRleFN0YXJ0LCB0aGlzLmRzU3RhcnQpIC0gdGhpcy5kc1N0YXJ0O1xuICAgIGNvbnN0IGluZGV4RW5kID0gdGhpcy5tYXhJdGVtcyAtICh0aGlzLmRzRW5kIC0gTWF0aC5taW4oZHNJbmRleEVuZCwgdGhpcy5kc0VuZCkpIC0gMTtcbiAgICBsZXQgdG90YWwgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IGluZGV4U3RhcnQ7IGkgPD0gaW5kZXhFbmQ7IGkrKykge1xuICAgICAgdG90YWwgKz0gdGhpcy5pdGVtc1tpXSB8fCBpdGVtU2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICBnZXRTaXplQWZ0ZXIoZHNJbmRleDogbnVtYmVyLCBpdGVtU2l6ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmRzRW5kIC0gZHNJbmRleDtcblxuICAgIGxldCB0b3RhbCA9IGluZGV4ICogaXRlbVNpemU7XG4gICAgZm9yIChsZXQgaSA9ICh0aGlzLm1heEl0ZW1zIC0gaW5kZXgpOyBpIDwgdGhpcy5tYXhJdGVtczsgaSsrKSB7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5pdGVtc1tpXTtcbiAgICAgIGlmIChzaXplKSB7XG4gICAgICAgIHRvdGFsICs9IHNpemUgLSBpdGVtU2l6ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICBnZXRSYXdEaWZmU2l6ZShpdGVtU2l6ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMucmF3VG90YWwgLSBpdGVtU2l6ZSAtIHRoaXMubGVuZ3RoO1xuICB9XG59XG4iXX0=
import { coerceNumberProperty } from '@angular/cdk/coercion';
export class PblNgridBaseVirtualScrollDirective {
    constructor(grid, type) {
        this.grid = grid;
        this.type = type;
        this._maxBufferPx = 200;
        this._minBufferPx = 100;
    }
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     *
     * Default: 100
     */
    get minBufferPx() { return this._minBufferPx; }
    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     *
     * Default: 200
     */
    get maxBufferPx() { return this._maxBufferPx; }
    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }
    get wheelMode() { return this._wheelMode; }
    set wheelMode(value) {
        switch (value) {
            case 'passive':
            case 'blocking':
                this._wheelMode = value;
                break;
            default:
                const wheelMode = coerceNumberProperty(value);
                if (wheelMode && wheelMode >= 1 && wheelMode <= 60) {
                    this._wheelMode = wheelMode;
                }
                break;
        }
    }
    get scrolledIndexChange() { return this._scrollStrategy.scrolledIndexChange; }
    set scrolledIndexChange(value) { this._scrollStrategy.scrolledIndexChange = value; }
    attachExtApi(extApi) { this._scrollStrategy.attachExtApi(extApi); }
    attach(viewport) { this._scrollStrategy.attach(viewport); }
    detach() { this._scrollStrategy.detach(); }
    onContentScrolled() { this._scrollStrategy.onContentScrolled(); }
    onDataLengthChanged() { this._scrollStrategy.onDataLengthChanged(); }
    onContentRendered() { this._scrollStrategy.onContentRendered(); }
    onRenderedOffsetChanged() { this._scrollStrategy.onRenderedOffsetChanged(); }
    scrollToIndex(index, behavior) { this._scrollStrategy.scrollToIndex(index, behavior); }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12LXNjcm9sbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3NyYy9saWIvZ3JpZC9mZWF0dXJlcy92aXJ0dWFsLXNjcm9sbC9zdHJhdGVnaWVzL2Jhc2Utdi1zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBZSxNQUFNLHVCQUF1QixDQUFDO0FBTTFFLE1BQU0sT0FBZ0Isa0NBQWtDO0lBdUN0RCxZQUFzQixJQUF3QixFQUFrQixJQUFPO1FBQWpELFNBQUksR0FBSixJQUFJLENBQW9CO1FBQWtCLFNBQUksR0FBSixJQUFJLENBQUc7UUFIN0QsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFDbkIsaUJBQVksR0FBRyxHQUFHLENBQUM7SUFFOEMsQ0FBQztJQXJDNUU7Ozs7O09BS0c7SUFDSCxJQUFJLFdBQVcsS0FBa0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLFdBQVcsQ0FBQyxLQUFrQixJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhGOzs7O09BSUc7SUFDSCxJQUFJLFdBQVcsS0FBa0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLFdBQVcsQ0FBQyxLQUFrQixJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhGLElBQUksU0FBUyxLQUFzQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzVFLElBQUksU0FBUyxDQUFDLEtBQXNDO1FBQ2xELFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxTQUFTLENBQUM7WUFDZixLQUFLLFVBQVU7Z0JBQ2QsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7Z0JBQ3hCLE1BQU07WUFDUDtnQkFDRSxNQUFNLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLENBQUMsSUFBSSxTQUFTLElBQUksRUFBRSxFQUFFO29CQUNsRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztpQkFDN0I7Z0JBQ0QsTUFBTTtTQUNUO0lBQ0gsQ0FBQztJQVdELElBQUksbUJBQW1CLEtBQXlCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDbEcsSUFBSSxtQkFBbUIsQ0FBQyxLQUF5QixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4RyxZQUFZLENBQUMsTUFBNEIsSUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsTUFBTSxDQUFDLFFBQThDLElBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLE1BQU0sS0FBVyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRCxpQkFBaUIsS0FBVyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLG1CQUFtQixLQUFXLElBQUksQ0FBQyxlQUFlLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0UsaUJBQWlCLEtBQVcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSx1QkFBdUIsS0FBVyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25GLGFBQWEsQ0FBQyxLQUFhLEVBQUUsUUFBd0IsSUFBVSxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHksIE51bWJlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IF9QYmxOZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL3Rva2Vucyc7XG5pbXBvcnQgeyBQYmxOZ3JpZEV4dGVuc2lvbkFwaSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dC9ncmlkLWV4dC1hcGknO1xuaW1wb3J0IHsgUGJsQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0Q29tcG9uZW50IH0gZnJvbSAnLi4vdmlydHVhbC1zY3JvbGwtdmlld3BvcnQuY29tcG9uZW50JztcbmltcG9ydCB7IFBibE5ncmlkVmlydHVhbFNjcm9sbFN0cmF0ZWd5LCBQYmxOZ3JpZFZpcnR1YWxTY3JvbGxTdHJhdGVneU1hcCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGJsTmdyaWRCYXNlVmlydHVhbFNjcm9sbERpcmVjdGl2ZTxUIGV4dGVuZHMga2V5b2YgUGJsTmdyaWRWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3lNYXAgPSBrZXlvZiBQYmxOZ3JpZFZpcnR1YWxTY3JvbGxTdHJhdGVneU1hcD4gaW1wbGVtZW50cyBQYmxOZ3JpZFZpcnR1YWxTY3JvbGxTdHJhdGVneTxUPiB7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIGFtb3VudCBvZiBidWZmZXIgcmVuZGVyZWQgYmV5b25kIHRoZSB2aWV3cG9ydCAoaW4gcGl4ZWxzKS5cbiAgICogSWYgdGhlIGFtb3VudCBvZiBidWZmZXIgZGlwcyBiZWxvdyB0aGlzIG51bWJlciwgbW9yZSBpdGVtcyB3aWxsIGJlIHJlbmRlcmVkLiBEZWZhdWx0cyB0byAxMDBweC5cbiAgICpcbiAgICogRGVmYXVsdDogMTAwXG4gICAqL1xuICBnZXQgbWluQnVmZmVyUHgoKTogTnVtYmVySW5wdXQgeyByZXR1cm4gdGhpcy5fbWluQnVmZmVyUHg7IH1cbiAgc2V0IG1pbkJ1ZmZlclB4KHZhbHVlOiBOdW1iZXJJbnB1dCkgeyB0aGlzLl9taW5CdWZmZXJQeCA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbHVlKTsgfVxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHBpeGVscyB3b3J0aCBvZiBidWZmZXIgdG8gcmVuZGVyIGZvciB3aGVuIHJlbmRlcmluZyBuZXcgaXRlbXMuIERlZmF1bHRzIHRvIDIwMHB4LlxuICAgKlxuICAgKiBEZWZhdWx0OiAyMDBcbiAgICovXG4gIGdldCBtYXhCdWZmZXJQeCgpOiBOdW1iZXJJbnB1dCB7IHJldHVybiB0aGlzLl9tYXhCdWZmZXJQeDsgfVxuICBzZXQgbWF4QnVmZmVyUHgodmFsdWU6IE51bWJlcklucHV0KSB7IHRoaXMuX21heEJ1ZmZlclB4ID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUpOyB9XG5cbiAgZ2V0IHdoZWVsTW9kZSgpOiAncGFzc2l2ZScgfCAnYmxvY2tpbmcnIHwgbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3doZWVsTW9kZTsgfVxuICBzZXQgd2hlZWxNb2RlKHZhbHVlOiAncGFzc2l2ZScgfCAnYmxvY2tpbmcnIHwgbnVtYmVyKSB7XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgY2FzZSAncGFzc2l2ZSc6XG4gICAgICBjYXNlICdibG9ja2luZyc6XG4gICAgICAgdGhpcy5fd2hlZWxNb2RlID0gdmFsdWU7XG4gICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zdCB3aGVlbE1vZGUgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIGlmICh3aGVlbE1vZGUgJiYgd2hlZWxNb2RlID49IDEgJiYgd2hlZWxNb2RlIDw9IDYwKSB7XG4gICAgICAgICAgdGhpcy5fd2hlZWxNb2RlID0gd2hlZWxNb2RlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfd2hlZWxNb2RlOiAncGFzc2l2ZScgfCAnYmxvY2tpbmcnIHwgbnVtYmVyO1xuICBwcm90ZWN0ZWQgX21heEJ1ZmZlclB4ID0gMjAwO1xuICBwcm90ZWN0ZWQgX21pbkJ1ZmZlclB4ID0gMTAwO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBncmlkOiBfUGJsTmdyaWRDb21wb25lbnQsIHB1YmxpYyByZWFkb25seSB0eXBlOiBUKSB7IH1cblxuICAvKiogVGhlIHNjcm9sbCBzdHJhdGVneSB1c2VkIGJ5IHRoaXMgZGlyZWN0aXZlLiAqL1xuICBfc2Nyb2xsU3RyYXRlZ3k6IFBibE5ncmlkVmlydHVhbFNjcm9sbFN0cmF0ZWd5TWFwW1RdO1xuXG4gIGdldCBzY3JvbGxlZEluZGV4Q2hhbmdlKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7IHJldHVybiB0aGlzLl9zY3JvbGxTdHJhdGVneS5zY3JvbGxlZEluZGV4Q2hhbmdlOyB9XG4gIHNldCBzY3JvbGxlZEluZGV4Q2hhbmdlKHZhbHVlOiBPYnNlcnZhYmxlPG51bWJlcj4pIHsgdGhpcy5fc2Nyb2xsU3RyYXRlZ3kuc2Nyb2xsZWRJbmRleENoYW5nZSA9IHZhbHVlOyB9XG4gIGF0dGFjaEV4dEFwaShleHRBcGk6IFBibE5ncmlkRXh0ZW5zaW9uQXBpKTogdm9pZCB7IHRoaXMuX3Njcm9sbFN0cmF0ZWd5LmF0dGFjaEV4dEFwaShleHRBcGkpOyB9XG4gIGF0dGFjaCh2aWV3cG9ydDogUGJsQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0Q29tcG9uZW50KTogdm9pZCB7IHRoaXMuX3Njcm9sbFN0cmF0ZWd5LmF0dGFjaCh2aWV3cG9ydCk7IH1cbiAgZGV0YWNoKCk6IHZvaWQgeyB0aGlzLl9zY3JvbGxTdHJhdGVneS5kZXRhY2goKTsgfVxuICBvbkNvbnRlbnRTY3JvbGxlZCgpOiB2b2lkIHsgdGhpcy5fc2Nyb2xsU3RyYXRlZ3kub25Db250ZW50U2Nyb2xsZWQoKTsgfVxuICBvbkRhdGFMZW5ndGhDaGFuZ2VkKCk6IHZvaWQgeyB0aGlzLl9zY3JvbGxTdHJhdGVneS5vbkRhdGFMZW5ndGhDaGFuZ2VkKCk7IH1cbiAgb25Db250ZW50UmVuZGVyZWQoKTogdm9pZCB7IHRoaXMuX3Njcm9sbFN0cmF0ZWd5Lm9uQ29udGVudFJlbmRlcmVkKCk7IH1cbiAgb25SZW5kZXJlZE9mZnNldENoYW5nZWQoKTogdm9pZCB7IHRoaXMuX3Njcm9sbFN0cmF0ZWd5Lm9uUmVuZGVyZWRPZmZzZXRDaGFuZ2VkKCk7IH1cbiAgc2Nyb2xsVG9JbmRleChpbmRleDogbnVtYmVyLCBiZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IpOiB2b2lkIHsgdGhpcy5fc2Nyb2xsU3RyYXRlZ3kuc2Nyb2xsVG9JbmRleChpbmRleCwgYmVoYXZpb3IpOyB9XG59XG4iXX0=
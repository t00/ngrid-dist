import { isPblColumn } from '../../column/model';
export function findCellDefById(cellDefs, colDef, searchParent) {
    for (const cellDef of cellDefs) {
        if (cellDef.type) {
            if (colDef.type && cellDef.type === colDef.type.name) {
                return cellDef;
            }
        }
        else {
            const id = cellDef.name;
            if (id === colDef.id) {
                return cellDef;
            }
        }
    }
}
export function findCellDef(registry, colDef, kind, searchParent) {
    const cellDefs = registry.getMulti(kind);
    if (cellDefs) {
        let type;
        if (isPblColumn(colDef)) {
            switch (kind) {
                case 'headerCell':
                    if (colDef.headerType) {
                        type = { id: colDef.id, type: colDef.headerType };
                    }
                    break;
                case 'footerCell':
                    if (colDef.footerType) {
                        type = { id: colDef.id, type: colDef.footerType };
                    }
                    break;
            }
        }
        if (!type) {
            type = colDef;
        }
        const match = findCellDefById(cellDefs, type);
        if (match) {
            return match;
        }
    }
    if (searchParent && registry.parent) {
        return findCellDef(registry.parent, colDef, kind, searchParent);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3NyYy9saWIvZ3JpZC9jZWxsL2NlbGwtZGVmL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBb0MsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFNbkYsTUFBTSxVQUFVLGVBQWUsQ0FBeUMsUUFBa0IsRUFBRSxNQUEwQyxFQUFFLFlBQXNCO0lBQzVKLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1FBQzlCLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNoQixJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDcEQsT0FBTyxPQUFPLENBQUM7YUFDaEI7U0FDRjthQUFNO1lBQ0wsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN4QixJQUFJLEVBQUUsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUNwQixPQUFPLE9BQU8sQ0FBQzthQUNoQjtTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBS0QsTUFBTSxVQUFVLFdBQVcsQ0FBVSxRQUFpQyxFQUFFLE1BQWMsRUFBRSxJQUE4RCxFQUFFLFlBQXNCO0lBQzVLLE1BQU0sUUFBUSxHQUFtQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpFLElBQUksUUFBUSxFQUFFO1FBQ1osSUFBSSxJQUF3QyxDQUFDO1FBQzdDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLFFBQVEsSUFBSSxFQUFFO2dCQUNaLEtBQUssWUFBWTtvQkFDZixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7d0JBQ3JCLElBQUksR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7cUJBQ25EO29CQUNELE1BQU07Z0JBQ1IsS0FBSyxZQUFZO29CQUNmLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRTt3QkFDckIsSUFBSSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztxQkFDbkQ7b0JBQ0QsTUFBTTthQUNUO1NBQ0Y7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLE1BQU0sQ0FBQztTQUNmO1FBQ0QsTUFBTSxLQUFLLEdBQVEsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELElBQUksWUFBWSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDbkMsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFhLEVBQUUsSUFBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQy9FO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVnaXN0cnkvcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBQYmxDb2x1bW4sIFBibE1ldGFDb2x1bW4sIENPTFVNTiwgaXNQYmxDb2x1bW4gfSBmcm9tICcuLi8uLi9jb2x1bW4vbW9kZWwnO1xuaW1wb3J0IHsgUGJsTmdyaWRIZWFkZXJDZWxsRGVmRGlyZWN0aXZlIH0gZnJvbSAnLi9oZWFkZXItY2VsbC1kZWYuZGlyZWN0aXZlJztcbmltcG9ydCB7IFBibE5ncmlkQ2VsbERlZkRpcmVjdGl2ZSB9IGZyb20gJy4vY2VsbC1kZWYuZGlyZWN0aXZlJztcbmltcG9ydCB7IFBibE5ncmlkRm9vdGVyQ2VsbERlZkRpcmVjdGl2ZSB9IGZyb20gJy4vZm9vdGVyLWNlbGwtZGVmLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmVCYXNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2VsbERlZkJ5SWQ8VCBleHRlbmRzIFBibE5ncmlkQ2VsbERlZkRpcmVjdGl2ZUJhc2U+KGNlbGxEZWZzOiBBcnJheTxUPiwgY29sRGVmOiBQaWNrPFBibE1ldGFDb2x1bW4sICdpZCcgfCAndHlwZSc+LCBzZWFyY2hQYXJlbnQ/OiBib29sZWFuKTogVCB7XG4gIGZvciAoY29uc3QgY2VsbERlZiBvZiBjZWxsRGVmcykge1xuICAgIGlmIChjZWxsRGVmLnR5cGUpIHtcbiAgICAgIGlmIChjb2xEZWYudHlwZSAmJiBjZWxsRGVmLnR5cGUgPT09IGNvbERlZi50eXBlLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGNlbGxEZWY7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlkID0gY2VsbERlZi5uYW1lO1xuICAgICAgaWYgKGlkID09PSBjb2xEZWYuaWQpIHtcbiAgICAgICAgcmV0dXJuIGNlbGxEZWY7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2VsbERlZjxUID0gYW55PihyZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2UsIGNvbERlZjogUGJsQ29sdW1uLCBraW5kOiAndGFibGVDZWxsJyB8ICdlZGl0b3JDZWxsJywgIHNlYXJjaFBhcmVudD86IGJvb2xlYW4pOiBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmU8VD47XG5leHBvcnQgZnVuY3Rpb24gZmluZENlbGxEZWY8VCA9IGFueT4ocmVnaXN0cnk6IFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlLCBjb2xEZWY6IFBibE1ldGFDb2x1bW4gfCBQYmxDb2x1bW4sIGtpbmQ6ICdoZWFkZXJDZWxsJywgc2VhcmNoUGFyZW50PzogYm9vbGVhbik6IFBibE5ncmlkSGVhZGVyQ2VsbERlZkRpcmVjdGl2ZTxUPjtcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2VsbERlZjxUID0gYW55PihyZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2UsIGNvbERlZjogUGJsTWV0YUNvbHVtbiB8IFBibENvbHVtbiwga2luZDogJ2Zvb3RlckNlbGwnLCBzZWFyY2hQYXJlbnQ/OiBib29sZWFuKTogUGJsTmdyaWRGb290ZXJDZWxsRGVmRGlyZWN0aXZlPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDZWxsRGVmPFQgPSBhbnk+KHJlZ2lzdHJ5OiBQYmxOZ3JpZFJlZ2lzdHJ5U2VydmljZSwgY29sRGVmOiBDT0xVTU4sIGtpbmQ6ICdoZWFkZXJDZWxsJyB8ICdmb290ZXJDZWxsJyB8ICd0YWJsZUNlbGwnIHwgJ2VkaXRvckNlbGwnLCBzZWFyY2hQYXJlbnQ/OiBib29sZWFuKTogUGJsTmdyaWRDZWxsRGVmRGlyZWN0aXZlPFQ+IHwgUGJsTmdyaWRIZWFkZXJDZWxsRGVmRGlyZWN0aXZlPFQ+IHwgUGJsTmdyaWRGb290ZXJDZWxsRGVmRGlyZWN0aXZlIDxUPiB7XG4gIGNvbnN0IGNlbGxEZWZzOiBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmVCYXNlW10gPSByZWdpc3RyeS5nZXRNdWx0aShraW5kKTtcblxuICBpZiAoY2VsbERlZnMpIHtcbiAgICBsZXQgdHlwZTogUGljazxQYmxNZXRhQ29sdW1uLCAnaWQnIHwgJ3R5cGUnPjtcbiAgICBpZiAoaXNQYmxDb2x1bW4oY29sRGVmKSkge1xuICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgJ2hlYWRlckNlbGwnOlxuICAgICAgICAgIGlmIChjb2xEZWYuaGVhZGVyVHlwZSkge1xuICAgICAgICAgICAgdHlwZSA9IHsgaWQ6IGNvbERlZi5pZCwgdHlwZTogY29sRGVmLmhlYWRlclR5cGUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Zvb3RlckNlbGwnOlxuICAgICAgICAgIGlmIChjb2xEZWYuZm9vdGVyVHlwZSkge1xuICAgICAgICAgICAgdHlwZSA9IHsgaWQ6IGNvbERlZi5pZCwgdHlwZTogY29sRGVmLmZvb3RlclR5cGUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHlwZSkge1xuICAgICAgdHlwZSA9IGNvbERlZjtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2g6IGFueSA9IGZpbmRDZWxsRGVmQnlJZChjZWxsRGVmcywgdHlwZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNlYXJjaFBhcmVudCAmJiByZWdpc3RyeS5wYXJlbnQpIHtcbiAgICByZXR1cm4gZmluZENlbGxEZWYocmVnaXN0cnkucGFyZW50LCBjb2xEZWYgYXMgYW55LCBraW5kIGFzIGFueSwgc2VhcmNoUGFyZW50KTtcbiAgfVxufVxuXG4iXX0=
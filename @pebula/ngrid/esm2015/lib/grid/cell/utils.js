import { uniqueColumnCss, uniqueColumnTypeCss } from '../utils/unique-column-css';
export function initCellElement(el, column, prev) {
    if (prev) {
        // If IE 11 is dropped before we switch to setting a single class name, change to multi param
        // with destructuring.
        const classList = el.classList;
        for (const className of prev.columnDef._columnCssClassName) {
            classList.add(className);
        }
        el.classList.remove(uniqueColumnCss(prev.columnDef));
        if (prev.type) {
            el.classList.remove(uniqueColumnTypeCss(prev.type));
        }
        if (prev.css) {
            const css = prev.css.split(' ');
            for (const c of css) {
                el.classList.remove(c);
            }
        }
    }
    // If IE 11 is dropped before we switch to setting a single class name, change to multi param
    // with destructuring.
    const classList = el.classList;
    for (const className of column.columnDef._columnCssClassName) {
        classList.add(className);
    }
    el.classList.add(uniqueColumnCss(column.columnDef));
    if (column.type) {
        el.classList.add(uniqueColumnTypeCss(column.type));
    }
    if (column.css) {
        const css = column.css.split(' ');
        for (const c of css) {
            el.classList.add(c);
        }
    }
}
export function initCellHeaderFooter(element, isFooter) {
    element.classList.add(...(isFooter ? ['cdk-footer-cell', 'pbl-ngrid-footer-cell'] : ['cdk-header-cell', 'pbl-ngrid-header-cell']));
}
export function applyWidth() {
    this.columnDef.applyWidth(this.el);
}
export function applySourceWidth() {
    this.columnDef.applySourceWidth(this.el);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL3NyYy9saWIvZ3JpZC9jZWxsL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUlsRixNQUFNLFVBQVUsZUFBZSxDQUFDLEVBQWUsRUFBRSxNQUFjLEVBQUUsSUFBYTtJQUM1RSxJQUFJLElBQUksRUFBRTtRQUNSLDZGQUE2RjtRQUM3RixzQkFBc0I7UUFDdEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUMvQixLQUFLLE1BQU0sU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUU7WUFDMUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtRQUVELEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hDLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNuQixFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QjtTQUNGO0tBQ0Y7SUFFRCw2RkFBNkY7SUFDN0Ysc0JBQXNCO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDL0IsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFO1FBQzVELFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDMUI7SUFDRCxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ2YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDcEQ7SUFDRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtZQUNuQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxPQUFvQixFQUFFLFFBQWlCO0lBQzFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNySSxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVU7SUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bmlxdWVDb2x1bW5Dc3MsIHVuaXF1ZUNvbHVtblR5cGVDc3MgfSBmcm9tICcuLi91dGlscy91bmlxdWUtY29sdW1uLWNzcyc7XG5pbXBvcnQgeyBQYmxOZ3JpZENvbHVtbkRlZiB9IGZyb20gJy4uL2NvbHVtbi9kaXJlY3RpdmVzL2NvbHVtbi1kZWYnO1xuaW1wb3J0IHsgQ09MVU1OIH0gZnJvbSAnLi4vY29sdW1uL21vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDZWxsRWxlbWVudChlbDogSFRNTEVsZW1lbnQsIGNvbHVtbjogQ09MVU1OLCBwcmV2PzogQ09MVU1OKTogdm9pZCB7XG4gIGlmIChwcmV2KSB7XG4gICAgLy8gSWYgSUUgMTEgaXMgZHJvcHBlZCBiZWZvcmUgd2Ugc3dpdGNoIHRvIHNldHRpbmcgYSBzaW5nbGUgY2xhc3MgbmFtZSwgY2hhbmdlIHRvIG11bHRpIHBhcmFtXG4gICAgLy8gd2l0aCBkZXN0cnVjdHVyaW5nLlxuICAgIGNvbnN0IGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICBmb3IgKGNvbnN0IGNsYXNzTmFtZSBvZiBwcmV2LmNvbHVtbkRlZi5fY29sdW1uQ3NzQ2xhc3NOYW1lKSB7XG4gICAgICBjbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSh1bmlxdWVDb2x1bW5Dc3MocHJldi5jb2x1bW5EZWYpKTtcbiAgICBpZiAocHJldi50eXBlKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKHVuaXF1ZUNvbHVtblR5cGVDc3MocHJldi50eXBlKSk7XG4gICAgfVxuICAgIGlmIChwcmV2LmNzcykge1xuICAgICAgY29uc3QgY3NzID0gcHJldi5jc3Muc3BsaXQoJyAnKTtcbiAgICAgIGZvciAoY29uc3QgYyBvZiBjc3MpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJZiBJRSAxMSBpcyBkcm9wcGVkIGJlZm9yZSB3ZSBzd2l0Y2ggdG8gc2V0dGluZyBhIHNpbmdsZSBjbGFzcyBuYW1lLCBjaGFuZ2UgdG8gbXVsdGkgcGFyYW1cbiAgLy8gd2l0aCBkZXN0cnVjdHVyaW5nLlxuICBjb25zdCBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIGNvbHVtbi5jb2x1bW5EZWYuX2NvbHVtbkNzc0NsYXNzTmFtZSkge1xuICAgIGNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfVxuICBlbC5jbGFzc0xpc3QuYWRkKHVuaXF1ZUNvbHVtbkNzcyhjb2x1bW4uY29sdW1uRGVmKSk7XG4gIGlmIChjb2x1bW4udHlwZSkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQodW5pcXVlQ29sdW1uVHlwZUNzcyhjb2x1bW4udHlwZSkpO1xuICB9XG4gIGlmIChjb2x1bW4uY3NzKSB7XG4gICAgY29uc3QgY3NzID0gY29sdW1uLmNzcy5zcGxpdCgnICcpO1xuICAgIGZvciAoY29uc3QgYyBvZiBjc3MpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Q2VsbEhlYWRlckZvb3RlcihlbGVtZW50OiBIVE1MRWxlbWVudCwgaXNGb290ZXI6IGJvb2xlYW4pIHtcbiAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLihpc0Zvb3RlciA/IFsnY2RrLWZvb3Rlci1jZWxsJywgJ3BibC1uZ3JpZC1mb290ZXItY2VsbCddIDogWydjZGstaGVhZGVyLWNlbGwnLCAncGJsLW5ncmlkLWhlYWRlci1jZWxsJ10pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5V2lkdGgodGhpczogeyBjb2x1bW5EZWY6IFBibE5ncmlkQ29sdW1uRGVmOyBlbDogSFRNTEVsZW1lbnQgfSkge1xuICB0aGlzLmNvbHVtbkRlZi5hcHBseVdpZHRoKHRoaXMuZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTb3VyY2VXaWR0aCh0aGlzOiB7IGNvbHVtbkRlZjogUGJsTmdyaWRDb2x1bW5EZWY7IGVsOiBIVE1MRWxlbWVudCB9KSB7XG4gIHRoaXMuY29sdW1uRGVmLmFwcGx5U291cmNlV2lkdGgodGhpcy5lbCk7XG59XG4iXX0=
import { animationFrameScheduler, Subject, asapScheduler } from 'rxjs';
import { auditTime, filter, take, debounceTime } from 'rxjs/operators';
import { Injectable, Inject } from '@angular/core';
import { EXT_API_TOKEN } from '../../ext/grid-ext-api';
import * as i0 from "@angular/core";
function metaRowSectionFactory() {
    return { fixed: [], row: [], sticky: [], all: [] };
}
export class PblNgridMetaRowService {
    constructor(extApi) {
        this.extApi = extApi;
        this.header = metaRowSectionFactory();
        this.footer = metaRowSectionFactory();
        this.sync$ = new Subject();
        this.hzScroll$ = new Subject();
        this.sync = this.sync$ // TODO: complete
            .pipe(debounceTime(0, asapScheduler));
        this.hzScroll = this.hzScroll$.asObservable();
        extApi.onInit(() => {
            const { grid } = extApi;
            let hzOffset = grid.viewport.measureScrollOffset('start');
            let trackScroll = true;
            grid.viewport.elementScrolled()
                .pipe(filter(() => trackScroll), auditTime(0, animationFrameScheduler))
                .subscribe({
                next: () => {
                    const newOffset = grid.viewport.measureScrollOffset('start');
                    if (hzOffset !== newOffset) {
                        this.hzScroll$.next(hzOffset = newOffset);
                    }
                    else if (grid.viewport.isScrolling) {
                        trackScroll = false;
                        grid.viewport.scrolling
                            .pipe(take(1))
                            .subscribe(() => trackScroll = true);
                    }
                },
                complete: () => this.hzScroll$.complete(),
            });
        });
    }
    addMetaRow(metaRow) {
        const { columnStore } = this.extApi;
        const header = columnStore.metaHeaderRows;
        const footer = columnStore.metaFooterRows;
        const rowDef = metaRow.meta;
        if (rowDef === columnStore.headerColumnDef) {
            if (metaRow.gridWidthRow === true) {
                // This is a dummy row used to measure width and get width resize notifications
                this.gridWidthRow = { rowDef, el: metaRow.element };
            }
            else {
                // This is the main header column row, it doesn't have an index but we will assign as if it's the last
                // so other features will be able to sort by physical location
                this.addToSection(this.header, metaRow, columnStore.metaHeaderRows.length);
            }
        }
        else if (rowDef === columnStore.footerColumnDef) {
            // This is the main footer column row
            this.addToSection(this.footer, metaRow, 0);
        }
        else {
            // All meta rows
            let index = header.findIndex(h => h.rowDef === rowDef);
            if (index > -1) {
                this.addToSection(this.header, metaRow, index);
            }
            else {
                index = footer.findIndex(h => h.rowDef === rowDef);
                if (index > -1) {
                    this.addToSection(this.footer, metaRow, index);
                }
                else {
                    if (typeof ngDevMode === 'undefined' || ngDevMode) {
                        throw new Error('Invalid operation');
                    }
                }
            }
        }
        this.sync$.next();
    }
    removeMetaRow(metaRow) {
        const rowDef = metaRow.meta;
        let index = this.header.all.indexOf(metaRow.meta);
        if (index > -1) {
            this.header.all.splice(index, 1);
            index = this.header[rowDef.type].findIndex(h => h.rowDef === rowDef);
            this.header[rowDef.type].splice(index, 1);
            this.sync$.next();
        }
        else if ((index = this.footer.all.indexOf(metaRow.meta)) > -1) {
            this.footer.all.splice(index, 1);
            index = this.footer[rowDef.type].findIndex(h => h.rowDef === rowDef);
            this.footer[rowDef.type].splice(index, 1);
            this.sync$.next();
        }
    }
    addToSection(section, metaRow, index) {
        const rowDef = metaRow.meta;
        section[rowDef.type].push({ index, rowDef, el: metaRow.element });
        section.all.push(rowDef);
    }
}
/** @nocollapse */ PblNgridMetaRowService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridMetaRowService, deps: [{ token: EXT_API_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PblNgridMetaRowService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridMetaRowService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridMetaRowService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [EXT_API_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS1yb3cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQvc3JjL2xpYi9ncmlkL21ldGEtcm93cy9tZXRhLXJvdy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBYyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRCxPQUFPLEVBQXdCLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUU3RSxTQUFTLHFCQUFxQjtJQUM1QixPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ3JELENBQUM7QUFnQkQsTUFBTSxPQUFPLHNCQUFzQjtJQWNqQyxZQUFtRCxNQUErQjtRQUEvQixXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQVpsRixXQUFNLEdBQW1CLHFCQUFxQixFQUFFLENBQUM7UUFDakQsV0FBTSxHQUFtQixxQkFBcUIsRUFBRSxDQUFDO1FBUXpDLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQzVCLGNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBR3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUI7YUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxF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QyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDakMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFFLENBQUM7WUFDdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVPLFlBQVksQ0FBQyxPQUF1QixFQUFFLE9BQW1CLEVBQUUsS0FBYTtRQUM5RSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFFLENBQUM7UUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7c0lBdkdVLHNCQUFzQixrQkFjYixhQUFhOzBJQWR0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVTs7MEJBZUksTUFBTTsyQkFBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIsIE9ic2VydmFibGUsIFN1YmplY3QsIGFzYXBTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGF1ZGl0VGltZSwgZmlsdGVyLCB0YWtlLCBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBibE1ldGFSb3dEZWZpbml0aW9ucyB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQvY29yZSc7XG5cbmltcG9ydCB7IFBibE5ncmlkRXh0ZW5zaW9uQXBpLCBFWFRfQVBJX1RPS0VOIH0gZnJvbSAnLi4vLi4vZXh0L2dyaWQtZXh0LWFwaSc7XG5cbmZ1bmN0aW9uIG1ldGFSb3dTZWN0aW9uRmFjdG9yeSgpOiBNZXRhUm93U2VjdGlvbiB7XG4gIHJldHVybiB7IGZpeGVkOiBbXSwgcm93OiBbXSwgc3RpY2t5OiBbXSwgYWxsOiBbXSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBibE1ldGFSb3cge1xuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgbWV0YTogUGJsTWV0YVJvd0RlZmluaXRpb25zO1xuICBncmlkV2lkdGhSb3c6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXRhUm93U2VjdGlvbiB7XG4gIGZpeGVkOiBBcnJheTx7IGluZGV4OiBudW1iZXIsIHJvd0RlZjogUGJsTWV0YVJvd0RlZmluaXRpb25zOyBlbD86IEhUTUxFbGVtZW50OyB9PjtcbiAgcm93OiBBcnJheTx7IGluZGV4OiBudW1iZXIsIHJvd0RlZjogUGJsTWV0YVJvd0RlZmluaXRpb25zOyBlbD86IEhUTUxFbGVtZW50OyB9PjtcbiAgc3RpY2t5OiBBcnJheTx7IGluZGV4OiBudW1iZXIsIHJvd0RlZjogUGJsTWV0YVJvd0RlZmluaXRpb25zOyBlbD86IEhUTUxFbGVtZW50OyB9PjtcbiAgYWxsOiBQYmxNZXRhUm93RGVmaW5pdGlvbnNbXTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBibE5ncmlkTWV0YVJvd1NlcnZpY2U8VCA9IGFueT4ge1xuICBncmlkV2lkdGhSb3c6IHsgcm93RGVmOiBQYmxNZXRhUm93RGVmaW5pdGlvbnM7IGVsOiBIVE1MRWxlbWVudDsgfTtcbiAgaGVhZGVyOiBNZXRhUm93U2VjdGlvbiA9IG1ldGFSb3dTZWN0aW9uRmFjdG9yeSgpO1xuICBmb290ZXI6IE1ldGFSb3dTZWN0aW9uID0gbWV0YVJvd1NlY3Rpb25GYWN0b3J5KCk7XG5cbiAgLyoqXG4gICAqIE5vdGlmaWVzIHRoYXQgY2hhbmdlcyBvY2N1cmVkIGluIG9uZSBvciBtb3JlIG1ldGEgcm93cyAoYWRkZWQvcmVtb3ZlZClcbiAgICogTXVsdGlwbGUgY2hhbmdlcyBhcmUgYWdncmVnYXRlZCAodXNpbmcgYXNhcFNjaGVkdWxlcilcbiAgICovXG4gIHJlYWRvbmx5IHN5bmM6IE9ic2VydmFibGU8dm9pZD47XG4gIHJlYWRvbmx5IGh6U2Nyb2xsOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gIHByaXZhdGUgc3luYyQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIGh6U2Nyb2xsJCA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEVYVF9BUElfVE9LRU4pIHB1YmxpYyByZWFkb25seSBleHRBcGk6IFBibE5ncmlkRXh0ZW5zaW9uQXBpPFQ+KSB7XG4gICAgdGhpcy5zeW5jID0gdGhpcy5zeW5jJCAvLyBUT0RPOiBjb21wbGV0ZVxuICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKDAsIGFzYXBTY2hlZHVsZXIpKTtcblxuICAgIHRoaXMuaHpTY3JvbGwgPSB0aGlzLmh6U2Nyb2xsJC5hc09ic2VydmFibGUoKTtcblxuICAgIGV4dEFwaS5vbkluaXQoKCkgPT4ge1xuICAgICAgY29uc3QgeyBncmlkIH0gPSBleHRBcGk7XG4gICAgICBsZXQgaHpPZmZzZXQgPSBncmlkLnZpZXdwb3J0Lm1lYXN1cmVTY3JvbGxPZmZzZXQoJ3N0YXJ0Jyk7XG4gICAgICBsZXQgdHJhY2tTY3JvbGwgPSB0cnVlO1xuICAgICAgZ3JpZC52aWV3cG9ydC5lbGVtZW50U2Nyb2xsZWQoKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIoICgpID0+IHRyYWNrU2Nyb2xsICksXG4gICAgICAgICAgYXVkaXRUaW1lKDAsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKSxcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdPZmZzZXQgPSBncmlkLnZpZXdwb3J0Lm1lYXN1cmVTY3JvbGxPZmZzZXQoJ3N0YXJ0Jyk7XG4gICAgICAgICAgICBpZiAoaHpPZmZzZXQgIT09IG5ld09mZnNldCkge1xuICAgICAgICAgICAgICB0aGlzLmh6U2Nyb2xsJC5uZXh0KGh6T2Zmc2V0ID0gbmV3T2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JpZC52aWV3cG9ydC5pc1Njcm9sbGluZykge1xuICAgICAgICAgICAgICB0cmFja1Njcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgICBncmlkLnZpZXdwb3J0LnNjcm9sbGluZ1xuICAgICAgICAgICAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSggKCkgPT4gdHJhY2tTY3JvbGwgPSB0cnVlICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZTogKCkgPT4gdGhpcy5oelNjcm9sbCQuY29tcGxldGUoKSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRNZXRhUm93KG1ldGFSb3c6IFBibE1ldGFSb3cpOiB2b2lkIHtcbiAgICBjb25zdCB7IGNvbHVtblN0b3JlIH0gPSB0aGlzLmV4dEFwaTtcbiAgICBjb25zdCBoZWFkZXIgPSBjb2x1bW5TdG9yZS5tZXRhSGVhZGVyUm93cztcbiAgICBjb25zdCBmb290ZXIgPSBjb2x1bW5TdG9yZS5tZXRhRm9vdGVyUm93cztcblxuICAgIGNvbnN0IHJvd0RlZiA9IG1ldGFSb3cubWV0YTtcbiAgICBpZiAocm93RGVmID09PSBjb2x1bW5TdG9yZS5oZWFkZXJDb2x1bW5EZWYpIHtcbiAgICAgIGlmIChtZXRhUm93LmdyaWRXaWR0aFJvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgZHVtbXkgcm93IHVzZWQgdG8gbWVhc3VyZSB3aWR0aCBhbmQgZ2V0IHdpZHRoIHJlc2l6ZSBub3RpZmljYXRpb25zXG4gICAgICAgIHRoaXMuZ3JpZFdpZHRoUm93ID0geyByb3dEZWYsIGVsOiBtZXRhUm93LmVsZW1lbnQgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIG1haW4gaGVhZGVyIGNvbHVtbiByb3csIGl0IGRvZXNuJ3QgaGF2ZSBhbiBpbmRleCBidXQgd2Ugd2lsbCBhc3NpZ24gYXMgaWYgaXQncyB0aGUgbGFzdFxuICAgICAgICAvLyBzbyBvdGhlciBmZWF0dXJlcyB3aWxsIGJlIGFibGUgdG8gc29ydCBieSBwaHlzaWNhbCBsb2NhdGlvblxuICAgICAgICB0aGlzLmFkZFRvU2VjdGlvbih0aGlzLmhlYWRlciwgbWV0YVJvdywgY29sdW1uU3RvcmUubWV0YUhlYWRlclJvd3MubGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJvd0RlZiA9PT0gY29sdW1uU3RvcmUuZm9vdGVyQ29sdW1uRGVmKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBtYWluIGZvb3RlciBjb2x1bW4gcm93XG4gICAgICB0aGlzLmFkZFRvU2VjdGlvbih0aGlzLmZvb3RlciwgbWV0YVJvdywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFsbCBtZXRhIHJvd3NcbiAgICAgIGxldCBpbmRleCA9IGhlYWRlci5maW5kSW5kZXgoIGggPT4gaC5yb3dEZWYgPT09IHJvd0RlZiApO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5hZGRUb1NlY3Rpb24odGhpcy5oZWFkZXIsIG1ldGFSb3csIGluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4ID0gZm9vdGVyLmZpbmRJbmRleCggaCA9PiBoLnJvd0RlZiA9PT0gcm93RGVmICk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgdGhpcy5hZGRUb1NlY3Rpb24odGhpcy5mb290ZXIsIG1ldGFSb3csIGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgb3BlcmF0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc3luYyQubmV4dCgpO1xuICB9XG5cbiAgcmVtb3ZlTWV0YVJvdyhtZXRhUm93OiBQYmxNZXRhUm93KTogdm9pZCB7XG4gICAgY29uc3Qgcm93RGVmID0gbWV0YVJvdy5tZXRhO1xuICAgIGxldCBpbmRleCA9IHRoaXMuaGVhZGVyLmFsbC5pbmRleE9mKG1ldGFSb3cubWV0YSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuaGVhZGVyLmFsbC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgaW5kZXggPSB0aGlzLmhlYWRlcltyb3dEZWYudHlwZV0uZmluZEluZGV4KCBoID0+IGgucm93RGVmID09PSByb3dEZWYgKTtcbiAgICAgIHRoaXMuaGVhZGVyW3Jvd0RlZi50eXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zeW5jJC5uZXh0KCk7XG4gICAgfSBlbHNlIGlmICggKGluZGV4ID0gdGhpcy5mb290ZXIuYWxsLmluZGV4T2YobWV0YVJvdy5tZXRhKSkgPiAtMSkge1xuICAgICAgdGhpcy5mb290ZXIuYWxsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBpbmRleCA9IHRoaXMuZm9vdGVyW3Jvd0RlZi50eXBlXS5maW5kSW5kZXgoIGggPT4gaC5yb3dEZWYgPT09IHJvd0RlZiApO1xuICAgICAgdGhpcy5mb290ZXJbcm93RGVmLnR5cGVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLnN5bmMkLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZFRvU2VjdGlvbihzZWN0aW9uOiBNZXRhUm93U2VjdGlvbiwgbWV0YVJvdzogUGJsTWV0YVJvdywgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHJvd0RlZiA9IG1ldGFSb3cubWV0YTtcbiAgICBzZWN0aW9uW3Jvd0RlZi50eXBlXS5wdXNoKCB7IGluZGV4LCByb3dEZWYsIGVsOiBtZXRhUm93LmVsZW1lbnQgfSApO1xuICAgIHNlY3Rpb24uYWxsLnB1c2gocm93RGVmKTtcbiAgfVxufVxuIl19
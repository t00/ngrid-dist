import { NgZone } from '@angular/core';
import { ON_INVALIDATE_HEADERS, unrx } from '@pebula/ngrid/core';
import { PblNgridMetaRowService } from '../meta-rows/meta-row.service';
import { updateMetaRowFirstLastClass } from './utils';
function isPblNgridRowComponent(row) {
    return row.rowType === 'data';
}
export class PblRowsApi {
    constructor(extApi, zone, cellFactory) {
        this.extApi = extApi;
        this.zone = zone;
        this.cellFactory = cellFactory;
        this.allByElement = new Map();
        this.allRows = new Set();
        this.rows = new Map();
        this.columnRows = new Set();
        this.metaHeaderRows = new Set();
        this.metaFooterRows = new Set();
        this.firstLast = {
            header: {},
            footer: {},
        };
        this.metaRowService = new PblNgridMetaRowService(extApi);
        extApi.onConstructed(() => this.cdkTable = extApi.cdkTable);
        for (const type of ['header', 'data', 'footer', 'meta-header', 'meta-footer']) {
            this.rows.set(type, new Set());
        }
        /* List to sync events which notify about changes in meta rows and update the first/last rows to have the class marking it is the first/last */
        this.metaRowService.sync
            .pipe(unrx(this))
            .subscribe(() => {
            this.firstLast.header = updateMetaRowFirstLastClass('header', this.extApi.element, this.firstLast.header);
            this.firstLast.footer = updateMetaRowFirstLastClass('footer', this.extApi.element, this.firstLast.footer);
        });
        extApi.columnStore.columnRowChange()
            .pipe(unrx(this))
            .subscribe(event => {
            const gridWidthRow = this.gridWidthRow;
            let requireSizeUpdate = false;
            event.changes.forEachOperation((record, previousIndex, currentIndex) => {
                if (record.previousIndex == null) {
                    for (const r of this.columnRows) {
                        r._createCell(record.item, currentIndex);
                    }
                }
                else if (currentIndex == null) {
                    for (const r of this.columnRows) {
                        r._destroyCell(previousIndex);
                    }
                }
                else {
                    for (const r of this.columnRows) {
                        r._moveCell(previousIndex, currentIndex);
                    }
                    if (!requireSizeUpdate && gridWidthRow) {
                        const lastIndex = gridWidthRow.cellsLength - 1;
                        requireSizeUpdate = currentIndex === lastIndex || previousIndex === lastIndex;
                    }
                }
            });
            if (requireSizeUpdate) {
                this.gridWidthRow.updateSize();
            }
        });
        extApi.columnStore.metaRowChange()
            .pipe(unrx(this))
            .subscribe(event => {
            const rows = event.metaRow.kind === 'header' ? this.metaHeaderRows : this.metaFooterRows;
            for (const r of rows) {
                if (r.row.rowDef.rowIndex === event.metaRow.rowDef.rowIndex) {
                    event.changes.forEachOperation((record, previousIndex, currentIndex) => {
                        if (record.previousIndex == null) {
                            const columns = this.extApi.columnStore.find(record.item);
                            const col = event.metaRow.kind === 'header' ?
                                event.metaRow.isGroup ? columns.headerGroup : columns.header
                                : event.metaRow.isGroup ? columns.footerGroup : columns.footer;
                            r._createCell(col, currentIndex);
                        }
                        else if (currentIndex == null) {
                            r._destroyCell(previousIndex);
                        }
                        else {
                            r._moveCell(previousIndex, currentIndex);
                        }
                    });
                    break;
                }
            }
        });
        extApi.onConstructed(() => {
            this.intersection = extApi.viewport.intersection;
            if (this.intersection.observerMode) {
                this.intersection.intersectionChanged
                    .subscribe(entries => {
                    for (const e of entries) {
                        const row = this.allByElement.get(e.target);
                        if (isPblNgridRowComponent(row)) {
                            row._setOutOfViewState(!e.isIntersecting);
                        }
                    }
                });
            }
            else {
                // only needed for non intersection observer mode
                // TODO: remove when IntersectionObserver is required
                let lastScrollState = extApi.viewport.isScrolling;
                extApi.viewport.scrolling
                    .subscribe(scrolling => {
                    if (scrolling === 0 && lastScrollState) {
                        // TODO: be smarter here, start from edges, stop when both edge hit in view row
                        // use isOutOfView location (top/bottom) to speed up
                        this.forceUpdateOutOfView(...this.dataRows());
                    }
                    lastScrollState = !!scrolling;
                });
            }
        });
        extApi.events
            .pipe(ON_INVALIDATE_HEADERS)
            .subscribe(event => {
            const dataRows = this.dataRows();
            for (const row of dataRows) {
                row._rebuildCells();
            }
            // TODO: reset viewport and virtual scroll state/cache/calculations
        });
        // Handle item moves to update the context with the new index
        extApi.events
            .subscribe(event => {
            if (event.kind === 'onBeforeMoveItem') {
                try {
                    const { fromIndex, toIndex } = event;
                    const main = extApi.grid.rowsApi.findDataRowByDsIndex(fromIndex);
                    if (fromIndex < toIndex) {
                        for (let i = fromIndex + 1; i <= toIndex; i++) {
                            extApi.grid.rowsApi.findDataRowByDsIndex(i).context.dsIndex -= 1;
                        }
                    }
                    else {
                        for (let i = fromIndex - 1; i >= toIndex; i--) {
                            extApi.grid.rowsApi.findDataRowByDsIndex(i).context.dsIndex += 1;
                        }
                    }
                    main.context.dsIndex = toIndex;
                }
                catch (err) {
                }
            }
        });
    }
    forceUpdateOutOfView(...rows) {
        if (this.intersection.observerMode) {
            const entries = this.intersection.snapshot();
            for (const e of entries) {
                const row = this.allByElement.get(e.target);
                if (isPblNgridRowComponent(row)) {
                    row._setOutOfViewState(!e.isIntersecting);
                }
            }
        }
        else {
            const { clientRect } = this.extApi.viewport.getBoundingClientRects;
            for (const row of rows) {
                row._setOutOfViewState(isOutOfView(row, clientRect));
            }
        }
    }
    addRow(row) {
        this.allRows.add(row);
        this.allByElement.set(row.element, row);
        const rows = this.rows.get(row.rowType);
        rows.add(row);
        switch (row.rowType) {
            case 'header':
                if (row.gridWidthRow) {
                    this.gridWidthRow = row;
                }
            case 'data': // tslint:disable-line: no-switch-case-fall-through
                this.intersection.track(row.element);
            case 'footer': // tslint:disable-line: no-switch-case-fall-through
                this.columnRows.add(row);
                break;
            case 'meta-header':
                this.metaHeaderRows.add(row);
                break;
            case 'meta-footer':
                this.metaFooterRows.add(row);
                break;
        }
    }
    removeRow(row) {
        this.allRows.delete(row);
        this.allByElement.delete(row.element);
        const rows = this.rows.get(row.rowType);
        if (rows) {
            rows.delete(row);
        }
        switch (row.rowType) {
            case 'header':
                if (row.gridWidthRow && row === this.gridWidthRow) {
                    this.gridWidthRow = undefined;
                }
            case 'data': // tslint:disable-line: no-switch-case-fall-through
                this.intersection.untrack(row.element);
            case 'footer': // tslint:disable-line: no-switch-case-fall-through
                this.columnRows.delete(row);
                break;
            case 'meta-header':
                this.metaHeaderRows.delete(row);
                break;
            case 'meta-footer':
                this.metaFooterRows.delete(row);
                break;
        }
    }
    dataRows() {
        return Array.from(this.rows.get('data'));
    }
    findRowByElement(element) {
        return this.allByElement.get(element);
    }
    findDataRowByDsIndex(index) {
        var _a;
        for (const r of this.dataRows()) {
            if (((_a = r.context) === null || _a === void 0 ? void 0 : _a.dsIndex) === index) {
                return r;
            }
        }
    }
    findDataRowByIndex(index) {
        for (const r of this.dataRows()) {
            if (r.rowIndex === index) {
                return r;
            }
        }
    }
    findDataRowByIdentity(identity) {
        var _a;
        for (const r of this.dataRows()) {
            if (((_a = r.context) === null || _a === void 0 ? void 0 : _a.identity) === identity) {
                return r;
            }
        }
    }
    findColumnRow(type) {
        return Array.from(this.rows.get(type))
            .find(r => r.gridWidthRow === false);
    }
    syncRows(rowType = false, ...rowsIndex) {
        if (!NgZone.isInAngularZone()) {
            this.zone.run(() => this.syncRows(rowType, ...rowsIndex));
            return;
        }
        const detectChanges = typeof rowType === 'boolean'
            ? rowType
            : typeof rowsIndex[0] === 'boolean'
                ? rowsIndex.shift()
                : false;
        let rows;
        let useSpecificRows = rowsIndex.length > 0;
        switch (rowType) {
            case 'header':
            case 'data':
            case 'footer':
            case 'meta-header':
            case 'meta-footer':
                rows = this.rows.get(rowType);
                break;
            default: // boolean or 'all'
                useSpecificRows = false;
                rows = this.allRows;
                break;
        }
        if (!useSpecificRows) {
            for (const r of Array.from(rows)) {
                r.ngDoCheck();
            }
        }
        else {
            for (const index of rowsIndex) {
                for (const r of Array.from(rows)) {
                    if (r.rowIndex === index) {
                        r.ngDoCheck();
                    }
                }
            }
        }
    }
}
function isOutOfView(row, viewPortRect, location) {
    const elRect = row.element.getBoundingClientRect();
    let isInsideOfView;
    switch (location) {
        case 'top':
            isInsideOfView = elRect.bottom >= viewPortRect.top;
            break;
        case 'bottom':
            isInsideOfView = elRect.top <= viewPortRect.bottom;
            break;
        default:
            isInsideOfView = (elRect.bottom >= viewPortRect.top && elRect.top <= viewPortRect.bottom);
            break;
    }
    return !isInsideOfView;
}
//# sourceMappingURL=data:application/json;base64,
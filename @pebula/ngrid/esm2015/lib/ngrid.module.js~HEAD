/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ANALYZE_FOR_ENTRY_COMPONENTS, Inject, InjectionToken, Injector, Optional, NgModule, NgModuleRef, Self } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ScrollingModule as ScrollingModuleExp } from '@angular/cdk-experimental/scrolling';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { CdkTableModule } from '@angular/cdk/table';
import { PEB_NGRID_CONFIG, PblNgridRegistryService, PblCdkTableComponent, PblNgridComponent, PblNgridRowComponent, PblNgridMetaRowContainerComponent, PblMetaRowDirective, PblNgridColumnDef, PblNgridHeaderCellDefDirective, PblNgridFooterCellDefDirective, PblNgridCellDefDirective, PblNgridEditorCellDefDirective, PblNgridHeaderCellComponent, PblNgridCellDirective, PblNgridFooterCellDirective, PblNgridCellStyling, PblNgridOuterSectionDirective, PblNgridHeaderExtensionRefDirective, PblNgridNoDataRefDirective, PblNgridPaginatorRefDirective, PblColumnSizeObserver, PblCdkVirtualScrollViewportComponent, PblCdkVirtualScrollDirective, PblNgridScrolling, PblNgridCellEditAutoFocusDirective, PblNgridConfigService, } from './grid/index';
/** @type {?} */
export const COMMON_TABLE_TEMPLATE_INIT = new InjectionToken('COMMON TABLE TEMPLATE INIT');
/**
 * @record
 */
export function CommonTemplateInit() { }
if (false) {
    /** @type {?} */
    CommonTemplateInit.prototype.component;
    /**
     * When true will use the root registry service (for templates).
     * Otherwise, uses the provided registry from the dependency tree.
     * @type {?|undefined}
     */
    CommonTemplateInit.prototype.root;
}
/**
 * @param {?} components
 * @return {?}
 */
export function provideCommon(components) {
    return [
        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: components },
        { provide: COMMON_TABLE_TEMPLATE_INIT, multi: true, useValue: components },
    ];
}
export class PblNgridModule {
    /**
     * @param {?} ngRef
     * @param {?} registry
     * @param {?} components
     */
    constructor(ngRef, registry, components) {
        if (components) {
            for (const multi of components) {
                for (const c of multi) {
                    if (c.root) {
                        registry = registry.getRoot();
                    }
                    PblNgridModule.loadCommonTemplates(ngRef, c.component, { registry, destroy: true });
                }
            }
        }
    }
    /**
     * @param {?} config
     * @param {?} components
     * @return {?}
     */
    static forRoot(config, components) {
        return {
            ngModule: PblNgridModule,
            providers: [
                { provide: PEB_NGRID_CONFIG, useValue: config },
                PblNgridConfigService,
                provideCommon(components),
            ]
        };
    }
    /**
     * @param {?} components
     * @return {?}
     */
    static withCommon(components) {
        return {
            ngModule: PblNgridModule,
            providers: provideCommon(components),
        };
    }
    /**
     * @template T
     * @param {?} ngRef
     * @param {?} component
     * @param {?=} options
     * @return {?}
     */
    static loadCommonTemplates(ngRef, component, options) {
        let { injector } = ngRef;
        const { registry, destroy } = options || ((/** @type {?} */ ({})));
        if (registry) {
            injector = Injector.create({
                providers: [{ provide: PblNgridRegistryService, useValue: registry.getRoot() }],
                parent: ngRef.injector
            });
        }
        /** @type {?} */
        const cmpRef = ngRef.componentFactoryResolver.resolveComponentFactory(component).create(injector);
        cmpRef.changeDetectorRef.detectChanges();
        if (destroy) {
            ngRef.onDestroy((/**
             * @return {?}
             */
            () => {
                try {
                    cmpRef.destroy();
                }
                catch (err) { }
            }));
        }
        return cmpRef;
    }
}
PblNgridModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ScrollingModule, ScrollingModuleExp,
                    CdkTableModule,
                ],
                declarations: [
                    PblNgridMetaRowContainerComponent, PblMetaRowDirective,
                    PblCdkTableComponent,
                    PblNgridColumnDef,
                    PblNgridRowComponent,
                    PblNgridCellStyling,
                    PblNgridOuterSectionDirective,
                    PblNgridHeaderExtensionRefDirective,
                    PblNgridNoDataRefDirective,
                    PblNgridPaginatorRefDirective,
                    PblNgridHeaderCellDefDirective,
                    PblNgridFooterCellDefDirective,
                    PblNgridCellDefDirective, PblNgridEditorCellDefDirective,
                    PblNgridHeaderCellComponent,
                    PblNgridCellDirective,
                    PblNgridFooterCellDirective,
                    PblColumnSizeObserver,
                    PblCdkVirtualScrollViewportComponent, PblCdkVirtualScrollDirective, PblNgridScrolling,
                    PblNgridCellEditAutoFocusDirective,
                    PblNgridComponent,
                ],
                exports: [
                    PblNgridRowComponent,
                    PblNgridCellStyling,
                    PblNgridOuterSectionDirective,
                    PblNgridHeaderExtensionRefDirective,
                    PblNgridNoDataRefDirective,
                    PblNgridPaginatorRefDirective,
                    PblNgridHeaderCellDefDirective,
                    PblNgridFooterCellDefDirective,
                    PblNgridCellDefDirective, PblNgridEditorCellDefDirective, PblNgridScrolling,
                    PblNgridHeaderCellComponent,
                    PblNgridCellDirective,
                    PblNgridFooterCellDirective,
                    PblColumnSizeObserver,
                    PblCdkVirtualScrollDirective,
                    PblNgridCellEditAutoFocusDirective,
                    PblNgridComponent,
                ],
            },] }
];
/** @nocollapse */
PblNgridModule.ctorParameters = () => [
    { type: NgModuleRef },
    { type: PblNgridRegistryService },
    { type: Array, decorators: [{ type: Inject, args: [COMMON_TABLE_TEMPLATE_INIT,] }, { type: Optional }, { type: Self }] }
];
//# sourceMappingURL=data:application/json;base64,
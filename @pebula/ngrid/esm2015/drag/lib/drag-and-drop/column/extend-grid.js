/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PblColumn, PblColumnGroup } from '@pebula/ngrid';
/**
 * @this {?}
 * @param {?} column
 * @return {?}
 */
function checkGroupLockConstraint(column) {
    for (const id of this.groups) {
        /** @type {?} */
        const g = this.groupStore.find(id);
        if (g && g.lockColumns && !column.isInGroup(g)) {
            return false;
        }
    }
    return true;
}
/**
 * @return {?}
 */
export function extendGrid() {
    PblColumn.extendProperty('reorder');
    PblColumn.extendProperty('wontBudge');
    PblColumnGroup.extendProperty('lockColumns');
    PblColumn.prototype.checkGroupLockConstraint = (/**
     * @this {?}
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLWdyaWQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcGVidWxhL25ncmlkL2RyYWcvIiwic291cmNlcyI6WyJsaWIvZHJhZy1hbmQtZHJvcC9jb2x1bW4vZXh0ZW5kLWdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFtRDFELFNBQVMsd0JBQXdCLENBQWtCLE1BQWlCO0lBQ2xFLEtBQUssTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7Y0FDdEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5QyxPQUFPLEtBQUssQ0FBQztTQUNkO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUN4QixTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLFNBQVMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUU3QyxTQUFTLENBQUMsU0FBUyxDQUFDLHdCQUF3Qjs7Ozs7SUFBRyxVQUEyQixNQUFpQjtRQUN6RixPQUFPLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwRyxDQUFDLENBQUEsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYmxDb2x1bW4sIFBibENvbHVtbkdyb3VwIH0gZnJvbSAnQHBlYnVsYS9uZ3JpZCc7XG5cbmRlY2xhcmUgbW9kdWxlICdAcGVidWxhL25ncmlkL2xpYi90YWJsZS9jb2x1bW5zL2NvbHVtbicge1xuICBpbnRlcmZhY2UgUGJsQ29sdW1uIHtcblxuICAgIHJlb3JkZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgaXRlbSBjYW4gYmUgcmVvcmRlcmVkIGJhc2VkIG9uIHRoZSBgcmVvcmRlcmAgcHJvcGVydHkgYnV0XG4gICAgICogd2lsbCBub3QgbW92ZSAoYnVkZ2UpIHdoZW4gb3RoZXIgaXRlbXMgYXJlIHJlb3JkZXJlZC5cbiAgICAgKi9cbiAgICB3b250QnVkZ2U6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGJ5IHN3aXRjaGluZyBiZXR3ZWVuIHRoaXMgY29sdW1uIGFuZCB0aGUgcHJvdmlkZWQgY29sdW1uIHRoZSBgbG9ja0NvbHVtbnNgIGNvbnN0cmFpbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqIFRoZSBsb2NrQ29sdW1ucyBjb25zdHJhaW50IGlzIHNldCBvbiBhIGdyb3VwIGFuZCByZXN0cmljdCBzcGxpdHRpbmcgb2YgZ3JvdXBzLlxuICAgICAqIEEgQ29sdW1uIHdpdGggYSBsb2NrZWQgZ3JvdXAgd2lsbCBub3QgYmUgYWxsb3dlZCB0byBsZWF2ZSB0aGUgZ3JvdXAgbm9yIG5ldyBpdGVtcyBhcmUgYWxsb3dlZCB0aGF0IHNwbGl0IHRoZSBncm91cC5cbiAgICAgKlxuICAgICAqIFRoZSBwcm9jZXNzIHdpbGwgY2hlY2sgYm90aCBzY2VuYXJpb3MuXG4gICAgICovXG4gICAgY2hlY2tHcm91cExvY2tDb25zdHJhaW50KGNvbHVtbjogUGJsQ29sdW1uKTogYm9vbGVhbjtcbiAgfVxufVxuXG5kZWNsYXJlIG1vZHVsZSAnQHBlYnVsYS9uZ3JpZC9saWIvdGFibGUvY29sdW1ucy9ncm91cC1jb2x1bW4nIHtcbiAgaW50ZXJmYWNlIFBibENvbHVtbkdyb3VwIHtcbiAgICAvKipcbiAgICAgKiBMb2NrIGNvbHVtbiBpbiB0aGUgZ3JvdXAsIHByZXZlbnRpbmcgdGhlIGdyb3VwIGZyb20gc3BsaXR0aW5nLlxuICAgICAqIFNwbGl0dGluZyBpcyBibG9jayBhY3RpdmVseSAoY29sdW1uIGZyb20gdGhlIGdyb3VwIGRyYWdnZWQgb3V0c2lkZSkgYW5kIHBhc3NpdmVseSAoY29sdW1uIG91dHNpZGUgb2YgdGhlIGdyb3VwIGRyYWdnaW5nIGludG8gdGhlIGdyb3VwKS5cbiAgICAgKi9cbiAgICBsb2NrQ29sdW1ucz86IGJvb2xlYW47XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL3RhYmxlL2NvbHVtbnMvdHlwZXMnIHtcbiAgaW50ZXJmYWNlIFBibENvbHVtbkRlZmluaXRpb24ge1xuICAgIHJlb3JkZXI/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGl0ZW0gY2FuIGJlIHJlb3JkZXJlZCBiYXNlZCBvbiB0aGUgYHJlb3JkZXJgIHByb3BlcnR5IGJ1dFxuICAgICAqIHdpbGwgbm90IG1vdmUgKGJ1ZGdlKSB3aGVuIG90aGVyIGl0ZW1zIGFyZSByZW9yZGVyZWQuXG4gICAgICovXG4gICAgd29udEJ1ZGdlPzogYm9vbGVhbjtcbiAgfVxuICBpbnRlcmZhY2UgUGJsQ29sdW1uR3JvdXBEZWZpbml0aW9uIHtcbiAgICAvKipcbiAgICAgKiBMb2NrIGNvbHVtbiBpbiB0aGUgZ3JvdXAsIHByZXZlbnRpbmcgdGhlIGdyb3VwIGZyb20gc3BsaXR0aW5nLlxuICAgICAqIFNwbGl0dGluZyBpcyBibG9jayBhY3RpdmVseSAoY29sdW1uIGZyb20gdGhlIGdyb3VwIGRyYWdnZWQgb3V0c2lkZSkgYW5kIHBhc3NpdmVseSAoY29sdW1uIG91dHNpZGUgb2YgdGhlIGdyb3VwIGRyYWdnaW5nIGludG8gdGhlIGdyb3VwKS5cbiAgICAgKi9cbiAgICBsb2NrQ29sdW1ucz86IGJvb2xlYW47XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tHcm91cExvY2tDb25zdHJhaW50KHRoaXM6IFBibENvbHVtbiwgY29sdW1uOiBQYmxDb2x1bW4pOiBib29sZWFuIHtcbiAgZm9yIChjb25zdCBpZCBvZiB0aGlzLmdyb3Vwcykge1xuICAgIGNvbnN0IGcgPSB0aGlzLmdyb3VwU3RvcmUuZmluZChpZCk7XG4gICAgaWYgKGcgJiYgZy5sb2NrQ29sdW1ucyAmJiAhY29sdW1uLmlzSW5Hcm91cChnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZEdyaWQoKTogdm9pZCB7XG4gIFBibENvbHVtbi5leHRlbmRQcm9wZXJ0eSgncmVvcmRlcicpO1xuICBQYmxDb2x1bW4uZXh0ZW5kUHJvcGVydHkoJ3dvbnRCdWRnZScpO1xuICBQYmxDb2x1bW5Hcm91cC5leHRlbmRQcm9wZXJ0eSgnbG9ja0NvbHVtbnMnKTtcblxuICBQYmxDb2x1bW4ucHJvdG90eXBlLmNoZWNrR3JvdXBMb2NrQ29uc3RyYWludCA9IGZ1bmN0aW9uICh0aGlzOiBQYmxDb2x1bW4sIGNvbHVtbjogUGJsQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNoZWNrR3JvdXBMb2NrQ29uc3RyYWludC5jYWxsKHRoaXMsIGNvbHVtbikgJiYgY2hlY2tHcm91cExvY2tDb25zdHJhaW50LmNhbGwoY29sdW1uLCB0aGlzKTtcbiAgfTtcbn1cblxuIl19
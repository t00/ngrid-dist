import { PblColumn, PblColumnGroup } from '@pebula/ngrid';
function checkGroupLockConstraint(column) {
    for (const id of this.groups) {
        const g = this.groupStore.find(id);
        if (g && g.lockColumns && !column.isInGroup(g)) {
            return false;
        }
    }
    return true;
}
export function colReorderExtendGrid() {
    PblColumn.extendProperty('reorder');
    PblColumn.extendProperty('wontBudge');
    PblColumnGroup.extendProperty('lockColumns');
    PblColumn.prototype.checkGroupLockConstraint = function (column) {
        return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLWdyaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL2RyYWcvc3JjL2xpYi9kcmFnLWFuZC1kcm9wL2NvbHVtbi9leHRlbmQtZ3JpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQW1EMUQsU0FBUyx3QkFBd0IsQ0FBa0IsTUFBaUI7SUFDbEUsS0FBSyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzlDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0I7SUFDbEMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxTQUFTLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLGNBQWMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFN0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsR0FBRyxVQUEyQixNQUFpQjtRQUN6RixPQUFPLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwRyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGJsQ29sdW1uLCBQYmxDb2x1bW5Hcm91cCB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuXG5kZWNsYXJlIG1vZHVsZSAnQHBlYnVsYS9uZ3JpZC9saWIvZ3JpZC9jb2x1bW4vbW9kZWwvY29sdW1uJyB7XG4gIGludGVyZmFjZSBQYmxDb2x1bW4ge1xuXG4gICAgcmVvcmRlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBpdGVtIGNhbiBiZSByZW9yZGVyZWQgYmFzZWQgb24gdGhlIGByZW9yZGVyYCBwcm9wZXJ0eSBidXRcbiAgICAgKiB3aWxsIG5vdCBtb3ZlIChidWRnZSkgd2hlbiBvdGhlciBpdGVtcyBhcmUgcmVvcmRlcmVkLlxuICAgICAqL1xuICAgIHdvbnRCdWRnZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgYnkgc3dpdGNoaW5nIGJldHdlZW4gdGhpcyBjb2x1bW4gYW5kIHRoZSBwcm92aWRlZCBjb2x1bW4gdGhlIGBsb2NrQ29sdW1uc2AgY29uc3RyYWludCBpcyB0cmlnZ2VyZWQuXG4gICAgICogVGhlIGxvY2tDb2x1bW5zIGNvbnN0cmFpbnQgaXMgc2V0IG9uIGEgZ3JvdXAgYW5kIHJlc3RyaWN0IHNwbGl0dGluZyBvZiBncm91cHMuXG4gICAgICogQSBDb2x1bW4gd2l0aCBhIGxvY2tlZCBncm91cCB3aWxsIG5vdCBiZSBhbGxvd2VkIHRvIGxlYXZlIHRoZSBncm91cCBub3IgbmV3IGl0ZW1zIGFyZSBhbGxvd2VkIHRoYXQgc3BsaXQgdGhlIGdyb3VwLlxuICAgICAqXG4gICAgICogVGhlIHByb2Nlc3Mgd2lsbCBjaGVjayBib3RoIHNjZW5hcmlvcy5cbiAgICAgKi9cbiAgICBjaGVja0dyb3VwTG9ja0NvbnN0cmFpbnQoY29sdW1uOiBQYmxDb2x1bW4pOiBib29sZWFuO1xuICB9XG59XG5cbmRlY2xhcmUgbW9kdWxlICdAcGVidWxhL25ncmlkL2xpYi9ncmlkL2NvbHVtbi9tb2RlbC9ncm91cC1jb2x1bW4nIHtcbiAgaW50ZXJmYWNlIFBibENvbHVtbkdyb3VwIHtcbiAgICAvKipcbiAgICAgKiBMb2NrIGNvbHVtbiBpbiB0aGUgZ3JvdXAsIHByZXZlbnRpbmcgdGhlIGdyb3VwIGZyb20gc3BsaXR0aW5nLlxuICAgICAqIFNwbGl0dGluZyBpcyBibG9jayBhY3RpdmVseSAoY29sdW1uIGZyb20gdGhlIGdyb3VwIGRyYWdnZWQgb3V0c2lkZSkgYW5kIHBhc3NpdmVseSAoY29sdW1uIG91dHNpZGUgb2YgdGhlIGdyb3VwIGRyYWdnaW5nIGludG8gdGhlIGdyb3VwKS5cbiAgICAgKi9cbiAgICBsb2NrQ29sdW1ucz86IGJvb2xlYW47XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvY29yZS9saWIvbW9kZWxzL2NvbHVtbicge1xuICBpbnRlcmZhY2UgUGJsQ29sdW1uRGVmaW5pdGlvbiB7XG4gICAgcmVvcmRlcj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgaXRlbSBjYW4gYmUgcmVvcmRlcmVkIGJhc2VkIG9uIHRoZSBgcmVvcmRlcmAgcHJvcGVydHkgYnV0XG4gICAgICogd2lsbCBub3QgbW92ZSAoYnVkZ2UpIHdoZW4gb3RoZXIgaXRlbXMgYXJlIHJlb3JkZXJlZC5cbiAgICAgKi9cbiAgICB3b250QnVkZ2U/OiBib29sZWFuO1xuICB9XG4gIGludGVyZmFjZSBQYmxDb2x1bW5Hcm91cERlZmluaXRpb24ge1xuICAgIC8qKlxuICAgICAqIExvY2sgY29sdW1uIGluIHRoZSBncm91cCwgcHJldmVudGluZyB0aGUgZ3JvdXAgZnJvbSBzcGxpdHRpbmcuXG4gICAgICogU3BsaXR0aW5nIGlzIGJsb2NrIGFjdGl2ZWx5IChjb2x1bW4gZnJvbSB0aGUgZ3JvdXAgZHJhZ2dlZCBvdXRzaWRlKSBhbmQgcGFzc2l2ZWx5IChjb2x1bW4gb3V0c2lkZSBvZiB0aGUgZ3JvdXAgZHJhZ2dpbmcgaW50byB0aGUgZ3JvdXApLlxuICAgICAqL1xuICAgIGxvY2tDb2x1bW5zPzogYm9vbGVhbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0dyb3VwTG9ja0NvbnN0cmFpbnQodGhpczogUGJsQ29sdW1uLCBjb2x1bW46IFBibENvbHVtbik6IGJvb2xlYW4ge1xuICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuZ3JvdXBzKSB7XG4gICAgY29uc3QgZyA9IHRoaXMuZ3JvdXBTdG9yZS5maW5kKGlkKTtcbiAgICBpZiAoZyAmJiBnLmxvY2tDb2x1bW5zICYmICFjb2x1bW4uaXNJbkdyb3VwKGcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sUmVvcmRlckV4dGVuZEdyaWQoKTogdm9pZCB7XG4gIFBibENvbHVtbi5leHRlbmRQcm9wZXJ0eSgncmVvcmRlcicpO1xuICBQYmxDb2x1bW4uZXh0ZW5kUHJvcGVydHkoJ3dvbnRCdWRnZScpO1xuICBQYmxDb2x1bW5Hcm91cC5leHRlbmRQcm9wZXJ0eSgnbG9ja0NvbHVtbnMnKTtcblxuICBQYmxDb2x1bW4ucHJvdG90eXBlLmNoZWNrR3JvdXBMb2NrQ29uc3RyYWludCA9IGZ1bmN0aW9uICh0aGlzOiBQYmxDb2x1bW4sIGNvbHVtbjogUGJsQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNoZWNrR3JvdXBMb2NrQ29uc3RyYWludC5jYWxsKHRoaXMsIGNvbHVtbikgJiYgY2hlY2tHcm91cExvY2tDb25zdHJhaW50LmNhbGwoY29sdW1uLCB0aGlzKTtcbiAgfTtcbn1cblxuIl19
import { PblDropListRef } from '../core/drop-list-ref';
import { takeUntil } from 'rxjs/operators';
export const _PblDropListRef = () => { return PblDropListRef; };
export class PblRowDropListRef extends _PblDropListRef() {
    constructor() {
        super(...arguments);
        this.scrollDif = 0;
    }
    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {
        return super._getItemIndexFromPointerPosition(item, pointerX, pointerY - this.scrollDif, delta);
    }
    start() {
        super.start();
        this.scrollDif = 0;
        if (this.gridApi.grid.viewport.enabled) {
            const initialTop = this.gridApi.grid.viewport.measureScrollOffset();
            this.gridApi.grid.viewport.elementScrolled()
                .pipe(takeUntil(this.dropped))
                .subscribe(() => {
                this.scrollDif = this.gridApi.grid.viewport.measureScrollOffset() - initialTop;
            });
        }
    }
}
export function patchDropListRef(dropListRef, gridApi) {
    try {
        Object.setPrototypeOf(dropListRef, PblRowDropListRef.prototype);
    }
    catch (err) {
        dropListRef._getItemIndexFromPointerPosition = PblRowDropListRef.prototype._getItemIndexFromPointerPosition;
        dropListRef.start = PblRowDropListRef.prototype.start;
    }
    dropListRef.gridApi = gridApi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LWRyb3AtbGlzdC1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL2RyYWcvc3JjL2xpYi9kcmFnLWFuZC1kcm9wL3Jvdy9yb3ctZHJvcC1saXN0LXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBUTNDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxHQUFHLEVBQUUsR0FBRyxPQUFPLGNBQThDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFaEcsTUFBTSxPQUFPLGlCQUEyQixTQUFRLGVBQWUsRUFBRTtJQUFqRTs7UUFJVSxjQUFTLEdBQUcsQ0FBQyxDQUFDO0lBbUJ4QixDQUFDO0lBakJDLGdDQUFnQyxDQUFDLElBQXVCLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQixFQUFFLEtBQThCO1FBQzFILE9BQU8sS0FBSyxDQUFDLGdDQUFnQyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQUVELEtBQUs7UUFDSCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDdEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtpQkFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzdCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxVQUFVLENBQUM7WUFDakYsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7Q0FFRjtBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBVSxXQUFpRSxFQUFFLE9BQWdDO0lBQzNJLElBQUk7UUFDRixNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNqRTtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1gsV0FBbUIsQ0FBQyxnQ0FBZ0MsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZ0NBQWdDLENBQUM7UUFDckgsV0FBVyxDQUFDLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0tBQ3ZEO0lBRUEsV0FBNEMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ2xFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYmxOZ3JpZEV4dGVuc2lvbkFwaSB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuaW1wb3J0IHsgUGJsRHJvcExpc3RSZWYgfSBmcm9tICcuLi9jb3JlL2Ryb3AtbGlzdC1yZWYnO1xuaW1wb3J0IHsgUGJsTmdyaWRSb3dSZW9yZGVyUGx1Z2luRGlyZWN0aXZlIH0gZnJvbSAnLi9yb3ctcmVvcmRlci1wbHVnaW4nO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBfUGJsRHJvcExpc3RSZWYgPSBPbWl0PFBibERyb3BMaXN0UmVmPFBibE5ncmlkUm93UmVvcmRlclBsdWdpbkRpcmVjdGl2ZTxhbnk+PiwgJ19nZXRJdGVtSW5kZXhGcm9tUG9pbnRlclBvc2l0aW9uJyB8ICdzdGFydCc+ICYge1xuICBzdGFydCgpOiB2b2lkO1xuICBfZ2V0SXRlbUluZGV4RnJvbVBvaW50ZXJQb3NpdGlvbihpdGVtOiBQYmxSb3dEcm9wTGlzdFJlZiwgcG9pbnRlclg6IG51bWJlciwgcG9pbnRlclk6IG51bWJlciwgZGVsdGE/OiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9KTogbnVtYmVyXG59O1xuXG5leHBvcnQgY29uc3QgX1BibERyb3BMaXN0UmVmID0gKCkgPT4geyByZXR1cm4gUGJsRHJvcExpc3RSZWYgYXMgYW55IGFzIFR5cGU8X1BibERyb3BMaXN0UmVmPjsgfTtcblxuZXhwb3J0IGNsYXNzIFBibFJvd0Ryb3BMaXN0UmVmPFQgPSBhbnk+IGV4dGVuZHMgX1BibERyb3BMaXN0UmVmKCkge1xuXG4gIGdyaWRBcGk6IFBibE5ncmlkRXh0ZW5zaW9uQXBpPFQ+O1xuXG4gIHByaXZhdGUgc2Nyb2xsRGlmID0gMDtcblxuICBfZ2V0SXRlbUluZGV4RnJvbVBvaW50ZXJQb3NpdGlvbihpdGVtOiBQYmxSb3dEcm9wTGlzdFJlZiwgcG9pbnRlclg6IG51bWJlciwgcG9pbnRlclk6IG51bWJlciwgZGVsdGE/OiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9KTogbnVtYmVyIHtcbiAgICByZXR1cm4gc3VwZXIuX2dldEl0ZW1JbmRleEZyb21Qb2ludGVyUG9zaXRpb24oaXRlbSwgcG9pbnRlclgsIHBvaW50ZXJZIC0gdGhpcy5zY3JvbGxEaWYsIGRlbHRhKTtcbiAgfVxuXG4gIHN0YXJ0KCk6IHZvaWQge1xuICAgIHN1cGVyLnN0YXJ0KCk7XG4gICAgdGhpcy5zY3JvbGxEaWYgPSAwO1xuICAgIGlmICh0aGlzLmdyaWRBcGkuZ3JpZC52aWV3cG9ydC5lbmFibGVkKSB7XG4gICAgICBjb25zdCBpbml0aWFsVG9wID0gdGhpcy5ncmlkQXBpLmdyaWQudmlld3BvcnQubWVhc3VyZVNjcm9sbE9mZnNldCgpO1xuICAgICAgdGhpcy5ncmlkQXBpLmdyaWQudmlld3BvcnQuZWxlbWVudFNjcm9sbGVkKClcbiAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZHJvcHBlZCkpXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsRGlmID0gdGhpcy5ncmlkQXBpLmdyaWQudmlld3BvcnQubWVhc3VyZVNjcm9sbE9mZnNldCgpIC0gaW5pdGlhbFRvcDtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoRHJvcExpc3RSZWY8VCA9IGFueT4oZHJvcExpc3RSZWY6IFBibERyb3BMaXN0UmVmPFBibE5ncmlkUm93UmVvcmRlclBsdWdpbkRpcmVjdGl2ZTxUPj4sIGdyaWRBcGk6IFBibE5ncmlkRXh0ZW5zaW9uQXBpPFQ+KSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGRyb3BMaXN0UmVmLCBQYmxSb3dEcm9wTGlzdFJlZi5wcm90b3R5cGUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAoZHJvcExpc3RSZWYgYXMgYW55KS5fZ2V0SXRlbUluZGV4RnJvbVBvaW50ZXJQb3NpdGlvbiA9IFBibFJvd0Ryb3BMaXN0UmVmLnByb3RvdHlwZS5fZ2V0SXRlbUluZGV4RnJvbVBvaW50ZXJQb3NpdGlvbjtcbiAgICBkcm9wTGlzdFJlZi5zdGFydCA9IFBibFJvd0Ryb3BMaXN0UmVmLnByb3RvdHlwZS5zdGFydDtcbiAgfVxuXG4gIChkcm9wTGlzdFJlZiBhcyB1bmtub3duIGFzIFBibFJvd0Ryb3BMaXN0UmVmKS5ncmlkQXBpID0gZ3JpZEFwaTtcbn1cbiJdfQ==
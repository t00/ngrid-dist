import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CdkTableModule } from '@angular/cdk/table';
import { PblNgridModule, ngridPlugin, PblNgridPluginController } from '@pebula/ngrid';
import { PblNgridTargetEventsModule } from '@pebula/ngrid/target-events';
import './infinite-scroll-plugin'; // to make sure d.ts stay in published lib and so agumentation kicks in
import { PblNgridInfiniteScrollPlugin, PLUGIN_KEY } from './infinite-scroll-plugin';
import { PblNgridInfiniteVirtualRowRefDirective } from './infinite-virtual-row/directives';
import { PblNgridDefaultInfiniteVirtualRowComponent } from './default-infinite-virtual-row/default-infinite-virtual-row.component';
import { PblNgridInfiniteRowComponent } from './infinite-virtual-row/row';
import * as i0 from "@angular/core";
export class PblNgridInfiniteScrollModule {
    constructor() {
        PblNgridPluginController.onCreatedSafe(PblNgridInfiniteScrollModule, (grid, controller) => {
            if (controller && controller.hasAncestor(PblNgridInfiniteScrollModule)) {
                controller.createPlugin(PLUGIN_KEY);
            }
        });
    }
}
PblNgridInfiniteScrollModule.NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY, factory: 'create' }, PblNgridInfiniteScrollPlugin);
/** @nocollapse */ PblNgridInfiniteScrollModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridInfiniteScrollModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PblNgridInfiniteScrollModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridInfiniteScrollModule, declarations: [PblNgridInfiniteVirtualRowRefDirective, PblNgridInfiniteRowComponent, PblNgridDefaultInfiniteVirtualRowComponent], imports: [CommonModule, CdkTableModule, PblNgridModule, PblNgridTargetEventsModule], exports: [PblNgridInfiniteVirtualRowRefDirective, PblNgridInfiniteRowComponent] });
/** @nocollapse */ PblNgridInfiniteScrollModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridInfiniteScrollModule, imports: [[CommonModule, CdkTableModule, PblNgridModule, PblNgridTargetEventsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridInfiniteScrollModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CdkTableModule, PblNgridModule, PblNgridTargetEventsModule],
                    declarations: [PblNgridInfiniteVirtualRowRefDirective, PblNgridInfiniteRowComponent, PblNgridDefaultInfiniteVirtualRowComponent],
                    exports: [PblNgridInfiniteVirtualRowRefDirective, PblNgridInfiniteRowComponent],
                    // TODO(REFACTOR_REF 2): remove when ViewEngine is no longer supported by angular (V12 ???)
                    entryComponents: [PblNgridDefaultInfiniteVirtualRowComponent],
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1pbmZpbml0ZS1zY3JvbGwubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3JpZC9pbmZpbml0ZS1zY3JvbGwvc3JjL2xpYi9ncmlkLWluZmluaXRlLXNjcm9sbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXpFLE9BQU8sMEJBQTBCLENBQUMsQ0FBQyx1RUFBdUU7QUFDMUcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSwwQ0FBMEMsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBQ25JLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQVMxRSxNQUFNLE9BQU8sNEJBQTRCO0lBR3ZDO1FBQ0Usd0JBQXdCLENBQUMsYUFBYSxDQUNwQyw0QkFBNEIsRUFDNUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFO2dCQUN0RSxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDOztBQVhlLHlDQUFZLEdBQUcsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsNEJBQTRCLENBQUMsQ0FBQzs0SUFEckcsNEJBQTRCOzZJQUE1Qiw0QkFBNEIsaUJBTHZCLHNDQUFzQyxFQUFFLDRCQUE0QixFQUFFLDBDQUEwQyxhQURySCxZQUFZLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSwwQkFBMEIsYUFFeEUsc0NBQXNDLEVBQUUsNEJBQTRCOzZJQUlwRSw0QkFBNEIsWUFOOUIsQ0FBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSwwQkFBMEIsQ0FBRTsyRkFNMUUsNEJBQTRCO2tCQVB4QyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLDBCQUEwQixDQUFFO29CQUNyRixZQUFZLEVBQUUsQ0FBRSxzQ0FBc0MsRUFBRSw0QkFBNEIsRUFBRSwwQ0FBMEMsQ0FBRTtvQkFDbEksT0FBTyxFQUFFLENBQUUsc0NBQXNDLEVBQUUsNEJBQTRCLENBQUM7b0JBQ2hGLDJGQUEyRjtvQkFDM0YsZUFBZSxFQUFFLENBQUUsMENBQTBDLENBQUU7aUJBQ2hFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IENka1RhYmxlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RhYmxlJztcbmltcG9ydCB7IFBibE5ncmlkTW9kdWxlLCBuZ3JpZFBsdWdpbiwgUGJsTmdyaWRQbHVnaW5Db250cm9sbGVyIH0gZnJvbSAnQHBlYnVsYS9uZ3JpZCc7XG5pbXBvcnQgeyBQYmxOZ3JpZFRhcmdldEV2ZW50c01vZHVsZSB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQvdGFyZ2V0LWV2ZW50cyc7XG5cbmltcG9ydCAnLi9pbmZpbml0ZS1zY3JvbGwtcGx1Z2luJzsgLy8gdG8gbWFrZSBzdXJlIGQudHMgc3RheSBpbiBwdWJsaXNoZWQgbGliIGFuZCBzbyBhZ3VtZW50YXRpb24ga2lja3MgaW5cbmltcG9ydCB7IFBibE5ncmlkSW5maW5pdGVTY3JvbGxQbHVnaW4sIFBMVUdJTl9LRVkgfSBmcm9tICcuL2luZmluaXRlLXNjcm9sbC1wbHVnaW4nO1xuaW1wb3J0IHsgUGJsTmdyaWRJbmZpbml0ZVZpcnR1YWxSb3dSZWZEaXJlY3RpdmUgfSBmcm9tICcuL2luZmluaXRlLXZpcnR1YWwtcm93L2RpcmVjdGl2ZXMnO1xuaW1wb3J0IHsgUGJsTmdyaWREZWZhdWx0SW5maW5pdGVWaXJ0dWFsUm93Q29tcG9uZW50IH0gZnJvbSAnLi9kZWZhdWx0LWluZmluaXRlLXZpcnR1YWwtcm93L2RlZmF1bHQtaW5maW5pdGUtdmlydHVhbC1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IFBibE5ncmlkSW5maW5pdGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2luZmluaXRlLXZpcnR1YWwtcm93L3Jvdyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFsgQ29tbW9uTW9kdWxlLCBDZGtUYWJsZU1vZHVsZSwgUGJsTmdyaWRNb2R1bGUsIFBibE5ncmlkVGFyZ2V0RXZlbnRzTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogWyBQYmxOZ3JpZEluZmluaXRlVmlydHVhbFJvd1JlZkRpcmVjdGl2ZSwgUGJsTmdyaWRJbmZpbml0ZVJvd0NvbXBvbmVudCwgUGJsTmdyaWREZWZhdWx0SW5maW5pdGVWaXJ0dWFsUm93Q29tcG9uZW50IF0sXG4gIGV4cG9ydHM6IFsgUGJsTmdyaWRJbmZpbml0ZVZpcnR1YWxSb3dSZWZEaXJlY3RpdmUsIFBibE5ncmlkSW5maW5pdGVSb3dDb21wb25lbnRdLFxuICAvLyBUT0RPKFJFRkFDVE9SX1JFRiAyKTogcmVtb3ZlIHdoZW4gVmlld0VuZ2luZSBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGJ5IGFuZ3VsYXIgKFYxMiA/Pz8pXG4gIGVudHJ5Q29tcG9uZW50czogWyBQYmxOZ3JpZERlZmF1bHRJbmZpbml0ZVZpcnR1YWxSb3dDb21wb25lbnQgXSxcbn0pXG5leHBvcnQgY2xhc3MgUGJsTmdyaWRJbmZpbml0ZVNjcm9sbE1vZHVsZSB7XG4gIHN0YXRpYyByZWFkb25seSBOR1JJRF9QTFVHSU4gPSBuZ3JpZFBsdWdpbih7IGlkOiBQTFVHSU5fS0VZLCBmYWN0b3J5OiAnY3JlYXRlJyB9LCBQYmxOZ3JpZEluZmluaXRlU2Nyb2xsUGx1Z2luKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBQYmxOZ3JpZFBsdWdpbkNvbnRyb2xsZXIub25DcmVhdGVkU2FmZShcbiAgICAgIFBibE5ncmlkSW5maW5pdGVTY3JvbGxNb2R1bGUsXG4gICAgICAoZ3JpZCwgY29udHJvbGxlcikgPT4ge1xuICAgICAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLmhhc0FuY2VzdG9yKFBibE5ncmlkSW5maW5pdGVTY3JvbGxNb2R1bGUpKSB7XG4gICAgICAgICAgY29udHJvbGxlci5jcmVhdGVQbHVnaW4oUExVR0lOX0tFWSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgfVxufVxuIl19
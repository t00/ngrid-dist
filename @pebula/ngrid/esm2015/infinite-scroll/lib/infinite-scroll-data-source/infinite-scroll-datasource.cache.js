import { createCacheAdapter } from './caching';
function normalizeCacheOptions(options) {
    if (!options) {
        options = { type: 'noOpCache' };
    }
    return options;
}
export class PblInfiniteScrollDataSourceCache {
    constructor(context, options) {
        this.context = context;
        this.cacheAdapter = createCacheAdapter(context, normalizeCacheOptions(options));
        this.setCacheSize(300);
    }
    get maxSize() { return this.cacheAdapter.maxSize; }
    get size() { return this.cacheAdapter.size; }
    get empty() { return this.cacheAdapter.empty; }
    setCacheSize(maxSize) {
        this.cacheAdapter.setCacheSize(maxSize);
    }
    matchNewBlock() {
        const ds = this.context.getDataSource();
        const totalLength = this.context.totalLength;
        const renderEnd = ds.renderStart + ds.renderLength;
        const start = ds.renderStart;
        const end = totalLength ? Math.min(renderEnd, totalLength) : renderEnd;
        return this.cacheAdapter.createBlock(start, end, totalLength);
    }
    createInitialBlock() {
        const ds = this.context.getDataSource();
        const totalLength = this.context.totalLength;
        const renderEnd = ds.renderLength;
        const start = 0;
        const end = totalLength ? Math.min(renderEnd, totalLength) : renderEnd;
        return this.cacheAdapter.createBlock(start, end, totalLength);
    }
    update(startRow, endRow, direction) {
        return this.cacheAdapter.update(startRow, endRow, direction);
    }
    clear() {
        return this.cacheAdapter.clear();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLWRhdGFzb3VyY2UuY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25ncmlkL2luZmluaXRlLXNjcm9sbC9zcmMvbGliL2luZmluaXRlLXNjcm9sbC1kYXRhLXNvdXJjZS9pbmZpbml0ZS1zY3JvbGwtZGF0YXNvdXJjZS5jYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQW9DLE1BQU0sV0FBVyxDQUFDO0FBR2pGLFNBQVMscUJBQXFCLENBQUMsT0FBdUM7SUFDcEUsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQztLQUNqQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLE9BQU8sZ0NBQWdDO0lBTzNDLFlBQTZCLE9BQTZDLEVBQUUsT0FBdUM7UUFBdEYsWUFBTyxHQUFQLE9BQU8sQ0FBc0M7UUFDeEUsSUFBSSxDQUFDLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFURCxJQUFJLE9BQU8sS0FBYSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMzRCxJQUFJLElBQUksS0FBYSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRCxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQVMvQyxZQUFZLENBQUMsT0FBZTtRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFFN0MsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ25ELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDN0IsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDN0MsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQztRQUNsQyxNQUFNLEtBQUssR0FBRSxDQUFDLENBQUM7UUFDZixNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsU0FBcUI7UUFDNUQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ25DLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBibEluZmluaXRlU2Nyb2xsQ2FjaGVPcHRpb25zIH0gZnJvbSAnLi9pbmZpbml0ZS1zY3JvbGwtZGF0YXNvdXJjZS50eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVDYWNoZUFkYXB0ZXIsIFBibE5ncmlkQ2FjaGVBZGFwdGVyLCBTdGFydE9yRW5kIH0gZnJvbSAnLi9jYWNoaW5nJztcbmltcG9ydCB7IFBibEluZmluaXRlU2Nyb2xsRFNDb250ZXh0IH0gZnJvbSAnLi9pbmZpbml0ZS1zY3JvbGwtZGF0YXNvdXJjZS5jb250ZXh0JztcblxuZnVuY3Rpb24gbm9ybWFsaXplQ2FjaGVPcHRpb25zKG9wdGlvbnM/OiBQYmxJbmZpbml0ZVNjcm9sbENhY2hlT3B0aW9ucyk6IFBibEluZmluaXRlU2Nyb2xsQ2FjaGVPcHRpb25zIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHsgdHlwZTogJ25vT3BDYWNoZScgfTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGNsYXNzIFBibEluZmluaXRlU2Nyb2xsRGF0YVNvdXJjZUNhY2hlPFQsIFREYXRhID0gYW55PiB7XG4gIGdldCBtYXhTaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmNhY2hlQWRhcHRlci5tYXhTaXplOyB9XG4gIGdldCBzaXplKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmNhY2hlQWRhcHRlci5zaXplOyB9XG4gIGdldCBlbXB0eSgpIHsgcmV0dXJuIHRoaXMuY2FjaGVBZGFwdGVyLmVtcHR5OyB9XG5cbiAgcHJpdmF0ZSBjYWNoZUFkYXB0ZXI6IFBibE5ncmlkQ2FjaGVBZGFwdGVyPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb250ZXh0OiBQYmxJbmZpbml0ZVNjcm9sbERTQ29udGV4dDxULCBURGF0YT4sIG9wdGlvbnM/OiBQYmxJbmZpbml0ZVNjcm9sbENhY2hlT3B0aW9ucykge1xuICAgIHRoaXMuY2FjaGVBZGFwdGVyID0gY3JlYXRlQ2FjaGVBZGFwdGVyKGNvbnRleHQsIG5vcm1hbGl6ZUNhY2hlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgdGhpcy5zZXRDYWNoZVNpemUoMzAwKTtcbiAgfVxuXG4gIHNldENhY2hlU2l6ZShtYXhTaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLmNhY2hlQWRhcHRlci5zZXRDYWNoZVNpemUobWF4U2l6ZSk7XG4gIH1cblxuICBtYXRjaE5ld0Jsb2NrKCkge1xuICAgIGNvbnN0IGRzID0gdGhpcy5jb250ZXh0LmdldERhdGFTb3VyY2UoKTtcbiAgICBjb25zdCB0b3RhbExlbmd0aCA9IHRoaXMuY29udGV4dC50b3RhbExlbmd0aDtcblxuICAgIGNvbnN0IHJlbmRlckVuZCA9IGRzLnJlbmRlclN0YXJ0ICsgZHMucmVuZGVyTGVuZ3RoO1xuICAgIGNvbnN0IHN0YXJ0ID0gZHMucmVuZGVyU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdG90YWxMZW5ndGggPyBNYXRoLm1pbihyZW5kZXJFbmQsIHRvdGFsTGVuZ3RoKSA6IHJlbmRlckVuZDtcbiAgICByZXR1cm4gdGhpcy5jYWNoZUFkYXB0ZXIuY3JlYXRlQmxvY2soc3RhcnQsIGVuZCwgdG90YWxMZW5ndGgpO1xuICB9XG5cbiAgY3JlYXRlSW5pdGlhbEJsb2NrKCkge1xuICAgIGNvbnN0IGRzID0gdGhpcy5jb250ZXh0LmdldERhdGFTb3VyY2UoKTtcbiAgICBjb25zdCB0b3RhbExlbmd0aCA9IHRoaXMuY29udGV4dC50b3RhbExlbmd0aDtcbiAgICBjb25zdCByZW5kZXJFbmQgPSBkcy5yZW5kZXJMZW5ndGg7XG4gICAgY29uc3Qgc3RhcnQgPTA7XG4gICAgY29uc3QgZW5kID0gdG90YWxMZW5ndGggPyBNYXRoLm1pbihyZW5kZXJFbmQsIHRvdGFsTGVuZ3RoKSA6IHJlbmRlckVuZDtcbiAgICByZXR1cm4gdGhpcy5jYWNoZUFkYXB0ZXIuY3JlYXRlQmxvY2soc3RhcnQsIGVuZCwgdG90YWxMZW5ndGgpO1xuICB9XG5cbiAgdXBkYXRlKHN0YXJ0Um93OiBudW1iZXIsIGVuZFJvdzogbnVtYmVyLCBkaXJlY3Rpb246IFN0YXJ0T3JFbmQpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZUFkYXB0ZXIudXBkYXRlKHN0YXJ0Um93LCBlbmRSb3csIGRpcmVjdGlvbik7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZUFkYXB0ZXIuY2xlYXIoKTtcbiAgfVxufVxuIl19
import { BehaviorSubject } from 'rxjs';
export class PblTokenPaginator {
    constructor() {
        this.kind = 'token';
        this._perPage = 10;
        this._total = 0;
        this.onChange$ = new BehaviorSubject({ page: [null, null] });
        this.onChange = this.onChange$.asObservable();
        this.reset();
    }
    get perPage() { return this._perPage; }
    set perPage(value) {
        if (value < 1) {
            throw new Error(`Invalid total size value ${value}`);
        }
        if (this._perPage !== value) {
            const changes = { perPage: [this._perPage, this._perPage = value] };
            this.emit(changes);
        }
    }
    get page() { return this._page; }
    set page(value) {
        if (this._page !== value) {
            const idx = this._tokens.indexOf(value);
            if (idx === -1) {
                throw new Error(`Invalid page token ${value}`);
            }
            this._cursor = idx;
            const prev = this._page;
            this._page = value;
            this.emit({ page: [prev, value] });
        }
    }
    get total() { return this._total; }
    set total(value) {
        const changes = { total: [this._total, this._total = value] };
        this.emit(changes);
    }
    get totalPages() {
        return this._tokens.length;
    }
    get range() {
        if (!this._range) {
            const start = (this._cursor) * this.perPage;
            const end = Math.min(this._total, start + this.perPage);
            this._range = this.noCacheMode
                ? [0, end - start]
                : [start, end];
        }
        return this._range;
    }
    reset() {
        this._tokens = [null];
        this._cursor = 0;
        this._total = 0;
        this.page = null;
    }
    canMove(value) {
        return this._tokens.indexOf(value) > -1;
    }
    hasNext() { return this._cursor < this._tokens.length - 1; }
    hasPrev() { return this._cursor > 0; }
    move(value) { this.page = value; }
    nextPage() { this.page = this._tokens[++this._cursor]; }
    prevPage() { this.page = this._tokens[--this._cursor]; }
    addNext(value) {
        const nextPointer = this._cursor + 1;
        // if next pointer is not like what we got, set it and delete all after (invalidate them)
        if (this._tokens[nextPointer] !== value) {
            this._tokens[nextPointer] = value;
            this._tokens.splice(nextPointer + 1);
        }
    }
    emit(changes) {
        this._range = undefined;
        if (this.queuedChanges) {
            Object.assign(this.queuedChanges, changes);
        }
        else {
            this.queuedChanges = changes;
            setTimeout(() => {
                this.queuedChanges = undefined;
                this.onChange$.next(changes);
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
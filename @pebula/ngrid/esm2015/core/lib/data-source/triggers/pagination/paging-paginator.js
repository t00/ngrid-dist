import { BehaviorSubject } from 'rxjs';
export class PblPagingPaginator {
    constructor() {
        this.kind = 'pageNumber';
        this._total = 0;
        this._perPage = 10;
        this._page = 1;
        this._totalPages = 0;
        this.onChange$ = new BehaviorSubject({ page: [null, 1] });
        this.onChange = this.onChange$.asObservable();
    }
    get perPage() { return this._perPage; }
    set perPage(value) {
        if (value < 1) {
            throw new Error(`Invalid total size value ${value}`);
        }
        if (this._perPage !== value) {
            const changes = { perPage: [this._perPage, this._perPage = value] };
            const prev = this._page;
            this.calcPages();
            if (prev !== this._page) {
                changes.page = [prev, this._page];
            }
            this.emit(changes);
        }
    }
    /**
     * Get / Set the current page
     */
    get page() { return this._page; }
    set page(value) {
        if (value < 0 || value > this._totalPages) {
            throw new Error(`Invalid page index ${value}`);
        }
        if (this._page !== value) {
            const prev = this._page;
            this._page = value;
            this.emit({ page: [prev, value] });
        }
    }
    get total() { return this._total; }
    set total(value) {
        if (value < 0) {
            throw new Error(`Invalid total size value ${value}`);
        }
        if (this._total !== value) {
            const changes = { total: [this._total, this._total = value] };
            const prev = this._page;
            this.calcPages();
            if (prev !== this._page) {
                changes.page = [prev, this._page];
            }
            this.emit(changes);
        }
    }
    /**
     * The amount of pages in this paginator
     */
    get totalPages() {
        return this._totalPages;
    }
    get range() {
        if (!this._range) {
            const start = (this.page - 1) * this.perPage;
            const end = Math.min(this._total, start + this.perPage);
            this._range = this.noCacheMode
                ? [0, end - start]
                : [start, end];
        }
        return this._range;
    }
    canMove(value) {
        const p = this._page + value;
        return p >= 1 && p <= this.totalPages;
    }
    hasNext() { return this.canMove(1); }
    hasPrev() { return this.canMove(-1); }
    move(value) { this.page = this._page + value; }
    nextPage() { this.move(1); }
    prevPage() { this.move(-1); }
    reset() {
        this.page = 1;
    }
    /**
     * Calculate the number of pages.
     * returns true if the current page has changed due to calculation. (current page \> new pages value)
     */
    calcPages() {
        this._totalPages = Math.ceil(this._total / this.perPage);
        if (this._totalPages > 0 && this._page > this._totalPages) {
            this.page = this._totalPages;
        }
    }
    emit(changes) {
        this._range = undefined;
        if (this.queuedChanges) {
            Object.assign(this.queuedChanges, changes);
        }
        else {
            this.queuedChanges = changes;
            setTimeout(() => {
                this.queuedChanges = undefined;
                this.onChange$.next(changes);
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,
import { getValue } from '../../../utils/column';
export function createFilter(value, columns) {
    return value === undefined
        ? undefined
        : {
            columns,
            type: typeof value === 'function' ? 'predicate' : 'value',
            filter: value
        };
}
export function filter(rawData, filter) {
    if (!filter || !rawData || rawData.length === 0) {
        return rawData;
    }
    else {
        const cols = filter.columns;
        if (filter.type === 'predicate') {
            const value = filter.filter;
            return rawData.filter(v => value(v, cols));
        }
        else if (filter.type === 'value') {
            const value = typeof filter.filter.toLowerCase === 'function' ? filter.filter.toLowerCase() : filter.filter;
            return rawData.filter(row => cols.some(col => {
                const predicate = col.filter || genericColumnPredicate;
                return predicate(col.filter ? filter.filter : value, getValue(col, row), row, col);
            }));
        }
    }
    return rawData;
}
/**
 * A generic column predicate that compares the inclusion (text) of the value in the column value.
 */
export const genericColumnPredicate = (filterValue, colValue, row, col) => {
    return colValue && colValue.toString().toLowerCase().includes(filterValue);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3JpZC9jb3JlL3NyYy9saWIvZGF0YS1zb3VyY2UvdHJpZ2dlcnMvZmlsdGVyL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHakQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUE0QixFQUFFLE9BQThCO0lBQ3ZGLE9BQU8sS0FBSyxLQUFLLFNBQVM7UUFDeEIsQ0FBQyxDQUFDLFNBQVM7UUFDWCxDQUFDLENBQUM7WUFDQSxPQUFPO1lBQ1AsSUFBSSxFQUFFLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ3pELE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFJLE9BQVksRUFBRSxNQUF3QjtJQUM5RCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQy9DLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO1NBQU07UUFDTCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDL0IsTUFBTSxLQUFLLEdBQTZCLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDdEQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBRSxDQUFDO1NBQzlDO2FBQU0sSUFBSyxNQUFNLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRztZQUNwQyxNQUFNLEtBQUssR0FBRyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1RyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLHNCQUFzQixDQUFDO2dCQUN2RCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckYsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNMO0tBQ0Y7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBOEIsQ0FBQyxXQUFnQixFQUFFLFFBQWEsRUFBRSxHQUFTLEVBQUUsR0FBeUIsRUFBVyxFQUFFO0lBQ2xKLE9BQU8sUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGJsQ29sdW1uRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9jb2x1bW4nO1xuaW1wb3J0IHsgZ2V0VmFsdWUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2x1bW4nO1xuaW1wb3J0IHsgRGF0YVNvdXJjZUZpbHRlciwgRGF0YVNvdXJjZUZpbHRlclRva2VuLCBEYXRhU291cmNlUHJlZGljYXRlLCBEYXRhU291cmNlQ29sdW1uUHJlZGljYXRlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWx0ZXIodmFsdWU6IERhdGFTb3VyY2VGaWx0ZXJUb2tlbiwgY29sdW1uczogUGJsQ29sdW1uRGVmaW5pdGlvbltdKTogRGF0YVNvdXJjZUZpbHRlciB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHtcbiAgICAgIGNvbHVtbnMsXG4gICAgICB0eXBlOiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyAncHJlZGljYXRlJyA6ICd2YWx1ZScsXG4gICAgICBmaWx0ZXI6IHZhbHVlXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcjxUPihyYXdEYXRhOiBUW10sIGZpbHRlcjogRGF0YVNvdXJjZUZpbHRlcik6IFRbXSB7XG4gIGlmICghZmlsdGVyIHx8ICFyYXdEYXRhIHx8IHJhd0RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHJhd0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29scyA9IGZpbHRlci5jb2x1bW5zO1xuICAgIGlmIChmaWx0ZXIudHlwZSA9PT0gJ3ByZWRpY2F0ZScpIHtcbiAgICAgIGNvbnN0IHZhbHVlOiBEYXRhU291cmNlUHJlZGljYXRlID0gPGFueT5maWx0ZXIuZmlsdGVyO1xuICAgICAgcmV0dXJuIHJhd0RhdGEuZmlsdGVyKCB2ID0+IHZhbHVlKHYsIGNvbHMpICk7XG4gICAgfSBlbHNlIGlmICggZmlsdGVyLnR5cGUgPT09ICd2YWx1ZScgKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBmaWx0ZXIuZmlsdGVyLnRvTG93ZXJDYXNlID09PSAnZnVuY3Rpb24nID8gZmlsdGVyLmZpbHRlci50b0xvd2VyQ2FzZSgpIDogZmlsdGVyLmZpbHRlcjtcbiAgICAgIHJldHVybiByYXdEYXRhLmZpbHRlciggcm93ID0+IGNvbHMuc29tZSggY29sID0+IHtcbiAgICAgICAgY29uc3QgcHJlZGljYXRlID0gY29sLmZpbHRlciB8fCBnZW5lcmljQ29sdW1uUHJlZGljYXRlO1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKGNvbC5maWx0ZXIgPyBmaWx0ZXIuZmlsdGVyIDogdmFsdWUsIGdldFZhbHVlKGNvbCwgcm93KSwgcm93LCBjb2wpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmF3RGF0YTtcbn1cblxuLyoqXG4gKiBBIGdlbmVyaWMgY29sdW1uIHByZWRpY2F0ZSB0aGF0IGNvbXBhcmVzIHRoZSBpbmNsdXNpb24gKHRleHQpIG9mIHRoZSB2YWx1ZSBpbiB0aGUgY29sdW1uIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJpY0NvbHVtblByZWRpY2F0ZTogRGF0YVNvdXJjZUNvbHVtblByZWRpY2F0ZSA9IChmaWx0ZXJWYWx1ZTogYW55LCBjb2xWYWx1ZTogYW55LCByb3c/OiBhbnksIGNvbD86IFBibENvbHVtbkRlZmluaXRpb24pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGNvbFZhbHVlICYmIGNvbFZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJWYWx1ZSk7XG59XG4iXX0=
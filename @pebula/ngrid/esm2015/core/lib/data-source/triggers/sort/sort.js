import { getValue } from '../../../utils/column';
/**
 * Apply sorting on a collection, based on column and sort definitions.
 * If the sort definition doesn't have a sorting function the default sorter is used.
 */
export function applySort(column, sort, data) {
    if (!sort || !sort.order) {
        return data;
    }
    const sortFn = typeof sort.sortFn === 'function'
        ? sort.sortFn
        : typeof column.sort === 'function'
            ? column.sort
            : defaultSorter;
    return column && data
        ? sortFn(column, sort, data.slice())
        : data || [];
}
function defaultSorter(column, sort, data) {
    return data.sort((a, b) => {
        const directionMultiplier = (sort.order === 'asc' ? 1 : -1);
        let valueA = getValue(column, a);
        let valueB = getValue(column, b);
        valueA = isNaN(+valueA) ? valueA : +valueA;
        valueB = isNaN(+valueB) ? valueB : +valueB;
        if (valueA && valueB) {
            return (valueA < valueB ? -1 : valueA === valueB ? 0 : 1) * directionMultiplier;
        }
        return (valueA ? 1 : -1) * directionMultiplier;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmdyaWQvY29yZS9zcmMvbGliL2RhdGEtc291cmNlL3RyaWdnZXJzL3NvcnQvc29ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHakQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBSSxNQUEyQixFQUFFLElBQTRCLEVBQUUsSUFBUztJQUMvRixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsTUFBTSxNQUFNLEdBQXNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVO1FBQ2pFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUNiLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVTtZQUNqQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUk7WUFDYixDQUFDLENBQUMsYUFBYSxDQUNsQjtJQUVELE9BQU8sTUFBTSxJQUFJLElBQUk7UUFDbkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FDYjtBQUNILENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBSSxNQUEyQixFQUFFLElBQThCLEVBQUUsSUFBUztJQUM5RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDeEIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWpDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUMzQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFM0MsSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztTQUNqRjtRQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYmxDb2x1bW5EZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2NvbHVtbic7XG5pbXBvcnQgeyBnZXRWYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbHVtbic7XG5pbXBvcnQgeyBQYmxOZ3JpZFNvcnREZWZpbml0aW9uLCBQYmxOZ3JpZFNvcnRJbnN0cnVjdGlvbnMsIFBibE5ncmlkU29ydGVyIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQXBwbHkgc29ydGluZyBvbiBhIGNvbGxlY3Rpb24sIGJhc2VkIG9uIGNvbHVtbiBhbmQgc29ydCBkZWZpbml0aW9ucy5cbiAqIElmIHRoZSBzb3J0IGRlZmluaXRpb24gZG9lc24ndCBoYXZlIGEgc29ydGluZyBmdW5jdGlvbiB0aGUgZGVmYXVsdCBzb3J0ZXIgaXMgdXNlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U29ydDxUPihjb2x1bW46IFBibENvbHVtbkRlZmluaXRpb24sIHNvcnQ6IFBibE5ncmlkU29ydERlZmluaXRpb24sIGRhdGE6IFRbXSk6IFRbXSB7XG4gIGlmICghc29ydCB8fCAhc29ydC5vcmRlcikge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3Qgc29ydEZuOiBQYmxOZ3JpZFNvcnRlcjxUPiA9IHR5cGVvZiBzb3J0LnNvcnRGbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc29ydC5zb3J0Rm5cbiAgICA6IHR5cGVvZiBjb2x1bW4uc29ydCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBjb2x1bW4uc29ydFxuICAgICAgOiBkZWZhdWx0U29ydGVyXG4gIDtcblxuICByZXR1cm4gY29sdW1uICYmIGRhdGFcbiAgICA/IHNvcnRGbihjb2x1bW4sIHNvcnQsIGRhdGEuc2xpY2UoKSlcbiAgICA6IGRhdGEgfHwgW11cbiAgO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U29ydGVyPFQ+KGNvbHVtbjogUGJsQ29sdW1uRGVmaW5pdGlvbiwgc29ydDogUGJsTmdyaWRTb3J0SW5zdHJ1Y3Rpb25zLCBkYXRhOiBUW10pOiBUW10ge1xuICByZXR1cm4gZGF0YS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgZGlyZWN0aW9uTXVsdGlwbGllciA9IChzb3J0Lm9yZGVyID09PSAnYXNjJyA/IDEgOiAtMSk7XG4gICAgbGV0IHZhbHVlQSA9IGdldFZhbHVlKGNvbHVtbiwgYSk7XG4gICAgbGV0IHZhbHVlQiA9IGdldFZhbHVlKGNvbHVtbiwgYik7XG5cbiAgICB2YWx1ZUEgPSBpc05hTigrdmFsdWVBKSA/IHZhbHVlQSA6ICt2YWx1ZUE7XG4gICAgdmFsdWVCID0gaXNOYU4oK3ZhbHVlQikgPyB2YWx1ZUIgOiArdmFsdWVCO1xuXG4gICAgaWYgKHZhbHVlQSAmJiB2YWx1ZUIpIHtcbiAgICAgIHJldHVybiAodmFsdWVBIDwgdmFsdWVCID8gLTEgOiB2YWx1ZUEgPT09IHZhbHVlQiA/IDAgOiAxKSAqIGRpcmVjdGlvbk11bHRpcGxpZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuICh2YWx1ZUEgPyAxIDogLTEpICogZGlyZWN0aW9uTXVsdGlwbGllcjtcbiAgfSk7XG59XG4iXX0=
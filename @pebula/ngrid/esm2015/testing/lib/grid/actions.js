import { __awaiter } from "tslib";
import { PblNgridHarness } from './ngrid-component-harness';
export var ScrollToLocation;
(function (ScrollToLocation) {
    ScrollToLocation[ScrollToLocation["VerticalStart"] = 0] = "VerticalStart";
    ScrollToLocation[ScrollToLocation["VerticalEnd"] = 1] = "VerticalEnd";
    ScrollToLocation[ScrollToLocation["HorizontalStart"] = 2] = "HorizontalStart";
    ScrollToLocation[ScrollToLocation["HorizontalEnd"] = 3] = "HorizontalEnd";
})(ScrollToLocation || (ScrollToLocation = {}));
class PblNgridHarnessActions extends PblNgridHarness {
    waitForRenderChanged(fn, timeoutMs = 500, frequency = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const rowIdentities = yield this.getDataRows().then(rows => rows.map(r => r.getRowIdentity())).then(rows => Promise.all(rows));
            const result = typeof fn === 'function' ? yield fn() : undefined;
            frequency = Math.max(frequency, 1);
            timeoutMs = Math.max(timeoutMs, 0);
            const interval = Math.floor(timeoutMs / frequency);
            const wait = () => new Promise(res => { setTimeout(res, interval); });
            while (frequency > 0) {
                yield wait();
                const newRows = yield this.getDataRows();
                if (rowIdentities.length !== newRows.length) {
                    return;
                }
                for (let i = 0; i < rowIdentities.length; i++) {
                    const newIdentity = newRows[i] ? (yield newRows[i].getRowIdentity()) : null;
                    if (newIdentity !== rowIdentities[i]) {
                        return;
                    }
                }
                frequency -= 1;
            }
            return result;
        });
    }
    getColumnIds() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getColumnHeaderRow()
                .then(header => header.getCells())
                .then(columns => Promise.all(columns.map(c => c.getColumnId())));
        });
    }
    getViewPortData() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.forceStabilize();
            return this.getDataRows()
                .then(rows => rows.map(r => r.getCells().then(cells => cells.map(c => c.getText()))))
                .then(rows => Promise.all(rows.map(pRow => pRow.then(row => Promise.all(row)))));
        });
    }
    scrollTo(x, y) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: support protractor env
            scrollDom(yield this.locatorFor('pbl-cdk-virtual-scroll-viewport')(), x, y);
        });
    }
    scrollToLocation(location) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: support protractor env
            const viewPort = yield this.locatorFor('pbl-cdk-virtual-scroll-viewport')();
            const element = viewPort.element;
            let x = element.scrollLeft;
            let y = element.scrollTop;
            switch (location) {
                case ScrollToLocation.HorizontalStart:
                    x = 0;
                    break;
                case ScrollToLocation.HorizontalEnd:
                    x = element.scrollWidth;
                    break;
                case ScrollToLocation.VerticalStart:
                    y = 0;
                    break;
                case ScrollToLocation.VerticalEnd:
                    y = element.scrollHeight;
                    break;
            }
            scrollDom(viewPort, x, y);
        });
    }
}
function scrollDom(viewPort, x, y) {
    return __awaiter(this, void 0, void 0, function* () {
        const element = viewPort.element;
        element.scroll(x, y);
    });
}
const keys = Object.getOwnPropertyNames(PblNgridHarnessActions.prototype);
for (const key of keys) {
    PblNgridHarness.register(key, PblNgridHarnessActions.prototype[key]);
}
//# sourceMappingURL=data:application/json;base64,
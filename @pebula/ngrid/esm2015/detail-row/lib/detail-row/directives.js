// tslint:disable:use-host-property-decorator
import { Directive, TemplateRef, Input, } from '@angular/core';
import { PblNgridRegistryService, PblNgridSingleTemplateRegistry, PblNgridRowDef } from '@pebula/ngrid';
import * as i0 from "@angular/core";
import * as i1 from "@pebula/ngrid";
/**
 * Marks the element as the display element for the detail row itself.
 */
export class PblNgridDetailRowDefDirective extends PblNgridSingleTemplateRegistry {
    constructor(tRef, registry) {
        super(tRef, registry);
        this.kind = 'detailRow';
    }
}
/** @nocollapse */ PblNgridDetailRowDefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridDetailRowDefDirective, deps: [{ token: i0.TemplateRef }, { token: i1.PblNgridRegistryService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PblNgridDetailRowDefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.0", type: PblNgridDetailRowDefDirective, selector: "[pblNgridDetailRowDef]", inputs: { hasAnimation: ["pblNgridDetailRowDefHasAnimation", "hasAnimation"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridDetailRowDefDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[pblNgridDetailRowDef]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i1.PblNgridRegistryService }]; }, propDecorators: { hasAnimation: [{
                type: Input,
                args: ['pblNgridDetailRowDefHasAnimation']
            }] } });
export class PblNgridDetailRowParentRefDirective extends PblNgridRowDef {
    ngOnInit() {
        this.registry.setSingle('detailRowParent', this);
    }
    ngOnDestroy() {
        if (this.registry.getSingle('detailRowParent') === this) {
            this.registry.setSingle('detailRowParent', undefined);
        }
    }
}
/** @nocollapse */ PblNgridDetailRowParentRefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridDetailRowParentRefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PblNgridDetailRowParentRefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.0", type: PblNgridDetailRowParentRefDirective, selector: "[pblNgridDetailRowParentRef]", inputs: { columns: ["pblNgridDetailRowParentRef", "columns"], when: ["pblNgridDetailRowParentRefWhen", "when"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.0", ngImport: i0, type: PblNgridDetailRowParentRefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[pblNgridDetailRowParentRef]',
                    inputs: ['columns: pblNgridDetailRowParentRef', 'when: pblNgridDetailRowParentRefWhen'],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
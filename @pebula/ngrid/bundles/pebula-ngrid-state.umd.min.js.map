{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@pebula/ngrid/state/lib/core/state-visor.ts","ng://@pebula/ngrid/state/lib/core/persistance/local-storage.ts","ng://@pebula/ngrid/state/lib/core/handling/base.ts","ng://@pebula/ngrid/state/lib/core/identification/index.ts","ng://@pebula/ngrid/state/lib/core/utils.ts","ng://@pebula/ngrid/state/lib/core/state.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/grid-primitives/index.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-def/index.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-def/children.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-order/index.ts","ng://@pebula/ngrid/state/lib/presets.ts","ng://@pebula/ngrid/state/lib/state-plugin.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/_register.ts","ng://@pebula/ngrid/state/lib/ngrid-state.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","StateVisor","rootChunkSections","Map","chunkHandlers","get","_instance","registerRootChunkSection","chunkId","config","has","set","registerChunkHandlerDefinition","chunkHandlerDefs","handlersForGroup","getRootSections","from","entries","getDefinitionsForSection","stateVisor","PblNgridLocalStoragePersistAdapter","save","id","state","store","loadGlobalStateStore","__metadata__","updatedAt","Date","toISOString","saveGlobalStateStore","Promise","resolve","err","reject","load","exists","raw","localStorage","getItem","globalStateKey","JSON","parse","setItem","stringify","PblNgridStateChunkHandlerHost","keys","Set","rKeys","handleKeys","_i","keys_1","keys_1_1","k","add","requiredKeys","keys_2","keys_2_1","serialize","fn","sFn","deserialize","dFn","register","size","Error","values","createStateChunkHandler","section","PblNgridIdAttributeIdentResolver","resolveId","ctx","grid","options","identResolver","createChunkSectionContext","def","keyPredicate","stateKeyPredicateFactory","_b","_c","key","indexOf","normalizeOptions","mode","persistenceAdapter","opt","strategy","getExtApi","controller","PblNgridPluginController","find","extApi","createChunkContext","sectionContext","chunkConfig","source","sourceMatcher","runChildChunk","childChunkId","data","childContext","defs","action","defs_1","defs_1_1","rootPredicate","filter","include","exclude","chunkFilter_1","isArray","hasState","then","U.normalizeOptions","U.resolveId","saveState","context","U.createChunkSectionContext","_d","_e","U.stateKeyPredicateFactory","sectionState","stateMatcher","chunkContext","U.createChunkContext","e_2","U.serialize","loadState","defs_2","e_4","defs_2_1","U.deserialize","registerGridHandlers","stateValue","runChildChunksForRowMetaColumns","columns","stateColumns","columns_1","columns_1_1","col","c","runChildChunkForDataMetaRows","columnStore","table","kind","src","dest","active","headerColumnDef","footerColumnDef","runChildChunksForRowDataColumns","colState","pblColumn","cols","tCol","utils","isPblColumn","orgProp","prop","activeColumn","columnApi","findColumn","registerColumnDefHandlers","header","footer","headerGroup","rows","row","metaColumnIds","isGroup","rowDef","rowIndex","source_1","source_1_1","headerGroupSource","headerGroupSource_1","headerGroupSource_1_1","metaRowsState","rowState","activeColStore","e_7","metaRowsState_1","metaRowsState_1_1","updateWidth","typeValue","stateTypeDef","name","registerColumnOrderHandlers","columnOrder","visibleColumnIds","slice","lastMove","len","column","anchor","moveColumn","updateGroups","avoidRedraw","userSessionPref","basedOn","resultFilter","dataColumn","basedOn_1","basedOn_1_1","mergeStateChunkKeyFilter","mergeHead","mergeTail","tailValue","tailHead","PblNgridStatePlugin","injector","pluginCtrl","_this","_events","Subject","_removePlugin","setPlugin","afterLoadState","pipe","phase","position","mapTo","undefined","afterSaveState","onError","map","events","take","subscribe","event","initialLoadOptions","loadOptions","_load","skip","debounceTime","wait","complete","create","saveOptions","catch","destroy","PblNgridStatePluginDirective","_super","__","constructor","__extends","ngOnDestroy","Directive","args","selector","outputs","PblNgridComponent","Injector","Input","registerBuiltInHandlers","PblNgridStatePluginModule","parentModule","configService","created","targetEventsConfig","autoEnable","pluginCtrl_1","subscription_1","evt","hasPlugin","instance","createPlugin","autoEnableOptions","unsubscribe","NGRID_PLUGIN","ngridPlugin","factory","runOnce","NgModule","imports","CommonModule","PblNgridModule","declarations","exports","providers","decorators","type","Optional","SkipSelf","PblNgridConfigService"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { PblNgridGlobalState, StateChunks, RootStateChunks, PblNgridStateChunkSectionContext } from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling';\n\nexport let _instance: StateVisor;\n\nexport interface PblNgridStateChunkSectionConfig<T extends keyof RootStateChunks = keyof RootStateChunks> {\n  stateMatcher: (state: PblNgridGlobalState) => RootStateChunks[T]['state'];\n  sourceMatcher: (context: PblNgridStateChunkSectionContext) => RootStateChunks[T]['value'];\n}\n\nexport class StateVisor<T extends keyof StateChunks = keyof StateChunks> {\n\n  private rootChunkSections = new Map<keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>>();\n  private chunkHandlers = new Map<T, PblNgridStateChunkHandlerDefinition<T>[]>();\n\n  private constructor() { }\n\n  static get(): StateVisor { return _instance || (_instance = new StateVisor()); }\n\n  registerRootChunkSection<Z extends keyof RootStateChunks>(chunkId: Z, config: PblNgridStateChunkSectionConfig<Z>): void {\n    if (!this.rootChunkSections.has(chunkId)) {\n      this.rootChunkSections.set(chunkId, config);\n    }\n  }\n\n  registerChunkHandlerDefinition<Z extends T>(chunkHandlerDefs: PblNgridStateChunkHandlerDefinition<Z>): void {\n    const { chunkId } = chunkHandlerDefs;\n    const handlersForGroup = this.chunkHandlers.get(chunkId) || [];\n    handlersForGroup.push(chunkHandlerDefs);\n    this.chunkHandlers.set(chunkId, handlersForGroup);\n  }\n\n  getRootSections(): Array<[keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>]> {\n    return Array.from(this.rootChunkSections.entries());\n  }\n\n  getDefinitionsForSection(chunkId: T): PblNgridStateChunkHandlerDefinition<T>[] {\n    return this.chunkHandlers.get(chunkId) || [];\n  }\n}\n\nexport const stateVisor: StateVisor = StateVisor.get();\n","import { PblNgridGlobalState, PblNgridPersistAdapter } from '../models/index';\n\nexport class PblNgridLocalStoragePersistAdapter implements PblNgridPersistAdapter {\n  private static globalStateKey: string = 'pebulaNgridState';\n\n  save(id: string, state: PblNgridGlobalState): Promise<void> {\n    try {\n      const store = this.loadGlobalStateStore();\n      store[id] = state;\n      if (!state.__metadata__) {\n        state.__metadata__ = {} as any;\n      }\n      state.__metadata__.updatedAt = new Date().toISOString();\n\n      this.saveGlobalStateStore(store);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  load(id: string): Promise<PblNgridGlobalState> {\n    return Promise.resolve(this.loadGlobalStateStore()[id] || {} as any);\n  }\n\n  exists(id: string): Promise<boolean> {\n    const store = this.loadGlobalStateStore() || {};\n    return Promise.resolve(id in store);\n  }\n\n  private loadGlobalStateStore(): { [id: string]: PblNgridGlobalState } {\n    const raw = localStorage.getItem(PblNgridLocalStoragePersistAdapter.globalStateKey);\n    return raw ? JSON.parse(raw) : {};\n  }\n\n  private saveGlobalStateStore(store: { [id: string]: PblNgridGlobalState }): void {\n    localStorage.setItem(PblNgridLocalStoragePersistAdapter.globalStateKey, JSON.stringify(store));\n  }\n}\n","import { StateChunks, PblNgridStateChunkContext } from '../models/index';\nimport { stateVisor } from '../state-visor';\n\nexport class PblNgridStateChunkHandlerHost<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']> {\n  private keys = new Set<Z>();\n  private rKeys = new Set<Z>();\n  private sFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  private dFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n\n  constructor(private chunkId: T) { }\n\n  handleKeys(...keys: Array<Z>): this {\n    for (const k of keys) { this.keys.add(k) }\n    return this;\n  }\n\n  /**\n   * Required keys are keys that cannot get excluded.\n   * Either by adding the to the `exclude` option or by omitting them from the `include` option.\n   */\n  requiredKeys(...keys: Array<Z>): this {\n    for (const k of keys) {\n      this.keys.add(k)\n      this.rKeys.add(k);\n    }\n    return this;\n  }\n\n  serialize(fn: (key: Z, ctx: PblNgridStateChunkContext<T>) => StateChunks[T]['state'][Z]): this {\n    this.sFn = fn;\n    return this;\n  }\n\n  deserialize(fn: (key: Z, stateValue: StateChunks[T]['state'][Z],  ctx: PblNgridStateChunkContext<T>) => void): this {\n    this.dFn = fn;\n    return this;\n  }\n\n  register(): void {\n    if (this.keys.size === 0) {\n      throw new Error('Invalid state chunk handler, no keys defined.');\n    }\n    if (!this.sFn) {\n      throw new Error('Invalid state chunk handler, missing serialize handler.');\n    }\n    if (!this.dFn) {\n      throw new Error('Invalid state chunk handler, missing deserialize handler.');\n    }\n\n    stateVisor.registerChunkHandlerDefinition({\n      chunkId: this.chunkId,\n      keys: Array.from(this.keys.values()),\n      rKeys: Array.from(this.rKeys.values()),\n      serialize: this.sFn,\n      deserialize: this.dFn,\n    })\n  }\n}\n\nexport interface PblNgridStateChunkHandlerDefinition<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']>{\n  chunkId: T;\n  keys: Array<Z>;\n  rKeys: Array<Z>;\n  serialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  deserialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n}\n\nexport function createStateChunkHandler<T extends keyof StateChunks>(section: T) {\n  return new PblNgridStateChunkHandlerHost(section);\n}\n","import { PblNgridIdentResolver, PblNgridIdentResolverContext } from '../models/index';\n\nexport class PblNgridIdAttributeIdentResolver implements PblNgridIdentResolver {\n  resolveId(ctx: PblNgridIdentResolverContext): string | undefined {\n    return ctx.grid.id;\n  }\n}\n","import { PblNgridComponent, PblNgridPluginController, PblNgridExtensionApi } from '@pebula/ngrid';\nimport {\n  RootStateChunks,\n  StateChunks,\n  PblNgridStateChunkSectionContext,\n  PblNgridStateChunkContext,\n  PblNgridStateOptions,\n  PblNgridStateLoadOptions,\n} from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling/base';\nimport { stateVisor, PblNgridStateChunkSectionConfig } from './state-visor';\nimport { PblNgridLocalStoragePersistAdapter } from './persistance/local-storage';\nimport { PblNgridIdAttributeIdentResolver } from './identification/index';\n\n/**\n * Pick Partial No Partial\n * Like Pick but some are partial some are not partial\n */\nexport type PickPNP<T, P extends keyof T, NP extends keyof T> = Partial<Pick<T, P>> & Pick<T, NP>\n\nexport function resolveId(grid: PblNgridComponent, options?: PblNgridStateOptions): string {\n  const id = options.identResolver.resolveId(createChunkSectionContext(grid, options));\n  if (!id) {\n    throw new Error('Could not resolve a unique id for an ngrid instance, state is disabled');\n  }\n  return id;\n}\n\nexport function serialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n      state[key] = def.serialize(key, ctx);\n    }\n  }\n}\n\nexport function deserialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (key in state) {\n      if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n        def.deserialize(key, state[key], ctx);\n      }\n    }\n  }\n}\n\nexport function normalizeOptions(mode: 'save', options?: PblNgridStateOptions): PblNgridStateOptions;\nexport function normalizeOptions(mode: 'load', options?: PblNgridStateLoadOptions): PblNgridStateLoadOptions;\nexport function normalizeOptions(mode: 'save' | 'load', options?: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateOptions | PblNgridStateLoadOptions {\n  if (!options) {\n    options = {} as any;\n  }\n\n  if (!options.persistenceAdapter) {\n    options.persistenceAdapter = new PblNgridLocalStoragePersistAdapter();\n  }\n  if (!options.identResolver) {\n    options.identResolver = new PblNgridIdAttributeIdentResolver();\n  }\n\n  if (mode === 'load') {\n    const opt: PblNgridStateLoadOptions = options;\n    if (!opt.strategy) {\n      opt.strategy = 'overwrite'\n    }\n  }\n\n  return options;\n}\n\nexport function getExtApi(grid: PblNgridComponent): PblNgridExtensionApi {\n  const controller = PblNgridPluginController.find(grid);\n  if (controller) {\n    return controller.extApi;\n  }\n}\n\nexport function createChunkSectionContext(grid: PblNgridComponent,\n                                          options: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateChunkSectionContext {\n  return { grid, extApi: getExtApi(grid), options };\n}\n\nexport function createChunkContext<T extends keyof RootStateChunks>(sectionContext: PblNgridStateChunkSectionContext,\n                                                                   chunkConfig: PblNgridStateChunkSectionConfig<T>,\n                                                                   mode: 'serialize' | 'deserialize'): PblNgridStateChunkContext<T> {\n  return {\n    ...sectionContext,\n    source: chunkConfig.sourceMatcher(sectionContext),\n    runChildChunk<TChild extends keyof StateChunks>(childChunkId: TChild, state: StateChunks[TChild]['state'], source: StateChunks[TChild]['value'], data?: StateChunks[TChild]['data']) {\n      const childContext = { ...sectionContext, source, data };\n      const defs = stateVisor.getDefinitionsForSection(childChunkId);\n\n      const action = mode === 'serialize' ? serialize : deserialize;\n      for (const def of defs) {\n        action(def, state, childContext);\n      }\n    }\n  }\n}\n\nexport function stateKeyPredicateFactory(chunkId: keyof StateChunks, options: PblNgridStateOptions, rootPredicate = false): ((key: string) => boolean) | undefined {\n  // TODO: chunkId ans options include/exclude combination does not change\n  // we need to cache it... e.g. each column def will create a new predicate if we don't cache.\n  const filter = options.include || options.exclude;\n  if (filter) {\n    // -1: Exclude, 1: Include\n    const mode: -1 | 1 = filter === options.include ? 1 : -1;\n    const chunkFilter: boolean | string[] = filter[chunkId];\n    if (typeof chunkFilter === 'boolean') {\n      return mode === 1\n        ? (key: string) => chunkFilter\n        : (key: string) => !chunkFilter\n      ;\n    } else if (Array.isArray(chunkFilter)) {\n      if (rootPredicate) {\n        // root predicate is for RootStateChunks and when set to true\n        // the key itself has no impact on the predicate. If the filter is boolean nothing changes\n        // but if it's an array, the array is ignored and considered as true ignoring the key because a key does not existing when checking the root\n        return k => true;\n      } else {\n        return mode === 1\n          ? (key: string) => chunkFilter.indexOf(key) > -1\n          : (key: string) => chunkFilter.indexOf(key) === -1\n        ;\n      }\n    } else if (mode === 1) {\n      return (key: string) => false\n    }\n  }\n}\n\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PblNgridGlobalState, PblNgridStateOptions, PblNgridStateSaveOptions, PblNgridStateLoadOptions } from './models/index';\nimport { stateVisor } from './state-visor';\nimport * as U from './utils';\n\nexport function hasState(grid: PblNgridComponent, options?: PblNgridStateOptions): Promise<boolean> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.exists(id);\n    });\n}\n\nexport function saveState(grid: PblNgridComponent, options?: PblNgridStateSaveOptions): Promise<void> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      const state: PblNgridGlobalState = {} as any;\n      const context = U.createChunkSectionContext(grid, options);\n\n      for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n        const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n        if (!keyPredicate || keyPredicate(chunkId)) {\n          const sectionState = chunkConfig.stateMatcher(state);\n          const chunkContext = U.createChunkContext(context, chunkConfig, 'serialize');\n\n          const defs = stateVisor.getDefinitionsForSection(chunkId);\n          for (const def of defs) {\n            U.serialize(def, sectionState, chunkContext);\n          }\n        }\n      }\n      return options.persistenceAdapter.save(id, state);\n    });\n}\n\nexport function loadState(grid: PblNgridComponent, options?: PblNgridStateLoadOptions): Promise<PblNgridGlobalState> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('load', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.load(id)\n        .then( state => {\n          const context = U.createChunkSectionContext(grid, options);\n\n          for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n            const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n            if (!keyPredicate || keyPredicate(chunkId)) {\n              const sectionState = chunkConfig.stateMatcher(state);\n              const chunkContext = U.createChunkContext(context, chunkConfig, 'deserialize');\n\n              const defs = stateVisor.getDefinitionsForSection(chunkId);\n              for (const def of defs) {\n                U.deserialize(def, sectionState, chunkContext);\n              }\n            }\n          }\n          return state;\n        });\n    });\n}\n\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PickPNP } from '../../utils';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\n\nexport interface PblNgridSurfaceState extends\n  PickPNP <\n    PblNgridComponent,\n    'showHeader' | 'showFooter' | 'focusMode' | 'usePagination' | 'hideColumns' | 'fallbackMinHeight',\n    never\n  > { }\n\nexport function registerGridHandlers() {\n  stateVisor.registerRootChunkSection(\n    'grid',\n    {\n      sourceMatcher: ctx => ctx.grid,\n      stateMatcher: state => state.grid || (state.grid = {} as any)\n    }\n  );\n\n  createStateChunkHandler('grid')\n    .handleKeys('showHeader', 'showFooter', 'focusMode', 'usePagination', 'hideColumns', 'fallbackMinHeight')\n    .serialize( (key, ctx) => ctx.source[key] )\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key as any] = stateValue;\n    })\n    .register();\n}\n","import { PblNgridColumnDefinitionSet, PblColumnDefinition, PblColumn, utils } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { StateChunks, PblNgridStateChunkContext } from '../../models/index';\nimport { PblNgridMetaRowSetState, PblNgridMetaColumnState, PblNgridGroupColumnState, PblNgridColumnDefinitionSetState } from './model';\nimport { registerColumnDefChildHandlers } from './children';\n\nfunction runChildChunksForRowMetaColumns<TCol, TChild extends keyof StateChunks>(childChunkId: TChild, ctx: PblNgridStateChunkContext<\"columns\">, columns: TCol[]) {\n  const stateColumns = [];\n  for (const col of columns) {\n    const c: StateChunks[TChild]['state'] = {} as any;\n    ctx.runChildChunk(childChunkId, c, col);\n    stateColumns.push(c);\n  }\n  return stateColumns;\n}\n\n/** Runs the process for the `header` and `footer` sections in the `table` section (if they exist) */\nfunction runChildChunkForDataMetaRows(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { columnStore } = ctx.extApi;\n  const { table } = ctx.source;\n  for (const kind of ['header', 'footer'] as Array<'header' | 'footer'>) {\n    // This is a mapping of the from->to relationship (i.e serializing or deserializing)\n    const src = mode === 's' ? table : state;\n    const dest = src === table ? state : table;\n\n    // we need to have a source\n    if (src[kind]) {\n      const active = kind === 'header' ? columnStore.headerColumnDef : columnStore.footerColumnDef;\n      if (!dest[kind]) { dest[kind] = {}; }\n      ctx.runChildChunk('dataMetaRow', state[kind], table[kind], { kind, active });\n    }\n  }\n}\n\nfunction runChildChunksForRowDataColumns(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { table } = ctx.source;\n  const src = mode === 's' ? table : state;\n\n  const resolve = src === state\n    ? col => ({ colState: col, pblColumn: table.cols.find( tCol => (utils.isPblColumn(tCol) && tCol.orgProp === col.prop) || (tCol.id === col.id || tCol.prop === col.prop) ) })\n    : col => ({ colState: state.cols[state.cols.push({} as any) - 1] , pblColumn: utils.isPblColumn(col) && col })\n  ;\n\n  if (src.cols && src.cols.length > 0) {\n    for (const col of src.cols) {\n      const { colState, pblColumn } = resolve(col)\n\n      const data = {\n        pblColumn: utils.isPblColumn(pblColumn) && pblColumn,\n        activeColumn: ctx.grid.columnApi.findColumn(col.id || col.prop),\n      }\n      ctx.runChildChunk('dataColumn', colState, pblColumn, data);\n    }\n  }\n}\n\nexport function registerColumnDefHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columns',\n    {\n      sourceMatcher: ctx => ctx.grid.columns,\n      stateMatcher: state => state.columns || (state.columns = {\n        table: {\n          cols: [],\n        },\n        header: [],\n        footer: [],\n        headerGroup: [],\n      })\n    }\n  );\n\n  createStateChunkHandler('columns')\n    .handleKeys('table', 'header', 'headerGroup', 'footer')\n    .serialize( (key, ctx) => {\n      switch (key) {\n        case 'table':\n          const state: PblNgridColumnDefinitionSetState['table'] = { cols: [] };\n          runChildChunkForDataMetaRows('s', state, ctx);\n          runChildChunksForRowDataColumns('s', state, ctx);\n          return state;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          if (source && source.length > 0) {\n            const rows = [];\n            for (const row of source) {\n              const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridMetaColumnState> = {} as any;\n              ctx.runChildChunk('metaRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n        case 'headerGroup':\n          const headerGroupSource = ctx.source.headerGroup;\n          if (headerGroupSource && headerGroupSource.length > 0) {\n            const rows = [];\n            for (const row of headerGroupSource) {\n              const active = ctx.extApi.columnStore.metaColumnIds.header.find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridGroupColumnState> = {} as any;\n              ctx.runChildChunk('metaGroupRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      switch (key) {\n        case 'table':\n          const state = stateValue as PblNgridColumnDefinitionSetState['table'];\n          runChildChunkForDataMetaRows('d', state, ctx);\n          runChildChunksForRowDataColumns('d', state, ctx);\n          break;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          const metaRowsState = stateValue as PblNgridColumnDefinitionSetState['header'];\n          if (metaRowsState && metaRowsState.length > 0) {\n            for (const rowState of metaRowsState) {\n              const row = source.find( r => r.rowIndex === rowState.rowIndex );\n              if (row) {\n                const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === rowState.rowIndex );\n                ctx.runChildChunk('metaRow', rowState, row);\n                for (const colState of rowState.cols) {\n                  const col = row.cols.find( r => r.id === colState.id);\n                  if (col) {\n                    const activeColStore = ctx.extApi.columnStore.find(colState.id);\n                    const activeCol = activeColStore && activeColStore.header;\n                    ctx.runChildChunk('metaColumn', colState, col);\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 'headerGroup':\n          break;\n      }\n    })\n    .register();\n\n    registerColumnDefChildHandlers();\n}\n\nexport {\n  PblNgridMetaColumnState,\n  PblNgridGroupColumnState,\n  PblNgridColumnState,\n  PblNgridMetaRowState,\n  PblNgridMetaRowSetState,\n  PblNgridColumnDefinitionSetState,\n} from './model';\n","import { PblColumnTypeDefinition, PblColumn, PblColumnDefinition, PblMetaRowDefinitions } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\n\nexport function registerColumnDefChildHandlers() {\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataColumn')\n    .requiredKeys('id', 'prop')\n    .handleKeys(\n      'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',              // PblNgridBaseColumnState (all optional)\n      'headerType', 'footerType', 'sort', 'sortAlias', 'editable', 'pin'    // All Optional\n    )\n    .serialize( (key, ctx) => {\n      const c = ctx.data.activeColumn || ctx.data.pblColumn;\n      if (c) {\n        switch (key) {\n          case 'prop':\n            return c.orgProp;\n          default:\n            break;\n        }\n      }\n\n      const value = c ? c[key] : ctx.source[key];\n\n      switch (key) {\n        case 'sort':\n          if (typeof value === 'boolean') {\n            return value;\n          } else {\n            return;\n          }\n        default:\n          break;\n      }\n\n      return value;\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      const { activeColumn } = ctx.data;\n      if (activeColumn) {\n        switch (key) {\n          case 'width':\n            activeColumn.updateWidth(stateValue as any);\n            break;\n        }\n      }\n      if (ctx.source) {\n        switch (key) {\n          case 'prop':\n            return;\n          case 'type':\n          case 'headerType':\n          case 'footerType':\n            const typeValue = ctx.source[key];\n            const stateTypeDef: PblColumnTypeDefinition = stateValue as any;\n            if (stateTypeDef && typeof stateTypeDef !== 'string' && typeValue && typeof typeValue !== 'string') {\n              typeValue.name = stateTypeDef.name;\n              if (stateTypeDef.data) {\n                typeValue.data = Object.assign(typeValue.data || {}, stateTypeDef.data);\n              }\n              return;\n            }\n            break;\n        }\n\n        // We must assert the type starting from 3.5 onwards\n        // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n        ctx.source[key as any] = stateValue;\n      }\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataMetaRow')\n    .handleKeys('rowClassName', 'type')    // All Optional\n    .serialize( (key, ctx) => {\n      const active = ctx.data.active || ctx.source;\n      if (active) {\n        return active[key];\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key] = stateValue as any;\n    })\n    .register();\n\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaColumn')\n    .requiredKeys('kind', 'rowIndex')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupColumn')\n    .requiredKeys('prop', 'rowIndex', 'span')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n}\n","import { PblColumn } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { PblNgridStateLoadOptions } from '../../models/index';\n\nexport function registerColumnOrderHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columnOrder',\n    {\n      sourceMatcher: ctx => ctx.grid.columnApi,\n      stateMatcher: state => {\n        if (!state.columnOrder) {\n          state.columnOrder = [];\n        }\n        return state;\n      }\n    }\n  );\n\n  createStateChunkHandler('columnOrder')\n    .handleKeys('columnOrder')\n    .serialize( (key, ctx) => ctx.source.visibleColumnIds.slice() )\n    .deserialize( (key, columnOrder, ctx) => {\n      const { extApi, grid } = ctx;\n      let lastMove: [PblColumn, PblColumn];\n\n      const { visibleColumnIds } = grid.columnApi;\n      if (columnOrder && columnOrder.length === visibleColumnIds.length) {\n        for (let i = 0, len = columnOrder.length; i < len; i++) {\n          if (columnOrder[i] !== visibleColumnIds[i]) {\n            const column = grid.columnApi.findColumn(columnOrder[i]);\n            if (!column) {\n              return;\n            }\n            const anchor = grid.columnApi.findColumn(visibleColumnIds[i]);\n            lastMove = [column, anchor];\n            grid.columnApi.moveColumn(column, anchor, true);\n            extApi.columnStore.updateGroups();\n          }\n        }\n      }\n      // With this revert/redo of the last move we just trigger a redraw.\n      if (lastMove) {\n        grid.columnApi.moveColumn(lastMove[1], lastMove[0], true);\n        grid.columnApi.moveColumn(lastMove[0], lastMove[1], (ctx.options as PblNgridStateLoadOptions).avoidRedraw);\n      }\n    })\n    .register();\n  }\n","import { StateChunkKeyFilter } from './core/models/index';\n\n/**\n * Return's the `User Preferences` preset which focuses on saving and restoring state that the user\n * can define and would want to restore between sessions.\n *\n * For example, saving column width's which the user might have changed using the mouse or any other custom way provided to him (through API).\n * Saving the column order, so if the user re-ordered the table the order can be loaded back again...\n */\nexport function userSessionPref(...basedOn: StateChunkKeyFilter[]): StateChunkKeyFilter {\n  const resultFilter: StateChunkKeyFilter = {\n    grid: [\n      'hideColumns',\n      'showFooter',\n      'showHeader',\n    ],\n    columnOrder: true,\n    columns: [ 'table' ],\n    dataColumn: [\n      'width',\n    ]\n  }\n\n  if (basedOn.length > 0) {\n    for (const b of basedOn)\n    mergeStateChunkKeyFilter(resultFilter, b);\n  }\n\n  return resultFilter;\n}\n\n\n/**\n * Merge a head and tail chunk filters so keys from tail will be merged into head if:\n *\n * - The key does not exist in head\n * - The key exist in head but the value of it is an Array and the value of tail is an Array as well.\n *   In such case, both array's are merged into a single unique array.\n */\nfunction mergeStateChunkKeyFilter(mergeHead: StateChunkKeyFilter, mergeTail: StateChunkKeyFilter) {\n  for (const k of Object.keys(mergeTail)) {\n    const tailValue = mergeTail[k];\n    if (k in mergeHead) {\n      const tailHead = mergeHead[k];\n      if (Array.isArray(tailHead) && Array.isArray(tailValue)) {\n        const s = new Set<string>([...tailHead, ...tailValue]);\n        mergeHead[k] = Array.from(s.values());\n      }\n    } else {\n      mergeHead[k] = mergeTail[k];\n    }\n  }\n}\n","import { Subject, Observable, from } from 'rxjs';\nimport { map, mapTo, filter, take, skip, debounceTime } from 'rxjs/operators';\nimport { Directive, OnDestroy, Injector, Input } from '@angular/core';\n\nimport { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';\nimport { hasState, saveState, loadState, PblNgridStateLoadOptions, PblNgridStateSaveOptions } from './core/index';\n\nimport { userSessionPref } from './presets';\n\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\n  interface PblNgridConfig {\n    state?: {\n      /** When set to true will enable the state plugin on all table instances by default. */\n      autoEnable?: boolean;\n      /**\n       * Options to use when auto-loading the plugin\n       */\n      autoEnableOptions?: {\n        loadOptions?: PblNgridStateLoadOptions;\n        saveOptions?: PblNgridStateSaveOptions;\n      }\n    };\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    state?: PblNgridStatePlugin;\n  }\n  interface PblNgridPluginExtensionFactories {\n    state: keyof typeof PblNgridStatePlugin;\n  }\n}\n\ninterface InternalStatePluginEvents {\n  phase: 'load' | 'save';\n  position: 'before' | 'after';\n  error?: Error;\n}\n\nexport const PLUGIN_KEY: 'state' = 'state';\n\nexport class PblNgridStatePlugin {\n\n  loadOptions?: PblNgridStateLoadOptions;\n  saveOptions?: PblNgridStateSaveOptions;\n\n  afterLoadState: Observable<void>;\n  afterSaveState: Observable<void>;\n  onError: Observable<{ phase: 'save' | 'load'; error: Error; }>;\n\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _events = new Subject<InternalStatePluginEvents>();\n\n  constructor(public grid: PblNgridComponent<any>, protected injector: Injector, protected pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.afterLoadState = this._events.pipe(filter( e => e.phase === 'load' && e.position === 'after'), mapTo(undefined) );\n    this.afterSaveState = this._events.pipe(filter( e => e.phase === 'save' && e.position === 'after'), mapTo(undefined) );\n    this.onError = this._events.pipe(filter( e => !!e.error ), map( e => ({ phase: e.phase, error: e.error })) );\n\n    pluginCtrl.events\n      .pipe(\n        filter( e => e.kind === 'onInvalidateHeaders'),\n        take(1),\n      )\n      .subscribe( event => {\n        const initialLoadOptions = { ...(this.loadOptions || {}), avoidRedraw: true };\n        hasState(grid, initialLoadOptions)\n          .then( value => {\n            if (value) {\n              return this._load(initialLoadOptions);\n            }\n          })\n          .then( () => {\n            pluginCtrl.events\n            .pipe(\n              filter( e => e.kind === 'onResizeRow'),\n              skip(1),\n              debounceTime(500),\n            )\n            .subscribe( event => this.save() );\n          });\n      });\n\n    pluginCtrl.events\n      .subscribe( event => {\n        if (event.kind === 'onDestroy') {\n          event.wait(this.save());\n          this._events.complete();\n        }\n      });\n  }\n\n  static create(table: PblNgridComponent<any>, injector: Injector): PblNgridStatePlugin {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    return new PblNgridStatePlugin(table, injector, pluginCtrl);\n  }\n\n  load(): Promise<void> {\n    return this._load(this.loadOptions);\n  }\n\n  save(): Promise<void> {\n    return saveState(this.grid, this.saveOptions)\n      .then( () => this._events.next({phase: 'save', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'save', position: 'after', error }) );\n  }\n\n  destroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  private _load(loadOptions: PblNgridStateLoadOptions): Promise<void> {\n    return loadState(this.grid, loadOptions)\n      .then( () => this._events.next({phase: 'load', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'load', position: 'after', error }) );\n  }\n\n}\n\n@Directive({\n  selector: 'pbl-ngrid[persistState]', // tslint:disable-line:directive-selector\n  outputs: ['afterLoadState', 'afterSaveState', 'onError'],\n})\nexport class PblNgridStatePluginDirective extends PblNgridStatePlugin implements OnDestroy {\n\n  @Input() loadOptions: PblNgridStateLoadOptions = { include: userSessionPref() };\n  @Input() saveOptions: PblNgridStateSaveOptions = { include: userSessionPref() };\n\n  constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController) {\n    super(grid, injector, pluginCtrl);\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n}\n","import { registerGridHandlers } from './grid-primitives/index';\nimport { registerColumnOrderHandlers } from './column-order/index';\nimport { registerColumnDefHandlers } from './column-def/index';\n\nexport function registerBuiltInHandlers() {\n  registerGridHandlers();\n  registerColumnOrderHandlers();\n  registerColumnDefHandlers();\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PblNgridPluginController, PblNgridModule, PblNgridConfigService, ngridPlugin } from '@pebula/ngrid';\n\nimport { registerBuiltInHandlers } from './core/built-in-handlers/_register';\nimport { PblNgridStatePlugin, PblNgridStatePluginDirective, PLUGIN_KEY } from './state-plugin';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n  ],\n  declarations: [\n    PblNgridStatePluginDirective,\n  ],\n  exports: [\n    PblNgridStatePluginDirective,\n  ],\n  providers: [ ],\n})\nexport class PblNgridStatePluginModule {\n\n  static readonly NGRID_PLUGIN = ngridPlugin({ id: PLUGIN_KEY, factory: 'create', runOnce: registerBuiltInHandlers }, PblNgridStatePlugin);\n\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridStatePluginModule,\n              configService: PblNgridConfigService) {\n\n  if (parentModule) {\n    return;\n  }\n\n  PblNgridPluginController.created\n    .subscribe( event => {\n      const targetEventsConfig = configService.get(PLUGIN_KEY);\n      if (targetEventsConfig && targetEventsConfig.autoEnable === true) {\n        const pluginCtrl = event.controller;\n        let subscription = pluginCtrl.events\n          .subscribe( evt => {\n            if (evt.kind === 'onInit') {\n              if (!pluginCtrl.hasPlugin(PLUGIN_KEY)) {\n                const instance = pluginCtrl.createPlugin(PLUGIN_KEY);\n                if (targetEventsConfig.autoEnableOptions) {\n                  instance.loadOptions = targetEventsConfig.autoEnableOptions.loadOptions;\n                  instance.saveOptions = targetEventsConfig.autoEnableOptions.saveOptions;\n                }\n              }\n              subscription.unsubscribe();\n              subscription = undefined;\n            }\n          });\n      }\n    });\n  }\n}\n"]}
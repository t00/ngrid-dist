{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","PblDropListRef","_this","_super","apply","beforeExit","Subject","withElement","element","coerceElement","dispose","complete","DropListRef","PblDragRef","args","_i","rootElementChanged","EventEmitter","exited","subscribe","container","item","withRootElement","rootElement","getRootElement","prev","curr","DragRef","DEFAULT_CONFIG","dragStartThreshold","pointerDirectionChangeThreshold","PblDragDrop","_document","_ngZone","_viewportRuler","_dragDropRegistry","createDrag","config","createDropList","Injectable","providedIn","Inject","DOCUMENT","NgZone","ViewportRuler","DragDropRegistry","CdkLazyDropList","_draggablesSet","Set","defineProperty","ngOnInit","pblDropListRef","Error","_dropListRef","beforeStarted","addDrag","drag","add","_draggables","reset","from","values","notifyOnChanges","removeDrag","result","delete","originalElement","directContainerElement","nativeElement","querySelector","ElementRef","Directive","selector","exportAs","providers","provide","DragDrop","useExisting","CDK_DROP_LIST","useClass","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","Input","CdkDropList","CdkLazyDrag","_hostNotRoot","_rootClass","_a","classList","remove","split","_b","cdkDropList","dropContainer","_dragRef","_withDropContainer","pblDragRef","event","rootElementSelectorClass","hostNotRoot","ngAfterViewInit","started","startedEvent","element_1","initialRootElementParent_1","nextSibling","ended","pipe","take","endedEvent","appendChild","ngOnDestroy","[class.cdk-drag-dragging]","CdkDrag","PblDragHandle","parentDrag","CdkDragHandle","decorators","type","Optional","_uniqueIdCounter","PblNgridRowReorderPluginDirective","grid","pluginCtrl","dragDrop","changeDetectorRef","dir","group","id","_rowReorder","_removePlugin","setPlugin","dropped","previousIndex","ds","source","indexOf","draggedContext","row","currentIndex","renderStart","contextApi","clear","moveItem","_cdkTable","syncRows","coerceBooleanProperty","inputs","[class.pbl-row-reorder]","CdkDropListGroup","useValue","undefined","PblNgridComponent","PblNgridPluginController","ChangeDetectorRef","Directionality","SkipSelf","PblNgridRowDragDirective","_viewContainerRef","_dir","_changeDetectorRef","rootElementSelector","_context","col","_draggedContext","find","plugin","getPlugin","ViewContainerRef","CDK_DRAG_CONFIG","PblNgridColumnReorderPluginDirective","table","orientation","dragging","BehaviorSubject","_columnReorder","_manualOverride","manualOverride","columnApi","moveColumn","column","isDragging","el","lastSwap","monkeyPatchDropListRef","_getItemIndexFromPointerPosition","bind","_itemPositions","_pblReset","lastSorted","pblGetPositionCacheItems","forEach","sibling","index","data","getCells","_c","style","transform","_sortItem","enter","pointerX","pointerY","isHorizontal","clientRect","left","offset","top","pointerDelta","siblings","s","newIndex","pblGetItemIndexFromPointerPosition","oldOrder","slice","siblingAtNewPosition","wontBudge","itemAtOriginalPosition","findIndex","currentItem","start","Math","min","itemsDraggedOver","abs","itemsDraggedOver_1","itemsDraggedOver_1_1","dragItem","checkGroupLockConstraint","Output","PblNgridColumnDragDirective","disabled","reorder","columnReorder","columnDef","cache","queryCellElements","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","PblNgridDragResizeComponent","_config","grabAreaWidth","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","_pointerDown","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","x","_pickupPositionOnPage","distanceY","y","_hasStartedDragging","_hasMoved","preventDefault","stopPropagation","newWidth","max","_initialWidth","maxWidth","minWidth","_lastWidth","updateWidth","resetColumnsWidth","sizeInfo","updateSize","netWidth","_pointerUp","_isDragging","_removeSubscriptions","stopDragging","resizeColumn","registerDragItem","isPblColumn","onStable","asObservable","enable","userSelect","_getRootElement","parentElement","addEventListener","dest","key","extendStyles","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","removeEventListener","unsubscribe","removeDragItem","onDoubleClick","autoSizeColumn","referenceElement","_isTouchEvent","button","pointerMove","auditTime","animationFrameScheduler","pointerUp","_scrollPosition","getViewportScrollPosition","startDragging","point","touches","pageX","pageY","startsWith","Component","[style.width.px]","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","HostListener","PblNgridCellDraggerRefDirective","tRef","registry","name","kind","shouldRender","context","hasPlugin","TemplateRef","PblNgridRegistryService","PblNgridMultiTemplateRegistry","groups","g","groupStore","lockColumns","isInGroup","colReorderExtendGrid","PblColumn","extendProperty","PblColumnGroup","PblNgridAggregationContainerDirective","connectedTo","pending","addGroupBy","entered","getPlaceholderElement","display","PblNgridCellResizerRefDirective","resize","colResizeExtendGrid","DragPluginDefaultTemplatesComponent","ngridPlugins","ngridPlugin","runOnce","PblNgridDragModule","withDefaultTemplates","ngModule","provideCommon","component","NGRID_PLUGIN","NgModule","imports","CommonModule","PblNgridModule","DragDropModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: import('./drag-ref').PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler} from '@angular/cdk/scrolling';\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\n\nimport { PblDragRef } from './drag-ref'\nimport { PblDropListRef } from './drop-list-ref';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class PblDragDrop {\n  constructor(@Inject(DOCUMENT) private _document: any,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                      config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\n\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n}\n","import { take } from 'rxjs/operators';\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST, DragDrop } from '@angular/cdk/drag-drop';\nimport { PblDropListRef } from './drop-list-ref';\nimport { PblDragRef } from './drag-ref';\nimport { PblDragDrop } from './drag-drop';\n\n@Directive({\n  selector: '[cdkLazyDropList]',\n  exportAs: 'cdkLazyDropList',\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\n\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\n\n  _draggables: QueryList<CdkDrag>;\n\n  /* private */ originalElement: ElementRef<HTMLElement>;\n  /* private */ _draggablesSet = new Set<CdkDrag>();\n\n  ngOnInit(): void {\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\n    }\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\n  }\n\n  addDrag(drag: CdkDrag): void {\n    this._draggablesSet.add(drag);\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n  }\n\n  removeDrag(drag: CdkDrag): boolean {\n    const result = this._draggablesSet.delete(drag);\n    if (result) {\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n    }\n    return result;\n  }\n\n  /* protected */ beforeStarted(): void {\n    // This is a workaround for https://github.com/angular/material2/pull/14153\n    // Working around the missing capability for selecting a container element that is not the drop container host.\n    if (!this.originalElement) {\n      this.originalElement = this.element;\n    }\n    if (this.directContainerElement) {\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\n      this.element = new ElementRef<HTMLElement>(element);\n    } else {\n      this.element = this.originalElement;\n    }\n    this.pblDropListRef.withElement(this.element);\n  }\n}\n\n@Directive({\n  selector: '[cdkLazyDrag]',\n  exportAs: 'cdkLazyDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n  ],\n})\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\n\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\n  set cdkDropList(value: Z) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  /* private */ _rootClass: string;\n  /* private */ _hostNotRoot = false;\n\n  ngOnInit(): void {\n    if (this.pblDragRef instanceof PblDragRef === false) {\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\n    }\n    this.pblDragRef.rootElementChanged.subscribe( event => {\n      const rootElementSelectorClass = this._rootClass;\n      const hostNotRoot = this.element.nativeElement !== event.curr;\n\n      if (rootElementSelectorClass) {\n        if (this._hostNotRoot) {\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\n        }\n        if (hostNotRoot) {\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\n        }\n      }\n      this._hostNotRoot = hostNotRoot;\n    });\n  }\n\n  // This is a workaround for https://github.com/angular/material2/pull/14158\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\n  ngAfterViewInit(): void {\n    this.started.subscribe( startedEvent => {\n      if (this.dropContainer) {\n        const element = this.getRootElement();\n        const initialRootElementParent = element.parentNode as HTMLElement;\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\n        }\n      }\n    });\n\n    /* super.ngAfterViewInit(); */\n  }\n\n  ngOnDestroy(): void {\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    /* super.ngOnDestroy(); */\n  }\n}\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[pblDragHandle]',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag-handle'\n  },\n  providers: [\n    {\n      provide: CdkDragHandle,\n      useExisting: PblDragHandle\n    }\n  ]\n})\nexport class PblDragHandle extends CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  ViewContainerRef,\n  NgZone,\n  QueryList,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDropList,\n  CdkDropListGroup,\n  CdkDrag,\n  CDK_DROP_LIST,\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDragDrop } from '../core/drag-drop';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    rowReorder?: PblNgridRowReorderPluginDirective;\n  }\n}\n\nexport const ROW_REORDER_PLUGIN_KEY: 'rowReorder' = 'rowReorder';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: 'pbl-ngrid[rowReorder]',\n  exportAs: 'pblNgridRowReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n    '[class.pbl-row-reorder]': 'rowReorder && !this.grid.ds?.sort.sort?.order && !this.grid.ds?.filter?.filter',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDropListGroup, useValue: undefined },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\n  ],\n})\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\n\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\n\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\n  set rowReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._rowReorder = value;\n  }\n\n  _draggables: QueryList<CdkDrag>;\n\n  private _rowReorder = false;\n  private _removePlugin: (grid: PblNgridComponent<any>) => void;\n\n  constructor(public grid: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(ROW_REORDER_PLUGIN_KEY, this);\n\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\n      const item = event.item as PblNgridRowDragDirective<T>;\n\n      const previousIndex = grid.ds.source.indexOf(item.draggedContext.row);\n      const currentIndex = event.currentIndex + grid.ds.renderStart;\n\n      this.grid.contextApi.clear();\n      this.grid.ds.moveItem(previousIndex, currentIndex, true);\n      this.grid._cdkTable.syncRows('data');\n    });\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.grid);\n  }\n}\n\n@Directive({\n  selector: '[pblNgridRowDrag]',\n  exportAs: 'pblNgridRowDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\n  ]\n})\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-row';\n\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._context;\n  }\n\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(ROW_REORDER_PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n  }\n\n  /**\n   * Reference to the last dragged context.\n   *\n   * This context is not similar to the `context` property.\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\n   * the context will point to the row in view and not the original cell.\n   */\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._draggedContext;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n\n  private pluginCtrl: PblNgridPluginController;\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(\n      element,\n      dropContainer,\n      _document,\n      _ngZone,\n      _viewContainerRef,\n      config,\n      _dir,\n      dragDrop,\n      _changeDetectorRef,\n    );\n\n    this.started.subscribe( (event: CdkDragStart) => {\n      const { col, row, grid, value }  = this._context;\n      this._draggedContext = { col, row, grid, value };\n    });\n\n\n  }\n\n  /* CdkLazyDrag start */\n    /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n}\n","// tslint:disable:no-output-rename\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  SkipSelf,\n  Output,\n  OnDestroy,\n  Optional,\n  OnInit,\n  ViewContainerRef,\n  NgZone,\n  QueryList,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDrag,\n  CdkDragDrop,\n  CDK_DROP_LIST,\n  DragRef,\n  CdkDropListGroup,\n  CdkDropList,\n  CDK_DRAG_CONFIG,\n  DragRefConfig,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { PblDragDrop } from '../core/drag-drop';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnReorder?: PblNgridColumnReorderPluginDirective;\n  }\n}\n\nexport const COL_REORDER_PLUGIN_KEY: 'columnReorder' = 'columnReorder';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: 'pbl-ngrid[columnReorder]',\n  exportAs: 'pblNgridColumnReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\n  ],\n})\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\n  set columnReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._columnReorder = value;\n  }\n\n  /**\n   * When true, will not move the column on drop.\n   * Instead you need to handle the dropped event.\n   */\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\n\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  _draggables: QueryList<CdkDrag>;\n\n  private _columnReorder = false;\n  private _manualOverride = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\n\n  // Stuff to workaround encapsulation in CdkDropList\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\n  }\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\n    return (this._dropListRef as any)._itemPositions;\n  }\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(COL_REORDER_PLUGIN_KEY, this);\n\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\n      if (!this.manualOverride) {\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\n      }\n    });\n\n    this.dragging.subscribe( isDragging => {\n      const el = element.nativeElement;\n      if (isDragging) {\n        el.classList.add('pbl-ngrid-column-list-dragging');\n      } else {\n        el.classList.remove('pbl-ngrid-column-list-dragging');\n      }\n      this.lastSwap = undefined;\n    });\n\n    this.monkeyPatchDropListRef();\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnInit(): void {\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\n    this.dropped.subscribe( e => this._pblReset() );\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n\n  /* protected */ beforeStarted(): void {\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\n    this.lastSorted = undefined;\n    this.dragging.next(true);\n  }\n\n  private _pblReset(): void {\n    this.dragging.next(false);\n    const siblings = this.pblGetPositionCacheItems;\n    siblings.forEach((sibling, index) => {\n      for (const c of sibling.drag.data.getCells()) {\n        c.style.transform = ``;\n      }\n    });\n  }\n\n  private monkeyPatchDropListRef(): void {\n    const { _sortItem, enter } = this._dropListRef;\n\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\n      const lastSorted = this.lastSorted\n      this.lastSorted = undefined;\n      if (lastSorted && lastSorted.drag === item) {\n        const isHorizontal = this.orientation === 'horizontal';\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\n      }\n      enter.call(this._dropListRef, item, pointerX, pointerY);\n    };\n\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\n      const siblings = this.pblGetPositionCacheItems;\n      this.lastSorted = siblings.find( s => s.drag === item );\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      const oldOrder = siblings.slice();\n      const isHorizontal = this.orientation === 'horizontal';\n      const siblingAtNewPosition = siblings[newIndex];\n\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\n        return;\n      }\n\n      // we now need to find if between current and new position there are items with `wontBudge`\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\n      const start = Math.min(newIndex, currentIndex)\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\n      for (const dragItem of itemsDraggedOver) {\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\n          return;\n        }\n      }\n\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\n        return;\n      }\n\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\n\n      this.lastSwap = siblingAtNewPosition.drag;\n\n      if (isHorizontal) {\n        siblings.forEach((sibling, index) => {\n          // Don't do anything if the position hasn't changed.\n          if (oldOrder[index] === sibling) {\n            return;\n          }\n\n          for (const c of sibling.drag.data.getCells()) {\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n          }\n        });\n      }\n    };\n  }\n}\n\n@Directive({\n  selector: '[pblNgridColumnDrag]',\n  exportAs: 'pblNgridColumnDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\n  ]\n})\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-header-cell';\n\n  column: PblColumn;\n\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n    this.column = value && value.col;\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(COL_REORDER_PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n    this.disabled = this.column && this.column.reorder ? false : true;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\n  private pluginCtrl: PblNgridPluginController;\n  private cache: HTMLElement[];\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(\n      element,\n      dropContainer,\n      _document,\n      _ngZone,\n      _viewContainerRef,\n      config,\n      _dir,\n      dragDrop,\n      _changeDetectorRef,\n    );\n  }\n\n  /* CdkLazyDrag start */\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n\n  ngAfterViewInit(): void {\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\n    super.ngAfterViewInit();\n\n    this._dragRef.beforeStarted.subscribe( () => {\n      const { cdkDropList } = this;\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\n        // we don't allow a new dragging session before the previous ends.\n        // this sound impossible, but due to animation transitions its actually is.\n        // if the `transitionend` is long enough, a new drag can start...\n        //\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\n        if (cdkDropList._dropListRef.isDragging()) {\n          return this.disabled = true;\n        }\n      }\n    });\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\n  }\n\n  getCells(): HTMLElement[] {\n    if (!this.cache) {\n      this.cache = this._context.col.columnDef.queryCellElements('table');\n    }\n    return this.cache;\n  }\n\n  reset(): void {\n    super.reset();\n    if (this.cache) {\n      for (const el of this.cache) {\n        el.style.transform = ``;\n      }\n      this.cache = undefined;\n    }\n  }\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  Optional,\n  OnDestroy,\n  NgZone,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { DragRefConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, isPblColumn } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const COL_RESIZE_PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, grid } = value;\n      if (isPblColumn(col)) {\n        this.column = col;\n        this.grid = grid;\n        return;\n      }\n    }\n    this.column = this.grid = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  /** @deprecated use grid instead */\n  get table(): PblNgridComponent<any> { return this.grid; }\n  grid: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: DragRefConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.grid.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total grid minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner grid.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.updateWidth(`${newWidth}px`);\n      this.grid.resetColumnsWidth();\n      // `this.column.updateWidth` will update the grid width cell only, which will trigger a resize that will update all other cells\n      // `this.grid.resetColumnsWidth()` will re-adjust all other grid width cells, and if their size changes they will trigger the resize event...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.grid.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(dest: Writeable<CSSStyleDeclaration>, source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { COL_REORDER_PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.grid);\n    return pluginCtrl.hasPlugin(COL_REORDER_PLUGIN_KEY);\n  }\n}\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function colReorderExtendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\n\nimport {\n  Inject,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  QueryList,\n} from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DragDrop,\n  CdkDropListGroup,\n  CdkDropList,\n  CdkDrag,\n  CDK_DROP_LIST,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\nimport { PblDragDrop } from '../core/drag-drop';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: '[pblAggregationContainer]',\n  exportAs: 'pblAggregationContainer',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\n  ],\n})\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  pending: PblColumn;\n  _draggables: QueryList<CdkDrag>;\n\n  constructor(public grid: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    const reorder = pluginCtrl.getPlugin('columnReorder');\n    reorder.connectedTo = this.id;\n\n    this.pblDropListRef.dropped\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        this.grid.columnApi.addGroupBy(item.data.column);\n      });\n\n    this.pblDropListRef.entered\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = item.data.column;\n        item.getPlaceholderElement().style.display = 'none';\n        for (const c of item.data.getCells()) {\n          c.style.display = 'none';\n        }\n      });\n\n    this.pblDropListRef.exited\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        item.getPlaceholderElement().style.display = '';\n        for (const c of item.data.getCells()) {\n          c.style.display = '';\n        }\n      });\n  }\n\n    /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function colResizeExtendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { PblNgridModule, provideCommon, ngridPlugin } from '@pebula/ngrid';\n\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective, ROW_REORDER_PLUGIN_KEY } from './drag-and-drop/row/row-reorder-plugin';\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, COL_REORDER_PLUGIN_KEY } from './drag-and-drop/column/column-reorder-plugin';\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\nimport { colReorderExtendGrid } from './drag-and-drop/column/extend-grid';\n\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\n\nimport { PblNgridDragResizeComponent, COL_RESIZE_PLUGIN_KEY } from './column-resize/column-resize.component';\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\nimport { colResizeExtendGrid } from './column-resize/extend-grid';\n\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\n\nexport function ngridPlugins() {\n  return [\n    ngridPlugin({ id: ROW_REORDER_PLUGIN_KEY }, PblNgridRowReorderPluginDirective),\n    ngridPlugin({ id: COL_REORDER_PLUGIN_KEY, runOnce: colReorderExtendGrid }, PblNgridColumnReorderPluginDirective),\n    ngridPlugin({ id: COL_RESIZE_PLUGIN_KEY, runOnce: colResizeExtendGrid }, PblNgridDragResizeComponent),\n  ]\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n    DragDropModule\n  ],\n  declarations: [\n    DragPluginDefaultTemplatesComponent,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  exports: [\n    DragDropModule,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  // TODO: remove when ViewEngine is no longer supported by angular (V11 ???)\n  entryComponents: [ DragPluginDefaultTemplatesComponent ]\n})\nexport class PblNgridDragModule {\n\n  static readonly NGRID_PLUGIN = ngridPlugins();\n\n  static withDefaultTemplates(): ModuleWithProviders<PblNgridDragModule> {\n    return {\n      ngModule: PblNgridDragModule,\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\n    };\n  }\n}\n"]}
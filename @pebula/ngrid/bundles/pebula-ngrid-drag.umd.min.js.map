{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/v7-compat.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","PblDropListRef","_this","_super","apply","beforeExit","Subject","tslib_1.__extends","withElement","element","coerceElement","dispose","complete","DropListRef","PblDragRef","args","_i","rootElementChanged","EventEmitter","exited","subscribe","container","item","withRootElement","rootElement","getRootElement","prev","curr","DragRef","DEFAULT_CONFIG","dragStartThreshold","pointerDirectionChangeThreshold","PblDragDrop","_document","_ngZone","_viewportRuler","_dragDropRegistry","createDrag","config","createDropList","Injectable","providedIn","Inject","DOCUMENT","NgZone","ViewportRuler","DragDropRegistry","CdkLazyDropList","_draggablesSet","Set","ngOnInit","pblDropListRef","Error","_dropListRef","beforeStarted","addDrag","drag","add","_draggables","reset","from","values","notifyOnChanges","removeDrag","result","delete","originalElement","directContainerElement","nativeElement","querySelector","ElementRef","Directive","selector","exportAs","providers","provide","DragDrop","useExisting","CDK_DROP_LIST","useClass","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","Input","CdkDropList","CdkLazyDrag","_hostNotRoot","_rootClass","_a","classList","remove","split","_b","cdkDropList","dropContainer","_dragRef","_withDropContainer","pblDragRef","event","rootElementSelectorClass","hostNotRoot","ngAfterViewInit","started","startedEvent","element_1","initialRootElementParent_1","nextSibling","ended","pipe","take","endedEvent","appendChild","ngOnDestroy","[class.cdk-drag-dragging]","CdkDrag","PblDragHandle","parentDrag","CdkDragHandle","type","Optional","isMaterial7","dragDrop","changeDetectorRef","dir","group","dragDropRegistry","document","cdkDrag","_viewContainerRef","_dir","_changeDetectorRef","viewportRuler","PLUGIN_KEY","_uniqueIdCounter","PblNgridRowReorderPluginDirective","grid","pluginCtrl","id","_rowReorder","_removePlugin","setPlugin","dropped","previousIndex","ds","source","indexOf","draggedContext","row","currentIndex","renderStart","contextApi","clear","moveItem","_cdkTable","syncRows","coerceBooleanProperty","PblNgridComponent","PblNgridPluginController","ChangeDetectorRef","Directionality","CdkDropListGroup","inputs","[class.pbl-row-reorder]","useValue","undefined","PblNgridRowReorderPluginDirective_1","SkipSelf","NgridPlugin","PblNgridRowDragDirective","rootElementSelector","_context","col","_draggedContext","find","plugin","getPlugin","ViewContainerRef","CDK_DRAG_CONFIG","checkGroupLockConstraint","column","tslib_1.__values","groups","_c","g","groupStore","lockColumns","isInGroup","extendGrid","PblColumn","extendProperty","PblColumnGroup","PblNgridColumnReorderPluginDirective","table","orientation","dragging","BehaviorSubject","_columnReorder","_manualOverride","manualOverride","columnApi","moveColumn","isDragging","el","lastSwap","monkeyPatchDropListRef","_getItemIndexFromPointerPosition","bind","_itemPositions","_pblReset","lastSorted","pblGetPositionCacheItems","forEach","sibling","index","data","getCells","style","transform","_sortItem","enter","pointerX","pointerY","isHorizontal","clientRect","left","offset","top","pointerDelta","siblings","s","newIndex","pblGetItemIndexFromPointerPosition","oldOrder","slice","siblingAtNewPosition","wontBudge","itemAtOriginalPosition","findIndex","currentItem","start","Math","min","itemsDraggedOver","abs","itemsDraggedOver_1","itemsDraggedOver_1_1","dragItem","PblNgridColumnReorderPluginDirective_1","Output","runOnce","PblNgridColumnDragDirective","disabled","reorder","columnReorder","columnDef","cache","queryCellElements","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","PblNgridDragResizeComponent","_config","grabAreaWidth","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","_pointerDown","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","x","_pickupPositionOnPage","distanceY","y","_hasStartedDragging","_hasMoved","preventDefault","stopPropagation","newWidth","max","_initialWidth","maxWidth","minWidth","_lastWidth","updateWidth","resetColumnsWidth","sizeInfo","updateSize","netWidth","_pointerUp","_isDragging","_removeSubscriptions","stopDragging","resizeColumn","registerDragItem","isPblColumn","onStable","asObservable","enable","userSelect","_getRootElement","parentElement","addEventListener","dest","extendStyles","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","removeEventListener","unsubscribe","removeDragItem","onDoubleClick","autoSizeColumn","referenceElement","_isTouchEvent","button","pointerMove","auditTime","animationFrameScheduler","pointerUp","_scrollPosition","getViewportScrollPosition","startDragging","point","touches","pageX","pageY","startsWith","Component","[style.width.px]","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","HostListener","PblNgridCellDraggerRefDirective","tRef","registry","name","kind","shouldRender","context","hasPlugin","TemplateRef","PblNgridRegistryService","PblNgridMultiTemplateRegistry","PblNgridAggregationContainerDirective","connectedTo","pending","addGroupBy","entered","getPlaceholderElement","display","PblNgridCellResizerRefDirective","resize","DragPluginDefaultTemplatesComponent","PblNgridDragModule","withDefaultTemplates","ngModule","provideCommon","component","NgModule","imports","CommonModule","PblNgridModule","DragDropModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nimport { PblDragRef } from './drag-ref';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ViewportRuler} from '@angular/cdk/scrolling';\r\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\r\n\r\nimport { PblDragRef } from './drag-ref'\r\nimport { PblDropListRef } from './drop-list-ref';\r\n\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n  dragStartThreshold: 5,\r\n  pointerDirectionChangeThreshold: 5\r\n};\r\n\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class PblDragDrop {\r\n  constructor(@Inject(DOCUMENT) private _document: any,\r\n              private _ngZone: NgZone,\r\n              private _viewportRuler: ViewportRuler,\r\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\r\n\r\n  /**\r\n   * Turns an element into a draggable item.\r\n   * @param element Element to which to attach the dragging functionality.\r\n   * @param config Object used to configure the dragging behavior.\r\n   */\r\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\r\n                      config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\r\n\r\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\r\n  }\r\n\r\n  /**\r\n   * Turns an element into a drop list.\r\n   * @param element Element to which to attach the drop list functionality.\r\n   */\r\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\r\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\r\n  }\r\n}\r\n","import { take } from 'rxjs/operators';\r\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\r\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST, DragDrop } from '@angular/cdk/drag-drop';\r\nimport { PblDropListRef } from './drop-list-ref';\r\nimport { PblDragRef } from './drag-ref';\r\nimport { PblDragDrop } from './drag-drop';\r\n\r\n@Directive({\r\n  selector: '[cdkLazyDropList]',\r\n  exportAs: 'cdkLazyDropList',\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\r\n  ],\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n  }\r\n})\r\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\r\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\r\n\r\n  /**\r\n   * Selector that will be used to determine the direct container element, starting from\r\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\r\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\r\n   * of the draggable elements.\r\n   */\r\n  // tslint:disable-next-line:no-input-rename\r\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\r\n\r\n  _draggables: QueryList<CdkDrag>;\r\n\r\n  /* private */ originalElement: ElementRef<HTMLElement>;\r\n  /* private */ _draggablesSet = new Set<CdkDrag>();\r\n\r\n  ngOnInit(): void {\r\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\r\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\r\n    }\r\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\r\n  }\r\n\r\n  addDrag(drag: CdkDrag): void {\r\n    this._draggablesSet.add(drag);\r\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\r\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\r\n  }\r\n\r\n  removeDrag(drag: CdkDrag): boolean {\r\n    const result = this._draggablesSet.delete(drag);\r\n    if (result) {\r\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\r\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /* protected */ beforeStarted(): void {\r\n    // This is a workaround for https://github.com/angular/material2/pull/14153\r\n    // Working around the missing capability for selecting a container element that is not the drop container host.\r\n    if (!this.originalElement) {\r\n      this.originalElement = this.element;\r\n    }\r\n    if (this.directContainerElement) {\r\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\r\n      this.element = new ElementRef<HTMLElement>(element);\r\n    } else {\r\n      this.element = this.originalElement;\r\n    }\r\n    this.pblDropListRef.withElement(this.element);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[cdkLazyDrag]',\r\n  exportAs: 'cdkLazyDrag',\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drag',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n  ],\r\n})\r\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\r\n   */\r\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\r\n    if (value !== this._rootClass && this._hostNotRoot) {\r\n      if (this._rootClass) {\r\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\r\n      }\r\n      if (value) {\r\n        this.getRootElement().classList.add(...value.split(' '));\r\n      }\r\n    }\r\n    this._rootClass = value;\r\n  }\r\n\r\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\r\n\r\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\r\n  set cdkDropList(value: Z) {\r\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\r\n    if (this.cdkDropList) {\r\n      this.cdkDropList.removeDrag(this);\r\n    }\r\n    this.dropContainer = value;\r\n    if (value) {\r\n      this._dragRef._withDropContainer(value._dropListRef);\r\n      value.addDrag(this);\r\n    }\r\n  }\r\n\r\n  /* private */ _rootClass: string;\r\n  /* private */ _hostNotRoot = false;\r\n\r\n  ngOnInit(): void {\r\n    if (this.pblDragRef instanceof PblDragRef === false) {\r\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\r\n    }\r\n    this.pblDragRef.rootElementChanged.subscribe( event => {\r\n      const rootElementSelectorClass = this._rootClass;\r\n      const hostNotRoot = this.element.nativeElement !== event.curr;\r\n\r\n      if (rootElementSelectorClass) {\r\n        if (this._hostNotRoot) {\r\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\r\n        }\r\n        if (hostNotRoot) {\r\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\r\n        }\r\n      }\r\n      this._hostNotRoot = hostNotRoot;\r\n    });\r\n  }\r\n\r\n  // This is a workaround for https://github.com/angular/material2/pull/14158\r\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\r\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\r\n  ngAfterViewInit(): void {\r\n    this.started.subscribe( startedEvent => {\r\n      if (this.dropContainer) {\r\n        const element = this.getRootElement();\r\n        const initialRootElementParent = element.parentNode as HTMLElement;\r\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\r\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\r\n        }\r\n      }\r\n    });\r\n\r\n    /* super.ngAfterViewInit(); */\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.cdkDropList) {\r\n      this.cdkDropList.removeDrag(this);\r\n    }\r\n    /* super.ngOnDestroy(); */\r\n  }\r\n}\r\n\r\n/** Handle that can be used to drag and CdkDrag instance. */\r\n@Directive({\r\n  selector: '[pblDragHandle]',\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drag-handle'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: CdkDragHandle,\r\n      useExisting: PblDragHandle\r\n    }\r\n  ]\r\n})\r\nexport class PblDragHandle extends CdkDragHandle {\r\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\r\n}\r\n","import { NgZone, ChangeDetectorRef, ElementRef, ViewContainerRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DragRefConfig, DragDrop, CdkDropListGroup, CdkDropList, CdkDrag, DragDropRegistry } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nexport const isMaterial7 = CdkDropList.length === 7;\n\nexport function cdkDropList(element: ElementRef<HTMLElement>,\n                            dragDrop: DragDrop,\n                            changeDetectorRef: ChangeDetectorRef,\n                            dir?: Directionality,\n                            group?: CdkDropListGroup<CdkDropList>,\n                            // for v7 compat\n                            dragDropRegistry?: DragDropRegistry<any, any>,\n                            document?: any,): ConstructorParameters<typeof CdkDropList> {\n  return isMaterial7\n    ? [ element, dragDropRegistry as any, changeDetectorRef, dir, group, document, dragDrop ] as any\n    : [ element, dragDrop, changeDetectorRef, dir, group ]\n  ;\n}\n\nexport function cdkDrag(element: ElementRef<HTMLElement>,\n                        dropContainer: CdkDropList,\n                        _document: any,\n                        _ngZone: NgZone,\n                        _viewContainerRef: ViewContainerRef,\n                        config: DragRefConfig,\n                        _dir: Directionality,\n                        dragDrop: DragDrop,\n                        _changeDetectorRef: ChangeDetectorRef,\n                        // for v7 compat\n                        viewportRuler: ViewportRuler,\n                        dragDropRegistry?: DragDropRegistry<any, any>,): ConstructorParameters<typeof CdkDrag> {\n  return isMaterial7\n    ? [ element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir, dragDrop ] as any\n    : [ element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef ]\n  ;\n}\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  DragDrop,\r\n  CdkDropList,\r\n  CdkDropListGroup,\r\n  DragDropRegistry,\r\n  CdkDrag,\r\n  CDK_DROP_LIST,\r\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\r\n} from '@angular/cdk/drag-drop';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\n\r\nimport { PblNgridComponent, NgridPlugin, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\r\nimport { cdkDropList, cdkDrag } from '../v7-compat';\r\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\r\nimport { PblDropListRef } from '../core/drop-list-ref';\r\nimport { PblDragRef } from '../core/drag-ref';\r\nimport { PblDragDrop } from '../core/drag-drop';\r\n\r\ndeclare module '@pebula/ngrid/lib/ext/types' {\r\n  interface PblNgridPluginExtension {\r\n    rowReorder?: PblNgridRowReorderPluginDirective;\r\n  }\r\n}\r\n\r\nconst PLUGIN_KEY: 'rowReorder' = 'rowReorder';\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n@NgridPlugin({ id: PLUGIN_KEY })\r\n@Directive({\r\n  selector: 'pbl-ngrid[rowReorder]',\r\n  exportAs: 'pblNgridRowReorder',\r\n  inputs: [\r\n    'directContainerElement:cdkDropListDirectContainerElement'\r\n  ],\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n    '[class.pbl-row-reorder]': 'rowReorder && !this.grid.ds?.sort.sort?.order && !this.grid.ds?.filter?.filter',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CdkDropListGroup, useValue: undefined },\r\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\r\n  ],\r\n})\r\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\r\n\r\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\r\n\r\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\r\n  set rowReorder(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n    this._rowReorder = value;\r\n  }\r\n\r\n  private _rowReorder = false;\r\n  private _removePlugin: (grid: PblNgridComponent<any>) => void;\r\n\r\n  constructor(public grid: PblNgridComponent<T>,\r\n              pluginCtrl: PblNgridPluginController,\r\n              element: ElementRef<HTMLElement>,\r\n              dragDrop: DragDrop,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() dir?: Directionality,\r\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\r\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\r\n              @Optional() @Inject(DOCUMENT) _document?: any) {\r\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\r\n    // super(element, dragDrop, changeDetectorRef, dir, group);\r\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\r\n\r\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\r\n      const item = event.item as PblNgridRowDragDirective<T>;\r\n\r\n      const previousIndex = grid.ds.source.indexOf(item.draggedContext.row);\r\n      const currentIndex = event.currentIndex + grid.ds.renderStart;\r\n\r\n      this.grid.contextApi.clear();\r\n      this.grid.ds.moveItem(previousIndex, currentIndex, true);\r\n      this.grid._cdkTable.syncRows('data');\r\n    });\r\n  }\r\n\r\n  /* CdkLazyDropList start */\r\n  /**\r\n   * Selector that will be used to determine the direct container element, starting from\r\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\r\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\r\n   * of the draggable elements.\r\n   */\r\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\r\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\r\n  originalElement: ElementRef<HTMLElement>;\r\n  _draggablesSet = new Set<CdkDrag>();\r\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\r\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\r\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\r\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\r\n  /* CdkLazyDropList end */\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this._removePlugin(this.grid);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[pblNgridRowDrag]',\r\n  exportAs: 'pblNgridRowDrag',\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drag',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\r\n  ]\r\n})\r\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\r\n  rootElementSelector = 'pbl-ngrid-row';\r\n\r\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\r\n    return this._context;\r\n  }\r\n\r\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\r\n    this._context = value;\r\n\r\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\r\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\r\n    this.cdkDropList = plugin || undefined;\r\n  }\r\n\r\n  /**\r\n   * Reference to the last dragged context.\r\n   *\r\n   * This context is not similar to the `context` property.\r\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\r\n   * the context will point to the row in view and not the original cell.\r\n   */\r\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\r\n    return this._draggedContext;\r\n  }\r\n\r\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\r\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\r\n\r\n  private pluginCtrl: PblNgridPluginController;\r\n\r\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\r\n  // TODO: Try to remove when supporting IVY\r\n  constructor(element: ElementRef<HTMLElement>,\r\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\r\n              @Inject(DOCUMENT) _document: any,\r\n              _ngZone: NgZone,\r\n              _viewContainerRef: ViewContainerRef,\r\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\r\n              _dir: Directionality,\r\n              dragDrop: DragDrop,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n\r\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\r\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\r\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\r\n    // super(\r\n    //   element,\r\n    //   dropContainer,\r\n    //   _document,\r\n    //   _ngZone,\r\n    //   _viewContainerRef,\r\n    //   config,\r\n    //   _dir,\r\n    //   dragDrop,\r\n    //   _changeDetectorRef,\r\n    // );\r\n\r\n    this.started.subscribe( (event: CdkDragStart) => {\r\n      const { col, row, grid, value }  = this._context;\r\n      this._draggedContext = { col, row, grid, value };\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /* CdkLazyDrag start */\r\n    /**\r\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\r\n   */\r\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\r\n    if (value !== this._rootClass && this._hostNotRoot) {\r\n      if (this._rootClass) {\r\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\r\n      }\r\n      if (value) {\r\n        this.getRootElement().classList.add(...value.split(' '));\r\n      }\r\n    }\r\n    this._rootClass = value;\r\n  }\r\n\r\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\r\n\r\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\r\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\r\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\r\n    if (this.cdkDropList) {\r\n      this.cdkDropList.removeDrag(this);\r\n    }\r\n    this.dropContainer = value;\r\n    if (value) {\r\n      this._dragRef._withDropContainer(value._dropListRef);\r\n      value.addDrag(this);\r\n    }\r\n  }\r\n\r\n  _rootClass: string;\r\n  _hostNotRoot = false;\r\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\r\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\r\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\r\n  /* CdkLazyDrag end */\r\n}\r\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  SkipSelf,\r\n  Output,\r\n  OnDestroy,\r\n  Optional,\r\n  OnInit,\r\n  ViewContainerRef,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  DragDrop,\r\n  CdkDrag,\r\n  CdkDragDrop,\r\n  CDK_DROP_LIST,\r\n  DragRef,\r\n  CdkDropListGroup,\r\n  CdkDropList,\r\n  CDK_DRAG_CONFIG,\r\n  DragRefConfig,\r\n  DragDropRegistry,\r\n} from '@angular/cdk/drag-drop';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\n\r\nimport { PblNgridComponent, NgridPlugin, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\r\nimport { cdkDropList, cdkDrag } from '../v7-compat';\r\nimport { CdkLazyDropList, CdkLazyDrag, PblDragDrop } from '../core';\r\nimport { PblDropListRef } from '../core/drop-list-ref';\r\nimport { PblDragRef } from '../core/drag-ref';\r\nimport { extendGrid } from './extend-grid';\r\n\r\ndeclare module '@pebula/ngrid/lib/ext/types' {\r\n  interface PblNgridPluginExtension {\r\n    columnReorder?: PblNgridColumnReorderPluginDirective;\r\n  }\r\n}\r\n\r\nexport const PLUGIN_KEY: 'columnReorder' = 'columnReorder';\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n@NgridPlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\r\n@Directive({\r\n  selector: 'pbl-ngrid[columnReorder]',\r\n  exportAs: 'pblNgridColumnReorder',\r\n  inputs: [\r\n    'directContainerElement:cdkDropListDirectContainerElement'\r\n  ],\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\r\n  ],\r\n})\r\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\r\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\r\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\r\n  set columnReorder(value: boolean) {\r\n    value = coerceBooleanProperty(value);\r\n    this._columnReorder = value;\r\n  }\r\n\r\n  /**\r\n   * When true, will not move the column on drop.\r\n   * Instead you need to handle the dropped event.\r\n   */\r\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\r\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\r\n\r\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n  private _columnReorder = false;\r\n  private _manualOverride = false;\r\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\r\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\r\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\r\n\r\n  // Stuff to workaround encapsulation in CdkDropList\r\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\r\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\r\n  }\r\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\r\n    return (this._dropListRef as any)._itemPositions;\r\n  }\r\n\r\n  constructor(public table: PblNgridComponent<T>,\r\n              pluginCtrl: PblNgridPluginController,\r\n              element: ElementRef<HTMLElement>,\r\n              dragDrop: DragDrop,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() dir?: Directionality,\r\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\r\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\r\n              @Optional() @Inject(DOCUMENT) _document?: any) {\r\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\r\n     // super(element, dragDrop, changeDetectorRef, dir, group);\r\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\r\n\r\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\r\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\r\n      if (!this.manualOverride) {\r\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\r\n      }\r\n    });\r\n\r\n    this.dragging.subscribe( isDragging => {\r\n      const el = element.nativeElement;\r\n      if (isDragging) {\r\n        el.classList.add('pbl-ngrid-column-list-dragging');\r\n      } else {\r\n        el.classList.remove('pbl-ngrid-column-list-dragging');\r\n      }\r\n      this.lastSwap = undefined;\r\n    });\r\n\r\n    this.monkeyPatchDropListRef();\r\n  }\r\n\r\n  /* CdkLazyDropList start */\r\n  /**\r\n   * Selector that will be used to determine the direct container element, starting from\r\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\r\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\r\n   * of the draggable elements.\r\n   */\r\n  directContainerElement: string;\r\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\r\n  originalElement: ElementRef<HTMLElement>;\r\n  _draggablesSet = new Set<CdkDrag>();\r\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\r\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\r\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\r\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\r\n  /* CdkLazyDropList end */\r\n\r\n  ngOnInit(): void {\r\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\r\n    this.dropped.subscribe( e => this._pblReset() );\r\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this._removePlugin(this.table);\r\n  }\r\n\r\n  /* protected */ beforeStarted(): void {\r\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\r\n    this.lastSorted = undefined;\r\n    this.dragging.next(true);\r\n  }\r\n\r\n  private _pblReset(): void {\r\n    this.dragging.next(false);\r\n    const siblings = this.pblGetPositionCacheItems;\r\n    siblings.forEach((sibling, index) => {\r\n      for (const c of sibling.drag.data.getCells()) {\r\n        c.style.transform = ``;\r\n      }\r\n    });\r\n  }\r\n\r\n  private monkeyPatchDropListRef(): void {\r\n    const { _sortItem, enter } = this._dropListRef;\r\n\r\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\r\n      const lastSorted = this.lastSorted\r\n      this.lastSorted = undefined;\r\n      if (lastSorted && lastSorted.drag === item) {\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\r\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\r\n      }\r\n      enter.call(this._dropListRef, item, pointerX, pointerY);\r\n    };\r\n\r\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\r\n      const siblings = this.pblGetPositionCacheItems;\r\n      this.lastSorted = siblings.find( s => s.drag === item );\r\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\r\n      if (newIndex === -1 && siblings.length > 0) {\r\n        return;\r\n      }\r\n      const oldOrder = siblings.slice();\r\n      const isHorizontal = this.orientation === 'horizontal';\r\n      const siblingAtNewPosition = siblings[newIndex];\r\n\r\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\r\n        return;\r\n      }\r\n\r\n      // we now need to find if between current and new position there are items with `wontBudge`\r\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\r\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\r\n      const start = Math.min(newIndex, currentIndex)\r\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\r\n      for (const dragItem of itemsDraggedOver) {\r\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\r\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\r\n        return;\r\n      }\r\n\r\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\r\n\r\n      this.lastSwap = siblingAtNewPosition.drag;\r\n\r\n      if (isHorizontal) {\r\n        siblings.forEach((sibling, index) => {\r\n          // Don't do anything if the position hasn't changed.\r\n          if (oldOrder[index] === sibling) {\r\n            return;\r\n          }\r\n\r\n          for (const c of sibling.drag.data.getCells()) {\r\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[pblNgridColumnDrag]',\r\n  exportAs: 'pblNgridColumnDrag',\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drag',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\r\n  ]\r\n})\r\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\r\n  rootElementSelector = 'pbl-ngrid-header-cell';\r\n\r\n  column: PblColumn;\r\n\r\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\r\n    this._context = value;\r\n    this.column = value && value.col;\r\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\r\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\r\n    this.cdkDropList = plugin || undefined;\r\n    this.disabled = this.column && this.column.reorder ? false : true;\r\n  }\r\n\r\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\r\n  private pluginCtrl: PblNgridPluginController;\r\n  private cache: HTMLElement[];\r\n\r\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\r\n  // TODO: Try to remove when supporting IVY\r\n  constructor(element: ElementRef<HTMLElement>,\r\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\r\n              @Inject(DOCUMENT) _document: any,\r\n              _ngZone: NgZone,\r\n              _viewContainerRef: ViewContainerRef,\r\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\r\n              _dir: Directionality,\r\n              dragDrop: DragDrop,\r\n              _changeDetectorRef: ChangeDetectorRef,\r\n\r\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\r\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\r\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\r\n    // super(\r\n    //   element,\r\n    //   dropContainer,\r\n    //   _document,\r\n    //   _ngZone,\r\n    //   _viewContainerRef,\r\n    //   config,\r\n    //   _dir,\r\n    //   dragDrop,\r\n    //   _changeDetectorRef,\r\n    // );\r\n  }\r\n\r\n  /* CdkLazyDrag start */\r\n  /**\r\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\r\n   */\r\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\r\n    if (value !== this._rootClass && this._hostNotRoot) {\r\n      if (this._rootClass) {\r\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\r\n      }\r\n      if (value) {\r\n        this.getRootElement().classList.add(...value.split(' '));\r\n      }\r\n    }\r\n    this._rootClass = value;\r\n  }\r\n\r\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\r\n\r\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\r\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\r\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\r\n    if (this.cdkDropList) {\r\n      this.cdkDropList.removeDrag(this);\r\n    }\r\n    this.dropContainer = value;\r\n    if (value) {\r\n      this._dragRef._withDropContainer(value._dropListRef);\r\n      value.addDrag(this);\r\n    }\r\n  }\r\n\r\n  _rootClass: string;\r\n  _hostNotRoot = false;\r\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\r\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\r\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\r\n  /* CdkLazyDrag end */\r\n\r\n  ngAfterViewInit(): void {\r\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\r\n    super.ngAfterViewInit();\r\n\r\n    this._dragRef.beforeStarted.subscribe( () => {\r\n      const { cdkDropList } = this;\r\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\r\n        // we don't allow a new dragging session before the previous ends.\r\n        // this sound impossible, but due to animation transitions its actually is.\r\n        // if the `transitionend` is long enough, a new drag can start...\r\n        //\r\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\r\n        if (cdkDropList._dropListRef.isDragging()) {\r\n          return this.disabled = true;\r\n        }\r\n      }\r\n    });\r\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\r\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\r\n  }\r\n\r\n  getCells(): HTMLElement[] {\r\n    if (!this.cache) {\r\n      this.cache = this._context.col.columnDef.queryCellElements('table');\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  reset(): void {\r\n    super.reset();\r\n    if (this.cache) {\r\n      for (const el of this.cache) {\r\n        el.style.transform = ``;\r\n      }\r\n      this.cache = undefined;\r\n    }\r\n  }\r\n}\r\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  Optional,\n  OnDestroy,\n  NgZone,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkDragConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, NgridPlugin, isPblColumn } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@NgridPlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, grid } = value;\n      if (isPblColumn(col)) {\n        this.column = col;\n        this.grid = grid;\n        return;\n      }\n    }\n    this.column = this.grid = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  /** @deprecated use grid instead */\n  get table(): PblNgridComponent<any> { return this.grid; }\n  grid: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.grid.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total grid minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner grid.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.updateWidth(`${newWidth}px`);\n      this.grid.resetColumnsWidth();\n      // `this.column.updateWidth` will update the grid width cell only, which will trigger a resize that will update all other cells\n      // `this.grid.resetColumnsWidth()` will re-adjust all other grid width cells, and if their size changes they will trigger the resize event...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.grid.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.grid);\n    return pluginCtrl.hasPlugin(PLUGIN_KEY);\n  }\n}\n","// tslint:disable:no-output-rename\r\n\r\nimport {\r\n  Inject,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport {\r\n  DragDrop,\r\n  CdkDropListGroup,\r\n  CdkDropList,\r\n  CdkDrag,\r\n  CDK_DROP_LIST,\r\n  DragDropRegistry,\r\n} from '@angular/cdk/drag-drop';\r\n\r\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\r\nimport { cdkDropList } from '../v7-compat';\r\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\r\nimport { PblDragRef } from '../core/drag-ref';\r\nimport { PblDropListRef } from '../core/drop-list-ref';\r\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\r\nimport { PblDragDrop } from '../core';\r\n\r\nlet _uniqueIdCounter = 0;\r\n\r\n@Directive({\r\n  selector: '[pblAggregationContainer]',\r\n  exportAs: 'pblAggregationContainer',\r\n  inputs: [\r\n    'directContainerElement:cdkDropListDirectContainerElement'\r\n  ],\r\n  host: { // tslint:disable-line:use-host-property-decorator\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n  },\r\n  providers: [\r\n    { provide: DragDrop, useExisting: PblDragDrop },\r\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\r\n  ],\r\n})\r\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\r\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\r\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\r\n\r\n  pending: PblColumn;\r\n\r\n  constructor(public grid: PblNgridComponent<T>,\r\n              pluginCtrl: PblNgridPluginController,\r\n              element: ElementRef<HTMLElement>,\r\n              dragDrop: DragDrop,\r\n              changeDetectorRef: ChangeDetectorRef,\r\n              @Optional() dir?: Directionality,\r\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\r\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\r\n              @Optional() @Inject(DOCUMENT) _document?: any,) {\r\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\r\n    // super(element, dragDrop, changeDetectorRef, dir, group);\r\n    const reorder = pluginCtrl.getPlugin('columnReorder');\r\n    reorder.connectedTo = this.id;\r\n\r\n    this.pblDropListRef.dropped\r\n      .subscribe( event => {\r\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\r\n        this.pending = undefined;\r\n        this.grid.columnApi.addGroupBy(item.data.column);\r\n      });\r\n\r\n    this.pblDropListRef.entered\r\n      .subscribe( event => {\r\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\r\n        this.pending = item.data.column;\r\n        item.getPlaceholderElement().style.display = 'none';\r\n        for (const c of item.data.getCells()) {\r\n          c.style.display = 'none';\r\n        }\r\n      });\r\n\r\n    this.pblDropListRef.exited\r\n      .subscribe( event => {\r\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\r\n        this.pending = undefined;\r\n        item.getPlaceholderElement().style.display = '';\r\n        for (const c of item.data.getCells()) {\r\n          c.style.display = '';\r\n        }\r\n      });\r\n  }\r\n\r\n    /* CdkLazyDropList start */\r\n  /**\r\n   * Selector that will be used to determine the direct container element, starting from\r\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\r\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\r\n   * of the draggable elements.\r\n   */\r\n  directContainerElement: string;\r\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\r\n  originalElement: ElementRef<HTMLElement>;\r\n  _draggablesSet = new Set<CdkDrag>();\r\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\r\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\r\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\r\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\r\n  /* CdkLazyDropList end */\r\n\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragDropModule, DragDrop } from '@angular/cdk/drag-drop';\r\n\r\nimport { PblNgridModule, provideCommon } from '@pebula/ngrid';\r\n\r\nimport { PblDragDrop } from './drag-and-drop/core/drag-drop';\r\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\r\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective } from './drag-and-drop/row/row-reorder-plugin';\r\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective } from './drag-and-drop/column/column-reorder-plugin';\r\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\r\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\r\n\r\nimport { PblNgridDragResizeComponent } from './column-resize/column-resize.component';\r\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\r\n\r\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    PblNgridModule,\r\n    DragDropModule\r\n  ],\r\n  declarations: [\r\n    DragPluginDefaultTemplatesComponent,\r\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\r\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\r\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\r\n    PblNgridAggregationContainerDirective,\r\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\r\n  ],\r\n  exports: [\r\n    DragDropModule,\r\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\r\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\r\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\r\n    PblNgridAggregationContainerDirective,\r\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\r\n  ],\r\n  providers: [\r\n    PblDragDrop,\r\n  ],\r\n  entryComponents: [ DragPluginDefaultTemplatesComponent ],\r\n})\r\nexport class PblNgridDragModule {\r\n\r\n  static withDefaultTemplates(): ModuleWithProviders {\r\n    return {\r\n      ngModule: PblNgridDragModule,\r\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\r\n    };\r\n  }\r\n}\r\n"]}
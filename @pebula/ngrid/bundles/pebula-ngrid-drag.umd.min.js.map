{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/v7-compat.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","PblDropListRef","_this","_super","apply","beforeExit","Subject","tslib_1.__extends","withElement","element","coerceElement","dispose","complete","DropListRef","PblDragRef","args","_i","rootElementChanged","EventEmitter","exited","subscribe","container","item","withRootElement","rootElement","getRootElement","prev","curr","DragRef","CdkLazyDropList","_draggablesSet","Set","ngOnInit","pblDropListRef","Error","_dropListRef","beforeStarted","addDrag","drag","add","_draggables","reset","from","values","notifyOnChanges","removeDrag","result","delete","originalElement","directContainerElement","nativeElement","querySelector","ElementRef","Directive","selector","exportAs","providers","provide","CDK_DROP_LIST","useClass","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","Input","CdkDropList","CdkLazyDrag","_hostNotRoot","_rootClass","_a","classList","remove","split","_b","cdkDropList","dropContainer","_dragRef","_withDropContainer","pblDragRef","event","rootElementSelectorClass","hostNotRoot","ngAfterViewInit","started","startedEvent","element_1","initialRootElementParent_1","nextSibling","ended","pipe","take","endedEvent","appendChild","ngOnDestroy","[class.cdk-drag-dragging]","CdkDrag","PblDragHandle","parentDrag","CdkDragHandle","useExisting","type","Optional","isMaterial7","dragDrop","changeDetectorRef","dir","group","dragDropRegistry","document","cdkDrag","_document","_ngZone","_viewContainerRef","config","_dir","_changeDetectorRef","viewportRuler","PLUGIN_KEY","_uniqueIdCounter","PblNgridRowReorderPluginDirective","table","pluginCtrl","id","_rowReorder","_removePlugin","setPlugin","dropped","previousIndex","ds","source","indexOf","draggedContext","row","currentIndex","renderStart","contextApi","clear","moveItem","_cdkTable","syncRows","coerceBooleanProperty","inputs","[class.pbl-row-reorder]","CdkDropListGroup","useValue","undefined","PblNgridRowReorderPluginDirective_1","PblNgridComponent","PblNgridPluginController","DragDrop","ChangeDetectorRef","Directionality","SkipSelf","DragDropRegistry","Inject","DOCUMENT","TablePlugin","PblNgridRowDragDirective","rootElementSelector","_context","col","_draggedContext","find","plugin","getPlugin","NgZone","ViewContainerRef","CDK_DRAG_CONFIG","ViewportRuler","DEFAULT_CONFIG","dragStartThreshold","pointerDirectionChangeThreshold","PblDragDrop","_viewportRuler","_dragDropRegistry","createDrag","createDropList","Injectable","providedIn","checkGroupLockConstraint","column","tslib_1.__values","groups","_c","g","groupStore","lockColumns","isInGroup","extendGrid","PblColumn","extendProperty","PblColumnGroup","PblNgridColumnReorderPluginDirective","orientation","dragging","BehaviorSubject","_columnReorder","_manualOverride","manualOverride","columnApi","moveColumn","isDragging","el","lastSwap","monkeyPatchDropListRef","_getItemIndexFromPointerPosition","bind","_itemPositions","_pblReset","lastSorted","pblGetPositionCacheItems","forEach","sibling","index","data","getCells","style","transform","_sortItem","enter","pointerX","pointerY","isHorizontal","clientRect","left","offset","top","pointerDelta","siblings","s","newIndex","pblGetItemIndexFromPointerPosition","oldOrder","slice","siblingAtNewPosition","wontBudge","itemAtOriginalPosition","findIndex","currentItem","start","Math","min","itemsDraggedOver","abs","itemsDraggedOver_1","itemsDraggedOver_1_1","dragItem","PblNgridColumnReorderPluginDirective_1","Output","runOnce","PblNgridColumnDragDirective","disabled","reorder","columnReorder","columnDef","cache","queryCellElements","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","PblNgridDragResizeComponent","_config","grabAreaWidth","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","_pointerDown","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","x","_pickupPositionOnPage","distanceY","y","_hasStartedDragging","_hasMoved","preventDefault","stopPropagation","newWidth","max","_initialWidth","maxWidth","minWidth","_lastWidth","width","resetColumnsWidth","applyWidth","sizeInfo","updateSize","netWidth","_pointerUp","_isDragging","_removeSubscriptions","stopDragging","resizeColumn","registerDragItem","onStable","asObservable","enable","userSelect","_getRootElement","parentElement","addEventListener","dest","extendStyles","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","removeEventListener","unsubscribe","removeDragItem","onDoubleClick","autoSizeColumn","referenceElement","_isTouchEvent","button","pointerMove","auditTime","animationFrameScheduler","pointerUp","_scrollPosition","getViewportScrollPosition","startDragging","point","touches","pageX","pageY","startsWith","Component","[style.width.px]","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","HostListener","PblNgridCellDraggerRefDirective","tRef","registry","name","kind","shouldRender","context","hasPlugin","TemplateRef","PblNgridRegistryService","PblNgridMultiTemplateRegistry","PblNgridAggregationContainerDirective","connectedTo","pending","addGroupBy","entered","getPlaceholderElement","display","PblNgridCellResizerRefDirective","resize","DragPluginDefaultTemplatesComponent","PblNgridDragModule","withDefaultTemplates","ngModule","provideCommon","component","NgModule","imports","CommonModule","PblNgridModule","DragDropModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nimport { PblDragRef } from './drag-ref';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { take } from 'rxjs/operators';\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST } from '@angular/cdk/drag-drop';\nimport { PblDropListRef } from './drop-list-ref';\nimport { PblDragRef } from './drag-ref';\n\n@Directive({\n  selector: '[cdkLazyDropList]',\n  exportAs: 'cdkLazyDropList',\n  providers: [\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\n\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\n\n  _draggables: QueryList<CdkDrag>;\n\n  /* private */ originalElement: ElementRef<HTMLElement>;\n  /* private */ _draggablesSet = new Set<CdkDrag>();\n\n  ngOnInit(): void {\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\n    }\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\n  }\n\n  addDrag(drag: CdkDrag): void {\n    this._draggablesSet.add(drag);\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n  }\n\n  removeDrag(drag: CdkDrag): boolean {\n    const result = this._draggablesSet.delete(drag);\n    if (result) {\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n    }\n    return result;\n  }\n\n  /* protected */ beforeStarted(): void {\n    // This is a workaround for https://github.com/angular/material2/pull/14153\n    // Working around the missing capability for selecting a container element that is not the drop container host.\n    if (!this.originalElement) {\n      this.originalElement = this.element;\n    }\n    if (this.directContainerElement) {\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\n      this.element = new ElementRef<HTMLElement>(element);\n    } else {\n      this.element = this.originalElement;\n    }\n    this.pblDropListRef.withElement(this.element);\n  }\n}\n\n@Directive({\n  selector: '[cdkLazyDrag]',\n  exportAs: 'cdkLazyDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n})\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\n\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\n  set cdkDropList(value: Z) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  /* private */ _rootClass: string;\n  /* private */ _hostNotRoot = false;\n\n  ngOnInit(): void {\n    if (this.pblDragRef instanceof PblDragRef === false) {\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\n    }\n    this.pblDragRef.rootElementChanged.subscribe( event => {\n      const rootElementSelectorClass = this._rootClass;\n      const hostNotRoot = this.element.nativeElement !== event.curr;\n\n      if (rootElementSelectorClass) {\n        if (this._hostNotRoot) {\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\n        }\n        if (hostNotRoot) {\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\n        }\n      }\n      this._hostNotRoot = hostNotRoot;\n    });\n  }\n\n  // This is a workaround for https://github.com/angular/material2/pull/14158\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\n  ngAfterViewInit(): void {\n    this.started.subscribe( startedEvent => {\n      if (this.dropContainer) {\n        const element = this.getRootElement();\n        const initialRootElementParent = element.parentNode as HTMLElement;\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\n        }\n      }\n    });\n\n    /* super.ngAfterViewInit(); */\n  }\n\n  ngOnDestroy(): void {\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    /* super.ngOnDestroy(); */\n  }\n}\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[pblDragHandle]',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag-handle'\n  },\n  providers: [\n    {\n      provide: CdkDragHandle,\n      useExisting: PblDragHandle\n    }\n  ]\n})\nexport class PblDragHandle extends CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\n}\n","import { NgZone, ChangeDetectorRef, ElementRef, ViewContainerRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DragRefConfig, DragDrop, CdkDropListGroup, CdkDropList, CdkDrag, DragDropRegistry } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nexport const isMaterial7 = CdkDropList.length === 7;\n\nexport function cdkDropList(element: ElementRef<HTMLElement>,\n                            dragDrop: DragDrop,\n                            changeDetectorRef: ChangeDetectorRef,\n                            dir?: Directionality,\n                            group?: CdkDropListGroup<CdkDropList>,\n                            // for v7 compat\n                            dragDropRegistry?: DragDropRegistry<any, any>,\n                            document?: any,): ConstructorParameters<typeof CdkDropList> {\n  return isMaterial7\n    ? [ element, dragDropRegistry as any, changeDetectorRef, dir, group, document, dragDrop ] as any\n    : [ element, dragDrop, changeDetectorRef, dir, group ]\n  ;\n}\n\nexport function cdkDrag(element: ElementRef<HTMLElement>,\n                        dropContainer: CdkDropList,\n                        _document: any,\n                        _ngZone: NgZone,\n                        _viewContainerRef: ViewContainerRef,\n                        config: DragRefConfig,\n                        _dir: Directionality,\n                        dragDrop: DragDrop,\n                        _changeDetectorRef: ChangeDetectorRef,\n                        // for v7 compat\n                        viewportRuler: ViewportRuler,\n                        dragDropRegistry?: DragDropRegistry<any, any>,): ConstructorParameters<typeof CdkDrag> {\n  return isMaterial7\n    ? [ element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir, dragDrop ] as any\n    : [ element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef ]\n  ;\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDropList,\n  CdkDropListGroup,\n  DragDropRegistry,\n  CdkDrag,\n  CDK_DROP_LIST,\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    rowReorder?: PblNgridRowReorderPluginDirective;\n  }\n}\n\nconst PLUGIN_KEY: 'rowReorder' = 'rowReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY })\n@Directive({\n  selector: 'pbl-ngrid[rowReorder]',\n  exportAs: 'pblNgridRowReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n    '[class.pbl-row-reorder]': 'rowReorder && !this.table.ds?.sort.sort?.order && !this.table.ds?.filter?.filter',\n  },\n  providers: [\n    { provide: CdkDropListGroup, useValue: undefined },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\n  ],\n})\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\n\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\n\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\n  set rowReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._rowReorder = value;\n  }\n\n  private _rowReorder = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\n      const item = event.item as PblNgridRowDragDirective<T>;\n\n      const previousIndex = table.ds.source.indexOf(item.draggedContext.row);\n      const currentIndex = event.currentIndex + table.ds.renderStart;\n\n      this.table.contextApi.clear();\n      this.table.ds.moveItem(previousIndex, currentIndex, true);\n      this.table._cdkTable.syncRows('data');\n    });\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n}\n\n@Directive({\n  selector: '[pblNgridRowDrag]',\n  exportAs: 'pblNgridRowDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\n  ]\n})\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-row';\n\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._context;\n  }\n\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n  }\n\n  /**\n   * Reference to the last dragged context.\n   *\n   * This context is not similar to the `context` property.\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\n   * the context will point to the row in view and not the original cell.\n   */\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._draggedContext;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n\n  private pluginCtrl: PblNgridPluginController;\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n\n    this.started.subscribe( (event: CdkDragStart) => {\n      const { col, row, table, value }  = this._context;\n      this._draggedContext = { col, row, table, value };\n    });\n\n\n  }\n\n  /* CdkLazyDrag start */\n    /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler} from '@angular/cdk/scrolling';\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\n\nimport { PblDragRef } from './drag-ref'\nimport { PblDropListRef } from './drop-list-ref';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class PblDragDrop {\n  constructor(@Inject(DOCUMENT) private _document: any,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\n\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  SkipSelf,\n  Output,\n  OnDestroy,\n  Optional,\n  OnInit,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDrag,\n  CdkDragDrop,\n  CDK_DROP_LIST,\n  DragRef,\n  CdkDropListGroup,\n  CdkDropList,\n  CDK_DRAG_CONFIG,\n  DragRefConfig,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnReorder?: PblNgridColumnReorderPluginDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnReorder' = 'columnReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Directive({\n  selector: 'pbl-ngrid[columnReorder]',\n  exportAs: 'pblNgridColumnReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\n  ],\n})\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\n  set columnReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._columnReorder = value;\n  }\n\n  /**\n   * When true, will not move the column on drop.\n   * Instead you need to handle the dropped event.\n   */\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\n\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  private _columnReorder = false;\n  private _manualOverride = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\n\n  // Stuff to workaround encapsulation in CdkDropList\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\n  }\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\n    return (this._dropListRef as any)._itemPositions;\n  }\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n     // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\n      if (!this.manualOverride) {\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\n      }\n    });\n\n    this.dragging.subscribe( isDragging => {\n      const el = element.nativeElement;\n      if (isDragging) {\n        el.classList.add('pbl-ngrid-column-list-dragging');\n      } else {\n        el.classList.remove('pbl-ngrid-column-list-dragging');\n      }\n      this.lastSwap = undefined;\n    });\n\n    this.monkeyPatchDropListRef();\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnInit(): void {\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\n    this.dropped.subscribe( e => this._pblReset() );\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n\n  /* protected */ beforeStarted(): void {\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\n    this.lastSorted = undefined;\n    this.dragging.next(true);\n  }\n\n  private _pblReset(): void {\n    this.dragging.next(false);\n    const siblings = this.pblGetPositionCacheItems;\n    siblings.forEach((sibling, index) => {\n      for (const c of sibling.drag.data.getCells()) {\n        c.style.transform = ``;\n      }\n    });\n  }\n\n  private monkeyPatchDropListRef(): void {\n    const { _sortItem, enter } = this._dropListRef;\n\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\n      const lastSorted = this.lastSorted\n      this.lastSorted = undefined;\n      if (lastSorted && lastSorted.drag === item) {\n        const isHorizontal = this.orientation === 'horizontal';\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\n      }\n      enter.call(this._dropListRef, item, pointerX, pointerY);\n    };\n\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\n      const siblings = this.pblGetPositionCacheItems;\n      this.lastSorted = siblings.find( s => s.drag === item );\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      const oldOrder = siblings.slice();\n      const isHorizontal = this.orientation === 'horizontal';\n      const siblingAtNewPosition = siblings[newIndex];\n\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\n        return;\n      }\n\n      // we now need to find if between current and new position there are items with `wontBudge`\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\n      const start = Math.min(newIndex, currentIndex)\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\n      for (const dragItem of itemsDraggedOver) {\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\n          return;\n        }\n      }\n\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\n        return;\n      }\n\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\n\n      this.lastSwap = siblingAtNewPosition.drag;\n\n      if (isHorizontal) {\n        siblings.forEach((sibling, index) => {\n          // Don't do anything if the position hasn't changed.\n          if (oldOrder[index] === sibling) {\n            return;\n          }\n\n          for (const c of sibling.drag.data.getCells()) {\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n          }\n        });\n      }\n    };\n  }\n}\n\n@Directive({\n  selector: '[pblNgridColumnDrag]',\n  exportAs: 'pblNgridColumnDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\n  ]\n})\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-header-cell';\n\n  column: PblColumn;\n\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n    this.column = value && value.col;\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n    this.disabled = this.column && this.column.reorder ? false : true;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\n  private pluginCtrl: PblNgridPluginController;\n  private cache: HTMLElement[];\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n  }\n\n  /* CdkLazyDrag start */\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n\n  ngAfterViewInit(): void {\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\n    super.ngAfterViewInit();\n\n    this._dragRef.beforeStarted.subscribe( () => {\n      const { cdkDropList } = this;\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\n        // we don't allow a new dragging session before the previous ends.\n        // this sound impossible, but due to animation transitions its actually is.\n        // if the `transitionend` is long enough, a new drag can start...\n        //\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\n        if (cdkDropList._dropListRef.isDragging()) {\n          return this.disabled = true;\n        }\n      }\n    });\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\n  }\n\n  getCells(): HTMLElement[] {\n    if (!this.cache) {\n      this.cache = this._context.col.columnDef.queryCellElements('table');\n    }\n    return this.cache;\n  }\n\n  reset(): void {\n    super.reset();\n    if (this.cache) {\n      for (const el of this.cache) {\n        el.style.transform = ``;\n      }\n      this.cache = undefined;\n    }\n  }\n}\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\n\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, Optional, OnDestroy, NgZone, ViewEncapsulation } from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkDragConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, TablePlugin } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, table } = value;\n      if (col && col instanceof PblColumn) {\n        this.column = col;\n        this.table = table;\n        return;\n      }\n    }\n    this.column = this.table = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  table: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private cache: HTMLElement[];\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.table.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total table minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner table.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n        this.cache = this.column.columnDef.queryCellElements('table', 'header', 'footer');\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.width = newWidth + 'px';\n      this.table.resetColumnsWidth();\n\n      for (const el of this.cache) {\n        this.column.columnDef.applyWidth(el)\n      }\n      // the above will change the size of on column AND because we didn't disable the resize observer it will pop an event.\n      // if there are groups it will fire table.resizeColumns(); which will recalculate the groups...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.table.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n\n    // cleanup\n    this.cache = undefined;\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.table);\n    return pluginCtrl.hasPlugin(PLUGIN_KEY);\n  }\n}\n","// tslint:disable:no-output-rename\n\nimport {\n  Inject,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DragDrop,\n  CdkDropListGroup,\n  CdkDropList,\n  CdkDrag,\n  CDK_DROP_LIST,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\nimport { cdkDropList } from '../v7-compat';\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: '[pblAggregationContainer]',\n  exportAs: 'pblAggregationContainer',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\n  ],\n})\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  pending: PblColumn;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any,) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    const reorder = pluginCtrl.getPlugin('columnReorder');\n    reorder.connectedTo = this.id;\n\n    this.pblDropListRef.dropped\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        this.table.columnApi.addGroupBy(item.data.column);\n      });\n\n    this.pblDropListRef.entered\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = item.data.column;\n        item.getPlaceholderElement().style.display = 'none';\n        for (const c of item.data.getCells()) {\n          c.style.display = 'none';\n        }\n      });\n\n    this.pblDropListRef.exited\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        item.getPlaceholderElement().style.display = '';\n        for (const c of item.data.getCells()) {\n          c.style.display = '';\n        }\n      });\n  }\n\n    /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule, DragDrop } from '@angular/cdk/drag-drop';\n\nimport { PblNgridModule, provideCommon } from '@pebula/ngrid';\n\nimport { PblDragDrop } from './drag-and-drop/core/drag-drop';\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective } from './drag-and-drop/row/row-reorder-plugin';\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective } from './drag-and-drop/column/column-reorder-plugin';\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\n\nimport { PblNgridDragResizeComponent } from './column-resize/column-resize.component';\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\n\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n    DragDropModule\n  ],\n  declarations: [\n    DragPluginDefaultTemplatesComponent,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  exports: [\n    DragDropModule,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  providers: [\n    PblDragDrop,\n    { provide: DragDrop, useExisting: PblDragDrop },\n  ],\n  entryComponents: [ DragPluginDefaultTemplatesComponent ],\n})\nexport class PblNgridDragModule {\n\n  static withDefaultTemplates(): ModuleWithProviders {\n    return {\n      ngModule: PblNgridDragModule,\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\n    };\n  }\n}\n"]}
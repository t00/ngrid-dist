{"version":3,"file":"pebula-ngrid-overlay-panel.js","sources":["ng://@pebula/ngrid/overlay-panel/lib/component-registry-extension.ts","ng://@pebula/ngrid/overlay-panel/lib/overlay-panel-ref.ts","ng://@pebula/ngrid/overlay-panel/lib/overlay-panel.service.ts","ng://@pebula/ngrid/overlay-panel/lib/overlay-panel-def.ts","ng://@pebula/ngrid/overlay-panel/lib/overlay-panel.module.ts"],"sourcesContent":["\nimport { ComponentRef, Type, ComponentFactoryResolver, ComponentFactory, Injector } from '@angular/core';\nimport { PblNgridMultiComponentRegistry } from '@pebula/ngrid';\n\nexport class PblNgridOverlayPanelComponentExtension<T> extends PblNgridMultiComponentRegistry<T, 'overlayPanels'> {\n  readonly name: string;\n  readonly kind: 'overlayPanels' = 'overlayPanels';\n  readonly projectContent = false;\n\n  constructor(name: string,\n              public component: Type<T>,\n              public cfr?: ComponentFactoryResolver,\n              public injector?: Injector,) {\n    super();\n    this.name = name;\n  }\n\n  getFactory(context: any): ComponentFactory<T> {\n    return this.cfr.resolveComponentFactory(this.component);\n  }\n\n  onCreated(context: any, cmpRef: ComponentRef<T>): void {\n    cmpRef.changeDetectorRef.markForCheck();\n    cmpRef.changeDetectorRef.detectChanges();\n  }\n}\n","import { merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nexport class PblNgridOverlayPanelRef<T = any> {\n\n  closed: Observable<void>;\n  private _closed$ = new Subject<void>();\n\n  constructor(private overlayRef: OverlayRef, public readonly data?: T) {\n    this.closed = this._closed$.asObservable();\n    this._closingActions(this, overlayRef)\n      .pipe(\n        takeUntil(this.closed),\n      )\n      .subscribe(() => this.close());\n  }\n\n  close(): void {\n    if (this._closed$) {\n      const closed$ = this._closed$;\n      this._closed$ = undefined;\n      closed$.next();\n      closed$.complete();\n      this.overlayRef.detach();\n      this.overlayRef.dispose();\n    }\n  }\n\n  private _closingActions(overlayPanelRef: PblNgridOverlayPanelRef, overlayRef: OverlayRef) {\n    const backdrop = overlayRef!.backdropClick();\n    const detachments = overlayRef!.detachments();\n\n    return merge(backdrop, detachments, overlayPanelRef.closed);\n  }\n}\n","import { Injectable, ViewContainerRef, ElementRef, Injector, EmbeddedViewRef, TemplateRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { RowContext } from '@angular/cdk/table';\nimport { PblNgridPluginController, PblNgridComponent, PblNgridMultiTemplateRegistry } from '@pebula/ngrid';\n\nimport { PblNgridOverlayPanelComponentExtension } from './component-registry-extension';\nimport { PblNgridOverlayPanelRef } from './overlay-panel-ref';\nimport { PblNgridOverlayPanelContext } from './overlay-panel-def';\n\ndeclare module '@pebula/ngrid/lib/grid/services/grid-registry.service' {\n  interface PblNgridMultiRegistryMap {\n    overlayPanels?:\n      | PblNgridMultiTemplateRegistry<any, 'overlayPanels'>\n      | PblNgridOverlayPanelComponentExtension<any>;\n  }\n}\n\nexport interface PblNgridOverlayPanelConfig {\n  hasBackdrop?: boolean;\n  backdropClass?: string;\n  xPos?: 'before' | 'center' | 'after';\n  yPos?: 'above' | 'center' | 'below';\n  insetPos?: boolean;\n}\n\nconst DEFAULT_OVERLAY_PANEL_CONFIG: PblNgridOverlayPanelConfig = {\n  hasBackdrop: false,\n  xPos: 'center',\n  yPos: 'center',\n  insetPos: false,\n};\n\n@Injectable()\nexport class PblNgridOverlayPanelFactory {\n  constructor(private _overlay: Overlay, private _dir: Directionality) { }\n\n  create<T>(grid: PblNgridComponent<T>): PblNgridOverlayPanel<T> {\n    return new PblNgridOverlayPanel<T>(this._overlay, this._dir, grid);\n  }\n}\n\nexport class PblNgridOverlayPanel<T = any> {\n\n  private vcRef: ViewContainerRef;\n  private injector: Injector;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  constructor(private _overlay: Overlay,\n              private _dir: Directionality,\n              public readonly grid: PblNgridComponent<T>) {\n    const controller = PblNgridPluginController.find(grid);\n    this.injector = controller.injector;\n    this.vcRef = controller.injector.get(ViewContainerRef);\n    this._scrollStrategy = () => _overlay.scrollStrategies.reposition();\n  }\n\n\n  /**\n   * Opens a panel relative to a cell element using the overlay panel extension registry template/component with the name provided in `extName`.\n   * The cell element is referenced by the `columnId` and the `rowRenderPosition`.\n   *\n   * If the `rowRenderPosition` is \"header\" or \"footer\" then the grid's header / footer rows are targeted, otherwise the number provided should reference\n   * the rendered row index to use to get the cell from.\n   *\n   * > Note that this helper method does not allow targeting meta cells.\n   */\n  openGridCell<T = any>(extName: string, columnId: string, rowRenderPosition: number | 'header' | 'footer', config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T> {\n    const column = this.grid.columnApi.findColumn(columnId);\n    if (!column) {\n      throw new Error('Could not find the column ' + columnId);\n    }\n\n    let section: 'table' | 'header' | 'footer';\n    let rowRenderIndex = 0;\n    switch (rowRenderPosition) {\n      case 'header':\n      case 'footer':\n        section = rowRenderPosition;\n        break;\n      default:\n        if (typeof rowRenderPosition === 'number') {\n          section = 'table';\n          rowRenderIndex = rowRenderPosition;\n        }\n        break;\n    }\n\n    if (!section) {\n      throw new Error('Invalid \"rowRenderPosition\" provided, use \"header\", \"footer\" or any number >= 0.');\n    }\n\n    const el = column && column.columnDef.queryCellElements(section)[rowRenderIndex];\n    if (!el) {\n      throw new Error(`Could not find a cell for the column ${columnId} at render index ${rowRenderIndex}`);\n    }\n\n    return this.open(extName, new ElementRef(el), config, data);\n  }\n\n  open<T = any>(extName: string, source: ElementRef<HTMLElement>, config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T> {\n    config = Object.assign({ ...DEFAULT_OVERLAY_PANEL_CONFIG }, config || {});\n    const match = this.findNamesExtension(extName);\n\n    if (!match) {\n      throw new Error('Could not find the overlay panel with the name ' + extName);\n    }\n\n    const overlayRef = this._createOverlay(source, config);\n    const overlayPanelRef = new PblNgridOverlayPanelRef(overlayRef, data);\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy, config);\n\n    if (match instanceof PblNgridMultiTemplateRegistry) {\n      const tPortal = this._getTemplatePortal(match.tRef, overlayPanelRef);\n      const viewRef = overlayRef.attach(tPortal);\n      viewRef.markForCheck();\n      viewRef.detectChanges();\n    } else {\n      const cPortal = this._getComponentPortal(overlayPanelRef, match)\n      const cmpRef = overlayRef.attach(cPortal);\n      match.onCreated(null, cmpRef);\n    }\n\n    overlayRef.updatePosition();\n    return overlayPanelRef;\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(element: ElementRef<HTMLElement>, config: PblNgridOverlayPanelConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(element, config);\n    const overlayRef = this._overlay.create(overlayConfig);\n    overlayRef.getConfig().hasBackdrop = !!config.hasBackdrop\n    // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n    // Ideally we'd also have our keyboard event logic in here, however doing so will\n    // break anybody that may have implemented the `MatMenuPanel` themselves.\n    overlayRef.keydownEvents().subscribe();\n\n    return overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(element: ElementRef<HTMLElement>, config: PblNgridOverlayPanelConfig): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n        .flexibleConnectedTo(element)\n        .withLockedPosition(),\n      backdropClass: config.backdropClass || 'cdk-overlay-transparent-backdrop', // TODO: don't use the cdk's class, create it\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  private _getTemplatePortal(tRef: TemplateRef<PblNgridOverlayPanelContext>, overlayPanelRef: PblNgridOverlayPanelRef) {\n    const context: PblNgridOverlayPanelContext = {\n      grid: this.grid,\n      ref: overlayPanelRef,\n    };\n    return new TemplatePortal(tRef, this.vcRef, context);\n  }\n\n  private _getComponentPortal(overlayPanelRef: PblNgridOverlayPanelRef,\n                              componentExtension: PblNgridOverlayPanelComponentExtension<any>) {\n    const portalInjector = Injector.create({\n      providers: [\n        { provide: PblNgridOverlayPanelRef, useValue: overlayPanelRef },\n      ],\n      parent: componentExtension.injector || this.injector,\n    });\n    return new ComponentPortal(componentExtension.component, this.vcRef, portalInjector, componentExtension.cfr || null)\n  }\n\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy, config: PblNgridOverlayPanelConfig) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n      config.xPos === 'center'\n        ? ['center', 'center']\n        : config.xPos === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      config.yPos === 'center'\n        ? ['center', 'center']\n        : config.yPos === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (!config.insetPos) {\n      if (overlayY !== 'center') {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n      }\n      if (overlayFallbackY !== 'center') {\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  private findNamesExtension(extName: string) {\n    let match: PblNgridMultiTemplateRegistry<PblNgridOverlayPanelContext, 'overlayPanels'> | PblNgridOverlayPanelComponentExtension<any>;\n    this.grid.registry.forMulti('overlayPanels', values => {\n      for (const value of values) {\n        if (value.name === extName) {\n          match = value;\n          return true;\n        }\n      }\n    });\n    return match;\n  }\n}\n\n\n","import { Directive, TemplateRef, Input } from '@angular/core';\nimport { PblNgridComponent, PblNgridMultiTemplateRegistry, PblNgridRegistryService } from '@pebula/ngrid';\nimport { PblNgridOverlayPanelRef } from './overlay-panel-ref';\n\nexport interface PblNgridOverlayPanelContext<T = any> {\n  grid: PblNgridComponent<T>;\n  ref: PblNgridOverlayPanelRef;\n}\n\n@Directive({ selector: '[pblNgridOverlayPanelDef]' })\nexport class PblNgridOverlayPanelDef extends PblNgridMultiTemplateRegistry<PblNgridComponent, 'overlayPanels'> {\n\n  readonly kind: 'overlayPanels' = 'overlayPanels';\n  @Input('pblNgridOverlayPanelDef') name: string;\n\n  constructor(tRef: TemplateRef<PblNgridComponent>, registry: PblNgridRegistryService) { super(tRef, registry); }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { PblNgridOverlayPanelFactory } from './overlay-panel.service';\nimport { PblNgridOverlayPanelDef } from './overlay-panel-def';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    BidiModule,\n  ],\n  declarations: [\n    PblNgridOverlayPanelDef,\n  ],\n  exports: [\n    PblNgridOverlayPanelDef,\n  ],\n  providers: [\n    PblNgridOverlayPanelFactory,\n  ],\n  entryComponents: [ ],\n})\nexport class PblNgridOverlayPanelModule {\n\n}\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
{"version":3,"file":"pebula-ngrid-drag.js","sources":["ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/v7-compat.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nimport { PblDragRef } from './drag-ref';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { take } from 'rxjs/operators';\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST } from '@angular/cdk/drag-drop';\nimport { PblDropListRef } from './drop-list-ref';\nimport { PblDragRef } from './drag-ref';\n\n@Directive({\n  selector: '[cdkLazyDropList]',\n  exportAs: 'cdkLazyDropList',\n  providers: [\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\n\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\n\n  _draggables: QueryList<CdkDrag>;\n\n  /* private */ originalElement: ElementRef<HTMLElement>;\n  /* private */ _draggablesSet = new Set<CdkDrag>();\n\n  ngOnInit(): void {\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\n    }\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\n  }\n\n  addDrag(drag: CdkDrag): void {\n    this._draggablesSet.add(drag);\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n  }\n\n  removeDrag(drag: CdkDrag): boolean {\n    const result = this._draggablesSet.delete(drag);\n    if (result) {\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n    }\n    return result;\n  }\n\n  /* protected */ beforeStarted(): void {\n    // This is a workaround for https://github.com/angular/material2/pull/14153\n    // Working around the missing capability for selecting a container element that is not the drop container host.\n    if (!this.originalElement) {\n      this.originalElement = this.element;\n    }\n    if (this.directContainerElement) {\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\n      this.element = new ElementRef<HTMLElement>(element);\n    } else {\n      this.element = this.originalElement;\n    }\n    this.pblDropListRef.withElement(this.element);\n  }\n}\n\n@Directive({\n  selector: '[cdkLazyDrag]',\n  exportAs: 'cdkLazyDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n})\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\n\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\n  set cdkDropList(value: Z) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  /* private */ _rootClass: string;\n  /* private */ _hostNotRoot = false;\n\n  ngOnInit(): void {\n    if (this.pblDragRef instanceof PblDragRef === false) {\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\n    }\n    this.pblDragRef.rootElementChanged.subscribe( event => {\n      const rootElementSelectorClass = this._rootClass;\n      const hostNotRoot = this.element.nativeElement !== event.curr;\n\n      if (rootElementSelectorClass) {\n        if (this._hostNotRoot) {\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\n        }\n        if (hostNotRoot) {\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\n        }\n      }\n      this._hostNotRoot = hostNotRoot;\n    });\n  }\n\n  // This is a workaround for https://github.com/angular/material2/pull/14158\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\n  ngAfterViewInit(): void {\n    this.started.subscribe( startedEvent => {\n      if (this.dropContainer) {\n        const element = this.getRootElement();\n        const initialRootElementParent = element.parentNode as HTMLElement;\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\n        }\n      }\n    });\n\n    /* super.ngAfterViewInit(); */\n  }\n\n  ngOnDestroy(): void {\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    /* super.ngOnDestroy(); */\n  }\n}\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[pblDragHandle]',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag-handle'\n  },\n  providers: [\n    {\n      provide: CdkDragHandle,\n      useExisting: PblDragHandle\n    }\n  ]\n})\nexport class PblDragHandle extends CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\n}\n","import { NgZone, ChangeDetectorRef, ElementRef, ViewContainerRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DragRefConfig, DragDrop, CdkDropListGroup, CdkDropList, CdkDrag, DragDropRegistry } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nexport const isMaterial7 = CdkDropList.length === 7;\n\nexport function cdkDropList(element: ElementRef<HTMLElement>,\n                            dragDrop: DragDrop,\n                            changeDetectorRef: ChangeDetectorRef,\n                            dir?: Directionality,\n                            group?: CdkDropListGroup<CdkDropList>,\n                            // for v7 compat\n                            dragDropRegistry?: DragDropRegistry<any, any>,\n                            document?: any,): ConstructorParameters<typeof CdkDropList> {\n  return isMaterial7\n    ? [ element, dragDropRegistry as any, changeDetectorRef, dir, group, document, dragDrop ] as any\n    : [ element, dragDrop, changeDetectorRef, dir, group ]\n  ;\n}\n\nexport function cdkDrag(element: ElementRef<HTMLElement>,\n                        dropContainer: CdkDropList,\n                        _document: any,\n                        _ngZone: NgZone,\n                        _viewContainerRef: ViewContainerRef,\n                        config: DragRefConfig,\n                        _dir: Directionality,\n                        dragDrop: DragDrop,\n                        _changeDetectorRef: ChangeDetectorRef,\n                        // for v7 compat\n                        viewportRuler: ViewportRuler,\n                        dragDropRegistry?: DragDropRegistry<any, any>,): ConstructorParameters<typeof CdkDrag> {\n  return isMaterial7\n    ? [ element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir, dragDrop ] as any\n    : [ element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef ]\n  ;\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDropList,\n  CdkDropListGroup,\n  DragDropRegistry,\n  CdkDrag,\n  CDK_DROP_LIST,\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    rowReorder?: PblNgridRowReorderPluginDirective;\n  }\n}\n\nconst PLUGIN_KEY: 'rowReorder' = 'rowReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY })\n@Directive({\n  selector: 'pbl-ngrid[rowReorder]',\n  exportAs: 'pblNgridRowReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n    '[class.pbl-row-reorder]': 'rowReorder && !this.table.ds?.sort.sort?.order && !this.table.ds?.filter?.filter',\n  },\n  providers: [\n    { provide: CdkDropListGroup, useValue: undefined },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\n  ],\n})\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\n\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\n\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\n  set rowReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._rowReorder = value;\n  }\n\n  private _rowReorder = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\n      const item = event.item as PblNgridRowDragDirective<T>;\n\n      const previousIndex = table.ds.source.indexOf(item.draggedContext.row);\n      const currentIndex = event.currentIndex + table.ds.renderStart;\n\n      this.table.contextApi.clear();\n      this.table.ds.moveItem(previousIndex, currentIndex, true);\n      this.table._cdkTable.syncRows('data');\n    });\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n}\n\n@Directive({\n  selector: '[pblNgridRowDrag]',\n  exportAs: 'pblNgridRowDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\n  ]\n})\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-row';\n\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._context;\n  }\n\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n  }\n\n  /**\n   * Reference to the last dragged context.\n   *\n   * This context is not similar to the `context` property.\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\n   * the context will point to the row in view and not the original cell.\n   */\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._draggedContext;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n\n  private pluginCtrl: PblNgridPluginController;\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n\n    this.started.subscribe( (event: CdkDragStart) => {\n      const { col, row, table, value }  = this._context;\n      this._draggedContext = { col, row, table, value };\n    });\n\n\n  }\n\n  /* CdkLazyDrag start */\n    /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler} from '@angular/cdk/scrolling';\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\n\nimport { PblDragRef } from './drag-ref'\nimport { PblDropListRef } from './drop-list-ref';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class PblDragDrop {\n  constructor(@Inject(DOCUMENT) private _document: any,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\n\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  SkipSelf,\n  Output,\n  OnDestroy,\n  Optional,\n  OnInit,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDrag,\n  CdkDragDrop,\n  CDK_DROP_LIST,\n  DragRef,\n  CdkDropListGroup,\n  CdkDropList,\n  CDK_DRAG_CONFIG,\n  DragRefConfig,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnReorder?: PblNgridColumnReorderPluginDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnReorder' = 'columnReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Directive({\n  selector: 'pbl-ngrid[columnReorder]',\n  exportAs: 'pblNgridColumnReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\n  ],\n})\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\n  set columnReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._columnReorder = value;\n  }\n\n  /**\n   * When true, will not move the column on drop.\n   * Instead you need to handle the dropped event.\n   */\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\n\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  private _columnReorder = false;\n  private _manualOverride = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\n\n  // Stuff to workaround encapsulation in CdkDropList\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\n  }\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\n    return (this._dropListRef as any)._itemPositions;\n  }\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n     // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\n      if (!this.manualOverride) {\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\n      }\n    });\n\n    this.dragging.subscribe( isDragging => {\n      const el = element.nativeElement;\n      if (isDragging) {\n        el.classList.add('pbl-ngrid-column-list-dragging');\n      } else {\n        el.classList.remove('pbl-ngrid-column-list-dragging');\n      }\n      this.lastSwap = undefined;\n    });\n\n    this.monkeyPatchDropListRef();\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnInit(): void {\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\n    this.dropped.subscribe( e => this._pblReset() );\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n\n  /* protected */ beforeStarted(): void {\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\n    this.lastSorted = undefined;\n    this.dragging.next(true);\n  }\n\n  private _pblReset(): void {\n    this.dragging.next(false);\n    const siblings = this.pblGetPositionCacheItems;\n    siblings.forEach((sibling, index) => {\n      for (const c of sibling.drag.data.getCells()) {\n        c.style.transform = ``;\n      }\n    });\n  }\n\n  private monkeyPatchDropListRef(): void {\n    const { _sortItem, enter } = this._dropListRef;\n\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\n      const lastSorted = this.lastSorted\n      this.lastSorted = undefined;\n      if (lastSorted && lastSorted.drag === item) {\n        const isHorizontal = this.orientation === 'horizontal';\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\n      }\n      enter.call(this._dropListRef, item, pointerX, pointerY);\n    };\n\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\n      const siblings = this.pblGetPositionCacheItems;\n      this.lastSorted = siblings.find( s => s.drag === item );\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      const oldOrder = siblings.slice();\n      const isHorizontal = this.orientation === 'horizontal';\n      const siblingAtNewPosition = siblings[newIndex];\n\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\n        return;\n      }\n\n      // we now need to find if between current and new position there are items with `wontBudge`\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\n      const start = Math.min(newIndex, currentIndex)\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\n      for (const dragItem of itemsDraggedOver) {\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\n          return;\n        }\n      }\n\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\n        return;\n      }\n\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\n\n      this.lastSwap = siblingAtNewPosition.drag;\n\n      if (isHorizontal) {\n        siblings.forEach((sibling, index) => {\n          // Don't do anything if the position hasn't changed.\n          if (oldOrder[index] === sibling) {\n            return;\n          }\n\n          for (const c of sibling.drag.data.getCells()) {\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n          }\n        });\n      }\n    };\n  }\n}\n\n@Directive({\n  selector: '[pblNgridColumnDrag]',\n  exportAs: 'pblNgridColumnDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\n  ]\n})\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-header-cell';\n\n  column: PblColumn;\n\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n    this.column = value && value.col;\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n    this.disabled = this.column && this.column.reorder ? false : true;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\n  private pluginCtrl: PblNgridPluginController;\n  private cache: HTMLElement[];\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n  }\n\n  /* CdkLazyDrag start */\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n\n  ngAfterViewInit(): void {\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\n    super.ngAfterViewInit();\n\n    this._dragRef.beforeStarted.subscribe( () => {\n      const { cdkDropList } = this;\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\n        // we don't allow a new dragging session before the previous ends.\n        // this sound impossible, but due to animation transitions its actually is.\n        // if the `transitionend` is long enough, a new drag can start...\n        //\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\n        if (cdkDropList._dropListRef.isDragging()) {\n          return this.disabled = true;\n        }\n      }\n    });\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\n  }\n\n  getCells(): HTMLElement[] {\n    if (!this.cache) {\n      this.cache = this._context.col.columnDef.queryCellElements('table');\n    }\n    return this.cache;\n  }\n\n  reset(): void {\n    super.reset();\n    if (this.cache) {\n      for (const el of this.cache) {\n        el.style.transform = ``;\n      }\n      this.cache = undefined;\n    }\n  }\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\n\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, Optional, OnDestroy, NgZone, ViewEncapsulation } from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkDragConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, TablePlugin } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, table } = value;\n      if (col && col instanceof PblColumn) {\n        this.column = col;\n        this.table = table;\n        return;\n      }\n    }\n    this.column = this.table = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  table: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private cache: HTMLElement[];\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.table.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total table minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner table.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n        this.cache = this.column.columnDef.queryCellElements('table', 'header', 'footer');\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.width = newWidth + 'px';\n      this.table.resetColumnsWidth();\n\n      for (const el of this.cache) {\n        this.column.columnDef.applyWidth(el)\n      }\n      // the above will change the size of on column AND because we didn't disable the resize observer it will pop an event.\n      // if there are groups it will fire table.resizeColumns(); which will recalculate the groups...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.table.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n\n    // cleanup\n    this.cache = undefined;\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.table);\n    return pluginCtrl.hasPlugin(PLUGIN_KEY);\n  }\n}\n","// tslint:disable:no-output-rename\n\nimport {\n  Inject,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DragDrop,\n  CdkDropListGroup,\n  CdkDropList,\n  CdkDrag,\n  CDK_DROP_LIST,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\nimport { cdkDropList } from '../v7-compat';\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: '[pblAggregationContainer]',\n  exportAs: 'pblAggregationContainer',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\n  ],\n})\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  pending: PblColumn;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any,) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    const reorder = pluginCtrl.getPlugin('columnReorder');\n    reorder.connectedTo = this.id;\n\n    this.pblDropListRef.dropped\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        this.table.columnApi.addGroupBy(item.data.column);\n      });\n\n    this.pblDropListRef.entered\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = item.data.column;\n        item.getPlaceholderElement().style.display = 'none';\n        for (const c of item.data.getCells()) {\n          c.style.display = 'none';\n        }\n      });\n\n    this.pblDropListRef.exited\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        item.getPlaceholderElement().style.display = '';\n        for (const c of item.data.getCells()) {\n          c.style.display = '';\n        }\n      });\n  }\n\n    /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule, DragDrop } from '@angular/cdk/drag-drop';\n\nimport { PblNgridModule, provideCommon } from '@pebula/ngrid';\n\nimport { PblDragDrop } from './drag-and-drop/core/drag-drop';\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective } from './drag-and-drop/row/row-reorder-plugin';\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective } from './drag-and-drop/column/column-reorder-plugin';\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\n\nimport { PblNgridDragResizeComponent } from './column-resize/column-resize.component';\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\n\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n    DragDropModule\n  ],\n  declarations: [\n    DragPluginDefaultTemplatesComponent,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  exports: [\n    DragDropModule,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  providers: [\n    PblDragDrop,\n    { provide: DragDrop, useExisting: PblDragDrop },\n  ],\n  entryComponents: [ DragPluginDefaultTemplatesComponent ],\n})\nexport class PblNgridDragModule {\n\n  static withDefaultTemplates(): ModuleWithProviders {\n    return {\n      ngModule: PblNgridDragModule,\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\n    };\n  }\n}\n"],"names":["tslib_1.__extends","tslib_1.__values","PLUGIN_KEY","_uniqueIdCounter","extendGrid"],"mappings":"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"}
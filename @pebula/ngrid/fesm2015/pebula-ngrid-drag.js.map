{"version":3,"file":"pebula-ngrid-drag.js","sources":["ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/v7-compat.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nimport { PblDragRef } from './drag-ref';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { take } from 'rxjs/operators';\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST } from '@angular/cdk/drag-drop';\nimport { PblDropListRef } from './drop-list-ref';\nimport { PblDragRef } from './drag-ref';\n\n@Directive({\n  selector: '[cdkLazyDropList]',\n  exportAs: 'cdkLazyDropList',\n  providers: [\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\n\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\n\n  _draggables: QueryList<CdkDrag>;\n\n  /* private */ originalElement: ElementRef<HTMLElement>;\n  /* private */ _draggablesSet = new Set<CdkDrag>();\n\n  ngOnInit(): void {\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\n    }\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\n  }\n\n  addDrag(drag: CdkDrag): void {\n    this._draggablesSet.add(drag);\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n  }\n\n  removeDrag(drag: CdkDrag): boolean {\n    const result = this._draggablesSet.delete(drag);\n    if (result) {\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n    }\n    return result;\n  }\n\n  /* protected */ beforeStarted(): void {\n    // This is a workaround for https://github.com/angular/material2/pull/14153\n    // Working around the missing capability for selecting a container element that is not the drop container host.\n    if (!this.originalElement) {\n      this.originalElement = this.element;\n    }\n    if (this.directContainerElement) {\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\n      this.element = new ElementRef<HTMLElement>(element);\n    } else {\n      this.element = this.originalElement;\n    }\n    this.pblDropListRef.withElement(this.element);\n  }\n}\n\n@Directive({\n  selector: '[cdkLazyDrag]',\n  exportAs: 'cdkLazyDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n})\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\n\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\n  set cdkDropList(value: Z) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  /* private */ _rootClass: string;\n  /* private */ _hostNotRoot = false;\n\n  ngOnInit(): void {\n    if (this.pblDragRef instanceof PblDragRef === false) {\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\n    }\n    this.pblDragRef.rootElementChanged.subscribe( event => {\n      const rootElementSelectorClass = this._rootClass;\n      const hostNotRoot = this.element.nativeElement !== event.curr;\n\n      if (rootElementSelectorClass) {\n        if (this._hostNotRoot) {\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\n        }\n        if (hostNotRoot) {\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\n        }\n      }\n      this._hostNotRoot = hostNotRoot;\n    });\n  }\n\n  // This is a workaround for https://github.com/angular/material2/pull/14158\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\n  ngAfterViewInit(): void {\n    this.started.subscribe( startedEvent => {\n      if (this.dropContainer) {\n        const element = this.getRootElement();\n        const initialRootElementParent = element.parentNode as HTMLElement;\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\n        }\n      }\n    });\n\n    /* super.ngAfterViewInit(); */\n  }\n\n  ngOnDestroy(): void {\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    /* super.ngOnDestroy(); */\n  }\n}\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[pblDragHandle]',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag-handle'\n  },\n  providers: [\n    {\n      provide: CdkDragHandle,\n      useExisting: PblDragHandle\n    }\n  ]\n})\nexport class PblDragHandle extends CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\n}\n","import { NgZone, ChangeDetectorRef, ElementRef, ViewContainerRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DragRefConfig, DragDrop, CdkDropListGroup, CdkDropList, CdkDrag, DragDropRegistry } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nexport const isMaterial7 = CdkDropList.length === 7;\n\nexport function cdkDropList(element: ElementRef<HTMLElement>,\n                            dragDrop: DragDrop,\n                            changeDetectorRef: ChangeDetectorRef,\n                            dir?: Directionality,\n                            group?: CdkDropListGroup<CdkDropList>,\n                            // for v7 compat\n                            dragDropRegistry?: DragDropRegistry<any, any>,\n                            document?: any,): ConstructorParameters<typeof CdkDropList> {\n  return isMaterial7\n    ? [ element, dragDropRegistry as any, changeDetectorRef, dir, group, document, dragDrop ] as any\n    : [ element, dragDrop, changeDetectorRef, dir, group ]\n  ;\n}\n\nexport function cdkDrag(element: ElementRef<HTMLElement>,\n                        dropContainer: CdkDropList,\n                        _document: any,\n                        _ngZone: NgZone,\n                        _viewContainerRef: ViewContainerRef,\n                        config: DragRefConfig,\n                        _dir: Directionality,\n                        dragDrop: DragDrop,\n                        _changeDetectorRef: ChangeDetectorRef,\n                        // for v7 compat\n                        viewportRuler: ViewportRuler,\n                        dragDropRegistry?: DragDropRegistry<any, any>,): ConstructorParameters<typeof CdkDrag> {\n  return isMaterial7\n    ? [ element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir, dragDrop ] as any\n    : [ element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef ]\n  ;\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDropList,\n  CdkDropListGroup,\n  DragDropRegistry,\n  CdkDrag,\n  CDK_DROP_LIST,\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    rowReorder?: PblNgridRowReorderPluginDirective;\n  }\n}\n\nconst PLUGIN_KEY: 'rowReorder' = 'rowReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY })\n@Directive({\n  selector: 'pbl-ngrid[rowReorder]',\n  exportAs: 'pblNgridRowReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n    '[class.pbl-row-reorder]': 'rowReorder && !this.table.ds?.sort.sort?.order && !this.table.ds?.filter?.filter',\n  },\n  providers: [\n    { provide: CdkDropListGroup, useValue: undefined },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\n  ],\n})\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\n\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\n\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\n  set rowReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._rowReorder = value;\n  }\n\n  private _rowReorder = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\n      const item = event.item as PblNgridRowDragDirective<T>;\n\n      const previousIndex = table.ds.source.indexOf(item.draggedContext.row);\n      const currentIndex = event.currentIndex + table.ds.renderStart;\n\n      this.table.contextApi.clear();\n      this.table.ds.moveItem(previousIndex, currentIndex, true);\n      this.table._cdkTable.syncRows('data');\n    });\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n}\n\n@Directive({\n  selector: '[pblNgridRowDrag]',\n  exportAs: 'pblNgridRowDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\n  ]\n})\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-row';\n\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._context;\n  }\n\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n  }\n\n  /**\n   * Reference to the last dragged context.\n   *\n   * This context is not similar to the `context` property.\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\n   * the context will point to the row in view and not the original cell.\n   */\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._draggedContext;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n\n  private pluginCtrl: PblNgridPluginController;\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n\n    this.started.subscribe( (event: CdkDragStart) => {\n      const { col, row, table, value }  = this._context;\n      this._draggedContext = { col, row, table, value };\n    });\n\n\n  }\n\n  /* CdkLazyDrag start */\n    /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler} from '@angular/cdk/scrolling';\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\n\nimport { PblDragRef } from './drag-ref'\nimport { PblDropListRef } from './drop-list-ref';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class PblDragDrop {\n  constructor(@Inject(DOCUMENT) private _document: any,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\n\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  SkipSelf,\n  Output,\n  OnDestroy,\n  Optional,\n  OnInit,\n  ViewContainerRef,\n  NgZone,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDrag,\n  CdkDragDrop,\n  CDK_DROP_LIST,\n  DragRef,\n  CdkDropListGroup,\n  CdkDropList,\n  CDK_DRAG_CONFIG,\n  DragRefConfig,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nimport { PblNgridComponent, TablePlugin, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { cdkDropList, cdkDrag } from '../v7-compat';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnReorder?: PblNgridColumnReorderPluginDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnReorder' = 'columnReorder';\n\nlet _uniqueIdCounter = 0;\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Directive({\n  selector: 'pbl-ngrid[columnReorder]',\n  exportAs: 'pblNgridColumnReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\n  ],\n})\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\n  set columnReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._columnReorder = value;\n  }\n\n  /**\n   * When true, will not move the column on drop.\n   * Instead you need to handle the dropped event.\n   */\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\n\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  private _columnReorder = false;\n  private _manualOverride = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\n\n  // Stuff to workaround encapsulation in CdkDropList\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\n  }\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\n    return (this._dropListRef as any)._itemPositions;\n  }\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n     // super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\n      if (!this.manualOverride) {\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\n      }\n    });\n\n    this.dragging.subscribe( isDragging => {\n      const el = element.nativeElement;\n      if (isDragging) {\n        el.classList.add('pbl-ngrid-column-list-dragging');\n      } else {\n        el.classList.remove('pbl-ngrid-column-list-dragging');\n      }\n      this.lastSwap = undefined;\n    });\n\n    this.monkeyPatchDropListRef();\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnInit(): void {\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\n    this.dropped.subscribe( e => this._pblReset() );\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n\n  /* protected */ beforeStarted(): void {\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\n    this.lastSorted = undefined;\n    this.dragging.next(true);\n  }\n\n  private _pblReset(): void {\n    this.dragging.next(false);\n    const siblings = this.pblGetPositionCacheItems;\n    siblings.forEach((sibling, index) => {\n      for (const c of sibling.drag.data.getCells()) {\n        c.style.transform = ``;\n      }\n    });\n  }\n\n  private monkeyPatchDropListRef(): void {\n    const { _sortItem, enter } = this._dropListRef;\n\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\n      const lastSorted = this.lastSorted\n      this.lastSorted = undefined;\n      if (lastSorted && lastSorted.drag === item) {\n        const isHorizontal = this.orientation === 'horizontal';\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\n      }\n      enter.call(this._dropListRef, item, pointerX, pointerY);\n    };\n\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\n      const siblings = this.pblGetPositionCacheItems;\n      this.lastSorted = siblings.find( s => s.drag === item );\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      const oldOrder = siblings.slice();\n      const isHorizontal = this.orientation === 'horizontal';\n      const siblingAtNewPosition = siblings[newIndex];\n\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\n        return;\n      }\n\n      // we now need to find if between current and new position there are items with `wontBudge`\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\n      const start = Math.min(newIndex, currentIndex)\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\n      for (const dragItem of itemsDraggedOver) {\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\n          return;\n        }\n      }\n\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\n        return;\n      }\n\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\n\n      this.lastSwap = siblingAtNewPosition.drag;\n\n      if (isHorizontal) {\n        siblings.forEach((sibling, index) => {\n          // Don't do anything if the position hasn't changed.\n          if (oldOrder[index] === sibling) {\n            return;\n          }\n\n          for (const c of sibling.drag.data.getCells()) {\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n          }\n        });\n      }\n    };\n  }\n}\n\n@Directive({\n  selector: '[pblNgridColumnDrag]',\n  exportAs: 'pblNgridColumnDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\n  ]\n})\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-header-cell';\n\n  column: PblColumn;\n\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n    this.column = value && value.col;\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.table);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n    this.disabled = this.column && this.column.reorder ? false : true;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'table'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\n  private pluginCtrl: PblNgridPluginController;\n  private cache: HTMLElement[];\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef,\n\n              @Optional() viewportRuler: ViewportRuler, // for v7 compat\n              @Optional() dragDropRegistry: DragDropRegistry<any, any>,) {\n    super(...cdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, viewportRuler, dragDropRegistry));\n    // super(\n    //   element,\n    //   dropContainer,\n    //   _document,\n    //   _ngZone,\n    //   _viewContainerRef,\n    //   config,\n    //   _dir,\n    //   dragDrop,\n    //   _changeDetectorRef,\n    // );\n  }\n\n  /* CdkLazyDrag start */\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n\n  ngAfterViewInit(): void {\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\n    super.ngAfterViewInit();\n\n    this._dragRef.beforeStarted.subscribe( () => {\n      const { cdkDropList } = this;\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\n        // we don't allow a new dragging session before the previous ends.\n        // this sound impossible, but due to animation transitions its actually is.\n        // if the `transitionend` is long enough, a new drag can start...\n        //\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\n        if (cdkDropList._dropListRef.isDragging()) {\n          return this.disabled = true;\n        }\n      }\n    });\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\n  }\n\n  getCells(): HTMLElement[] {\n    if (!this.cache) {\n      this.cache = this._context.col.columnDef.queryCellElements('table');\n    }\n    return this.cache;\n  }\n\n  reset(): void {\n    super.reset();\n    if (this.cache) {\n      for (const el of this.cache) {\n        el.style.transform = ``;\n      }\n      this.cache = undefined;\n    }\n  }\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/table/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/table/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\n\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, Optional, OnDestroy, NgZone, ViewEncapsulation } from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkDragConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, TablePlugin } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@TablePlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, table } = value;\n      if (col && col instanceof PblColumn) {\n        this.column = col;\n        this.table = table;\n        return;\n      }\n    }\n    this.column = this.table = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  table: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private cache: HTMLElement[];\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.table.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total table minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner table.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n        this.cache = this.column.columnDef.queryCellElements('table', 'header', 'footer');\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.width = newWidth + 'px';\n      this.table.resetColumnsWidth();\n\n      for (const el of this.cache) {\n        this.column.columnDef.applyWidth(el)\n      }\n      // the above will change the size of on column AND because we didn't disable the resize observer it will pop an event.\n      // if there are groups it will fire table.resizeColumns(); which will recalculate the groups...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.table.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n\n    // cleanup\n    this.cache = undefined;\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.table);\n    return pluginCtrl.hasPlugin(PLUGIN_KEY);\n  }\n}\n","// tslint:disable:no-output-rename\n\nimport {\n  Inject,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DragDrop,\n  CdkDropListGroup,\n  CdkDropList,\n  CdkDrag,\n  CDK_DROP_LIST,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\nimport { cdkDropList } from '../v7-compat';\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: '[pblAggregationContainer]',\n  exportAs: 'pblAggregationContainer',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n  },\n  providers: [\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\n  ],\n})\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  pending: PblColumn;\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>,\n              @Optional() dragDropRegistry?: DragDropRegistry<any, any>, // for v7 compat\n              @Optional() @Inject(DOCUMENT) _document?: any,) {\n    super(...cdkDropList(element, dragDrop, changeDetectorRef, dir, group, dragDropRegistry, _document));\n    // super(element, dragDrop, changeDetectorRef, dir, group);\n    const reorder = pluginCtrl.getPlugin('columnReorder');\n    reorder.connectedTo = this.id;\n\n    this.pblDropListRef.dropped\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        this.table.columnApi.addGroupBy(item.data.column);\n      });\n\n    this.pblDropListRef.entered\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = item.data.column;\n        item.getPlaceholderElement().style.display = 'none';\n        for (const c of item.data.getCells()) {\n          c.style.display = 'none';\n        }\n      });\n\n    this.pblDropListRef.exited\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        item.getPlaceholderElement().style.display = '';\n        for (const c of item.data.getCells()) {\n          c.style.display = '';\n        }\n      });\n  }\n\n    /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule, DragDrop } from '@angular/cdk/drag-drop';\n\nimport { PblNgridModule, provideCommon } from '@pebula/ngrid';\n\nimport { PblDragDrop } from './drag-and-drop/core/drag-drop';\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective } from './drag-and-drop/row/row-reorder-plugin';\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective } from './drag-and-drop/column/column-reorder-plugin';\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\n\nimport { PblNgridDragResizeComponent } from './column-resize/column-resize.component';\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\n\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n    DragDropModule\n  ],\n  declarations: [\n    DragPluginDefaultTemplatesComponent,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  exports: [\n    DragDropModule,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  providers: [\n    PblDragDrop,\n    { provide: DragDrop, useExisting: PblDragDrop },\n  ],\n  entryComponents: [ DragPluginDefaultTemplatesComponent ],\n})\nexport class PblNgridDragModule {\n\n  static withDefaultTemplates(): ModuleWithProviders {\n    return {\n      ngModule: PblNgridDragModule,\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\n    };\n  }\n}\n"],"names":["PLUGIN_KEY","_uniqueIdCounter","extendGrid"],"mappings":"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"}
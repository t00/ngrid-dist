{"version":3,"file":"pebula-ngrid-clipboard.js","sources":["ng://@pebula/ngrid/clipboard/lib/clipboard.service.ts","ng://@pebula/ngrid/clipboard/lib/clipboard.plugin.ts","ng://@pebula/ngrid/clipboard/lib/clipboard.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n /**\n * A service for copying text to the clipboard.\n *\n * Example usage:\n *\n * clipboard.copy(\"copy this text\");\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private _document: Document;\n\n   constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n   /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n     return successful;\n  }\n\n   /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n\n /**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n   constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n\n     // Hide the element for display and accessibility.\n    textarea.setAttribute('style', 'opacity: 0;');\n    textarea.setAttribute('aria-hidden', 'true');\n\n     textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n   /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n     try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = document.activeElement;\n\n         textarea.select();\n        successful = this._document.execCommand('copy');\n\n         if (currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n     return successful;\n  }\n\n   /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    if (this._textarea) {\n      this._document.body.removeChild(this._textarea);\n      this._textarea = undefined;\n    }\n  }\n}\n","import { filter } from 'rxjs/operators';\r\nimport { Directive, Injector, OnDestroy, Input } from '@angular/core';\r\n\r\n// import { Clipboard } from '@angular/cdk-experimental/clipboard';\r\n// TODO: remove internal implementation in the next version of cdk-experimental (right after 8.1.3)\r\nimport { Clipboard } from './clipboard.service';\r\n\r\nimport { UnRx } from '@pebula/utils';\r\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin, PblNgridConfigService } from '@pebula/ngrid';\r\n\r\ndeclare module '@pebula/ngrid/lib/ext/types' {\r\n  interface PblNgridPluginExtension {\r\n    clipboard?: PblNgridClipboardPlugin;\r\n  }\r\n  interface PblNgridPluginExtensionFactories {\r\n    clipboard: keyof typeof PblNgridClipboardPlugin;\r\n  }\r\n}\r\n\r\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\r\n  interface PblNgridConfig {\r\n    clipboard?: {\r\n      /** When set to true will enable the clipboard plugin on all grid instances by default. */\r\n      autoEnable?: boolean;\r\n      /**\r\n       * The separator to use when multiple cells are copied\r\n       * @default \\t\r\n       */\r\n      cellSeparator?: string;\r\n      /**\r\n       * The separator to use when multiple rows are copied\r\n       * @default \\n\r\n       */\r\n      rowSeparator?: string;\r\n    };\r\n  }\r\n}\r\n\r\nconst IS_OSX = /^mac/.test(navigator.platform.toLowerCase())\r\nconst DEFAULT_CELL_SEP = '\\t';\r\nconst DEFAULT_ROW_SEP = '\\n';\r\n\r\nexport const PLUGIN_KEY: 'clipboard' = 'clipboard';\r\n\r\n@NgridPlugin({ id: PLUGIN_KEY, factory: 'create' })\r\n@Directive({ selector: 'pbl-ngrid[clipboard]', exportAs: 'pblNgridClipboard' })\r\n@UnRx()\r\nexport class PblNgridClipboardPlugin implements OnDestroy {\r\n\r\n  static create(grid: PblNgridComponent, injector: Injector): PblNgridClipboardPlugin {\r\n    const pluginCtrl = PblNgridPluginController.find(grid);\r\n    return new PblNgridClipboardPlugin(grid, injector, pluginCtrl);\r\n  }\r\n\r\n  /**\r\n   * The separator to use when multiple cells are copied.\r\n   * If not set, taken from `PblNgridConfig.clipboard.cellSeparator`\r\n   * @default \\t\r\n   */\r\n  @Input() clpCellSep: string;\r\n\r\n  /**\r\n   * The separator to use when multiple rows are copied\r\n   * If not set, taken from `PblNgridConfig.clipboard.rowSeparator`\r\n   * @default \\n\r\n   */\r\n  @Input() clpRowSep: string;\r\n\r\n  private config: PblNgridConfigService;\r\n  private clipboard: Clipboard;\r\n  private _removePlugin: (grid: PblNgridComponent) => void;\r\n\r\n  constructor(public grid: PblNgridComponent<any>, protected injector: Injector, protected pluginCtrl: PblNgridPluginController) {\r\n    this.config = injector.get(PblNgridConfigService)\r\n    this.clipboard = injector.get(Clipboard);\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._removePlugin(this.grid);\r\n  }\r\n\r\n  protected isCopyEvent(event: Event): boolean {\r\n    if (event instanceof KeyboardEvent && event.key === 'c') {\r\n      if ((!IS_OSX && event.ctrlKey) || (IS_OSX && event.metaKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  protected doCopy(): void {\r\n    const { cellSeparator, rowSeparator } = this.config.get('clipboard', {});\r\n    const { rows, minIndex } = this.getSelectedRowData(this.grid);\r\n    const createRow = (row: any[]) => row.slice(minIndex).join(this.clpCellSep || cellSeparator || DEFAULT_CELL_SEP);\r\n    // For each row (collection of items), slice the initial items that are not copied across all selections\r\n\r\n    this.clipboard.copy(rows.map(createRow).join(this.clpRowSep || rowSeparator || DEFAULT_ROW_SEP));\r\n    // TODO: Consider using `beginCopy` to support large copy operations\r\n  }\r\n\r\n  protected getSelectedRowData(grid: PblNgridComponent) {\r\n    const { columnApi, contextApi } = grid;\r\n    const data = new Map<any, any[]>();\r\n\r\n    // The minIndex represents the first column being copied out of all visible columns (0 being the first visible column).\r\n    // For every selected cell, the column is tracked and it's index is being set to `minIndex` if it is lower then the current `minIndex` (Math.Min).\r\n    // We start with the biggest int but right away get a valid column index...\r\n    // Later on, each row is sliced to remove the items in indices lower then the `minIndex`.\r\n    //\r\n    // All of this is to make the paste start without leading cell separators.\r\n    let minIndex = Number.MAX_SAFE_INTEGER;\r\n\r\n    for (const point of contextApi.selectedCells) {\r\n      const col = columnApi.columns[point.colIndex];\r\n      if (col) {\r\n        const colIndex = columnApi.renderIndexOf(col);\r\n        if (colIndex > -1) {\r\n          const rowIndex = contextApi.findRowInCache(point.rowIdent).dataIndex;\r\n          const dataItem = col.getValue(grid.ds.source[rowIndex]);\r\n          const row = data.get(point.rowIdent) || [];\r\n          row[colIndex] = dataItem;\r\n          data.set(point.rowIdent, row);\r\n          minIndex = Math.min(minIndex, colIndex);\r\n        }\r\n      }\r\n    }\r\n\r\n    // contextApi.selectedCells are un-ordered, their order is based on the order in which user have selected cells.\r\n    // It means that the row's will not paste in the proper order unless we re-order them based on the data index.\r\n    // This is a very native and simple implementation that will hold most copy actions 1k +-\r\n    // TODO: Consider a better logic, taking performance into consideration.\r\n\r\n    const entries = Array.from(data.entries());\r\n    entries.sort((a, b) => {\r\n      const aIndex = contextApi.findRowInCache(a[0]).dataIndex;\r\n      const bIndex = contextApi.findRowInCache(b[0]).dataIndex;\r\n      if (aIndex < bIndex) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n\r\n    return {\r\n      minIndex,\r\n      rows: entries.map( e => e[1] ),\r\n    };\r\n  }\r\n\r\n  private init(): void {\r\n    this._removePlugin = this.pluginCtrl.setPlugin(PLUGIN_KEY, this);\r\n\r\n    if (!this.pluginCtrl.hasPlugin('targetEvents')) {\r\n      this.pluginCtrl.createPlugin('targetEvents');\r\n    }\r\n\r\n    const targetEvents = this.pluginCtrl.getPlugin('targetEvents');\r\n    targetEvents.keyDown\r\n      .pipe(\r\n        filter( event => this.isCopyEvent(event.source) ),\r\n        UnRx(this)\r\n      )\r\n      .subscribe( event => this.doCopy() );\r\n  }\r\n}\r\n","import { first, filter } from 'rxjs/operators';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PblNgridModule, PblNgridConfigService, PblNgridPluginController } from '@pebula/ngrid';\nimport { PblNgridTargetEventsModule } from '@pebula/ngrid/target-events';\n\nimport { PLUGIN_KEY, PblNgridClipboardPlugin } from './clipboard.plugin';\n\n@NgModule({\n  imports: [ CommonModule, PblNgridModule, PblNgridTargetEventsModule ],\n  declarations: [ PblNgridClipboardPlugin ],\n  exports: [ PblNgridClipboardPlugin ],\n})\nexport class PblNgridClipboardPluginModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridClipboardPluginModule,\n              configService: PblNgridConfigService) {\n\n    if (parentModule) {\n      return;\n    }\n    PblNgridPluginController.created\n      .subscribe( event => {\n        const config = configService.get(PLUGIN_KEY, {});\n        if (config.autoEnable === true) {\n          const pluginCtrl = event.controller;\n          pluginCtrl.events\n            .pipe(\n              filter( e => e.kind === 'onInit' ),\n              first(),\n            )\n            .subscribe( e => {\n              if (!pluginCtrl.hasPlugin(PLUGIN_KEY)) {\n                pluginCtrl.createPlugin(PLUGIN_KEY);\n              }\n            });\n        }\n      });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,MAAa,SAAS;;;;IAGnB,YAA8B,QAAa;QAC1C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;;;;;;;IAQD,IAAI,CAAC,IAAY;;cACT,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;;cAClC,UAAU,GAAG,WAAW,CAAC,IAAI,EAAE;QACrC,WAAW,CAAC,OAAO,EAAE,CAAC;QAErB,OAAO,UAAU,CAAC;KACpB;;;;;;;;;;IAWD,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KAC9C;;;YAjCF,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;4CAIhB,MAAM,SAAC,QAAQ;;;;;;;;IAF7B,8BAA4B;;;;;;;;;;;;;;;AA+C9B,MAAa,WAAW;;;;;IAGrB,YAAY,IAAY,EAAmB,SAAmB;QAAnB,cAAS,GAAT,SAAS,CAAU;;cACvD,QAAQ,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC;;QAG1E,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC9C,QAAQ,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAE5C,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KAC3C;;;;;IAGD,IAAI;;cACI,QAAQ,GAAG,IAAI,CAAC,SAAS;;YAC3B,UAAU,GAAG,KAAK;QAErB,IAAI;YACH,IAAI,QAAQ,EAAE;;sBACN,YAAY,GAAG,QAAQ,CAAC,aAAa;gBAE1C,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACnB,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAE/C,IAAI,YAAY,YAAY,WAAW,EAAE;oBACxC,YAAY,CAAC,KAAK,EAAE,CAAC;iBACtB;aACF;SACF;QAAC,WAAM;;;SAGP;QAEA,OAAO,UAAU,CAAC;KACpB;;;;;IAGD,OAAO;QACL,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC5B;KACF;CACF;;;;;;IA5CC,gCAAiD;;;;;IAEtB,gCAAoC;;;;;MChC3D,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;;MACtD,gBAAgB,GAAG,IAAI;;MACvB,eAAe,GAAG,IAAI;;AAE5B,MAAa,UAAU,GAAgB,WAAW;IAKrC,uBAAuB,qCAAvB,uBAAuB;;;;;;IAyBlC,YAAmB,IAA4B,EAAY,QAAkB,EAAY,UAAoC;QAA1G,SAAI,GAAJ,IAAI,CAAwB;QAAY,aAAQ,GAAR,QAAQ,CAAU;QAAY,eAAU,GAAV,UAAU,CAA0B;QAC3H,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;QACjD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;;;;;;IA3BD,OAAO,MAAM,CAAC,IAAuB,EAAE,QAAkB;;cACjD,UAAU,GAAG,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;QACtD,OAAO,IAAI,yBAAuB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;KAChE;;;;IA0BD,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/B;;;;;;IAES,WAAW,CAAC,KAAY;QAChC,IAAI,KAAK,YAAY,aAAa,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;YACvD,IAAI,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,MAAM,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAC3D,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;KACd;;;;;IAES,MAAM;cACR,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC;cAClE,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;;cACvD,SAAS;;;;QAAG,CAAC,GAAU,KAAK,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,aAAa,IAAI,gBAAgB,CAAC,CAAA;;QAGhH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,YAAY,IAAI,eAAe,CAAC,CAAC,CAAC;;KAElG;;;;;;IAES,kBAAkB,CAAC,IAAuB;cAC5C,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI;;cAChC,IAAI,GAAG,IAAI,GAAG,EAAc;;;;;;;;YAQ9B,QAAQ,GAAG,MAAM,CAAC,gBAAgB;QAEtC,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,aAAa,EAAE;;kBACtC,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC7C,IAAI,GAAG,EAAE;;sBACD,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC;gBAC7C,IAAI,QAAQ,GAAG,CAAC,CAAC,EAAE;;0BACX,QAAQ,GAAG,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,SAAS;;0BAC9D,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;;0BACjD,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;oBAC1C,GAAG,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBAC9B,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;iBACzC;aACF;SACF;;;;;;cAOK,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC1C,OAAO,CAAC,IAAI;;;;;QAAC,CAAC,CAAC,EAAE,CAAC;;kBACV,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;kBAClD,MAAM,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;YACxD,IAAI,MAAM,GAAG,MAAM,EAAE;gBACnB,OAAO,CAAC,CAAC,CAAC;aACX;iBAAM;gBACL,OAAO,CAAC,CAAC;aACV;SACF,EAAC,CAAC;QAEH,OAAO;YACL,QAAQ;YACR,IAAI,EAAE,OAAO,CAAC,GAAG;;;;YAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;SAC/B,CAAC;KACH;;;;;IAEO,IAAI;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;YAC9C,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;SAC9C;;cAEK,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC;QAC9D,YAAY,CAAC,OAAO;aACjB,IAAI,CACH,MAAM;;;;QAAE,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EACjD,IAAI,CAAC,IAAI,CAAC,CACX;aACA,SAAS;;;;QAAE,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;KACxC;CACF,CAAA;;YA7F0B,iBAAiB;YAA2B,QAAQ;YAAwB,wBAAwB;;;YA3B9H,SAAS,SAAC,EAAE,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,EAAE,mBAAmB,EAAE;;;;YArCrE,iBAAiB;YAPN,QAAQ;YAOA,wBAAwB;;;yBAmDjD,KAAK;wBAOL,KAAK;;AAnBK,uBAAuB;IAHnC,WAAW,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;IAElD,IAAI,EAAE;qCA0BoB,iBAAiB,EAA2B,QAAQ,EAAwB,wBAAwB;GAzBlH,uBAAuB,CAsHnC;;;;;;;;IA1GC,6CAA4B;;;;;;;IAO5B,4CAA2B;;;;;IAE3B,yCAAsC;;;;;IACtC,4CAA6B;;;;;IAC7B,gDAAyD;;IAE7C,uCAAmC;;;;;IAAE,2CAA4B;;;;;IAAE,6CAA8C;;;;;;;ACxE/H,MAca,6BAA6B;;;;;IACxC,YAAoC,YAA2C,EACnE,aAAoC;QAE9C,IAAI,YAAY,EAAE;YAChB,OAAO;SACR;QACD,wBAAwB,CAAC,OAAO;aAC7B,SAAS;;;;QAAE,KAAK;;kBACT,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC;YAChD,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE;;sBACxB,UAAU,GAAG,KAAK,CAAC,UAAU;gBACnC,UAAU,CAAC,MAAM;qBACd,IAAI,CACH,MAAM;;;;gBAAE,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE,EAClC,KAAK,EAAE,CACR;qBACA,SAAS;;;;gBAAE,CAAC;oBACX,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;wBACrC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;qBACrC;iBACF,EAAC,CAAC;aACN;SACF,EAAC,CAAC;KACN;;;YA7BF,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAE,YAAY,EAAE,cAAc,EAAE,0BAA0B,CAAE;gBACrE,YAAY,EAAE,CAAE,uBAAuB,CAAE;gBACzC,OAAO,EAAE,CAAE,uBAAuB,CAAE;aACrC;;;;YAEmD,6BAA6B,uBAAlE,QAAQ,YAAI,QAAQ;YAXV,qBAAqB;;;;;;;;;;;;;;;"}
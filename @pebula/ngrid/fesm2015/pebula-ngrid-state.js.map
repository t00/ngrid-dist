{"version":3,"file":"pebula-ngrid-state.js","sources":["ng://@pebula/ngrid/state/lib/core/state-visor.ts","ng://@pebula/ngrid/state/lib/core/persistance/local-storage.ts","ng://@pebula/ngrid/state/lib/core/models/state.ts","ng://@pebula/ngrid/state/lib/core/models/options.ts","ng://@pebula/ngrid/state/lib/core/handling/base.ts","ng://@pebula/ngrid/state/lib/core/identification/index.ts","ng://@pebula/ngrid/state/lib/core/utils.ts","ng://@pebula/ngrid/state/lib/core/state.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/grid-primitives/index.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-def/children.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-def/index.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/column-order/index.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/index.ts","ng://@pebula/ngrid/state/lib/presets.ts","ng://@pebula/ngrid/state/lib/core/built-in-handlers/_register.ts","ng://@pebula/ngrid/state/lib/state-plugin.ts","ng://@pebula/ngrid/state/lib/ngrid-state.module.ts"],"sourcesContent":["import { PblNgridGlobalState, StateChunks, RootStateChunks, PblNgridStateChunkSectionContext } from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling';\n\nexport let _instance: StateVisor;\n\nexport interface PblNgridStateChunkSectionConfig<T extends keyof RootStateChunks = keyof RootStateChunks> {\n  stateMatcher: (state: PblNgridGlobalState) => RootStateChunks[T]['state'];\n  sourceMatcher: (context: PblNgridStateChunkSectionContext) => RootStateChunks[T]['value'];\n}\n\nexport class StateVisor<T extends keyof StateChunks = keyof StateChunks> {\n\n  private rootChunkSections = new Map<keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>>();\n  private chunkHandlers = new Map<T, PblNgridStateChunkHandlerDefinition<T>[]>();\n\n  private constructor() { }\n\n  static get(): StateVisor { return _instance || (_instance = new StateVisor()); }\n\n  registerRootChunkSection<Z extends keyof RootStateChunks>(chunkId: Z, config: PblNgridStateChunkSectionConfig<Z>): void {\n    if (!this.rootChunkSections.has(chunkId)) {\n      this.rootChunkSections.set(chunkId, config);\n    }\n  }\n\n  registerChunkHandlerDefinition<Z extends T>(chunkHandlerDefs: PblNgridStateChunkHandlerDefinition<Z>): void {\n    const { chunkId } = chunkHandlerDefs;\n    const handlersForGroup = this.chunkHandlers.get(chunkId) || [];\n    handlersForGroup.push(chunkHandlerDefs);\n    this.chunkHandlers.set(chunkId, handlersForGroup);\n  }\n\n  getRootSections(): Array<[keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>]> {\n    return Array.from(this.rootChunkSections.entries());\n  }\n\n  getDefinitionsForSection(chunkId: T): PblNgridStateChunkHandlerDefinition<T>[] {\n    return this.chunkHandlers.get(chunkId) || [];\n  }\n}\n\nexport const stateVisor: StateVisor = StateVisor.get();\n","import { PblNgridGlobalState, PblNgridPersistAdapter } from '../models/index';\n\nexport class PblNgridLocalStoragePersistAdapter implements PblNgridPersistAdapter {\n  private static globalStateKey: string = 'pebulaNgridState';\n\n  save(id: string, state: PblNgridGlobalState): Promise<void> {\n    try {\n      const store = this.loadGlobalStateStore();\n      store[id] = state;\n      if (!state.__metadata__) {\n        state.__metadata__ = {} as any;\n      }\n      state.__metadata__.updatedAt = new Date().toISOString();\n\n      this.saveGlobalStateStore(store);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  load(id: string): Promise<PblNgridGlobalState> {\n    return Promise.resolve(this.loadGlobalStateStore()[id] || {} as any);\n  }\n\n  exists(id: string): Promise<boolean> {\n    const store = this.loadGlobalStateStore() || {};\n    return Promise.resolve(id in store);\n  }\n\n  private loadGlobalStateStore(): { [id: string]: PblNgridGlobalState } {\n    const raw = localStorage.getItem(PblNgridLocalStoragePersistAdapter.globalStateKey);\n    return raw ? JSON.parse(raw) : {};\n  }\n\n  private saveGlobalStateStore(store: { [id: string]: PblNgridGlobalState }): void {\n    localStorage.setItem(PblNgridLocalStoragePersistAdapter.globalStateKey, JSON.stringify(store));\n  }\n}\n","import { PblNgridComponent, PblNgridExtensionApi } from '@pebula/ngrid';\nimport * as B from '../built-in-handlers/index';\nimport { PblNgridStateOptions } from './options';\n\n/* ======================= State Chunks */\n\nexport interface StateChunkItem<TState, TValue, TData = any, TKeyless = never> {\n  state: TState;\n  value?: TValue;\n  data?: TData;\n  keyless: TKeyless;\n}\n\nexport interface RootStateChunks extends B.BuiltInRootStateChunks { }\n\nexport interface StateChunks extends RootStateChunks, B.BuiltInStateChunks{ }\n\nexport interface PblNgridStateContext {\n  grid: PblNgridComponent;\n  extApi: PblNgridExtensionApi;\n  options: PblNgridStateOptions;\n}\n\nexport interface PblNgridStateChunkSectionContext extends PblNgridStateContext { }\n\nexport interface PblNgridStateChunkContext<T extends keyof StateChunks> extends PblNgridStateChunkSectionContext {\n  source: StateChunks[T]['value'];\n  data?: StateChunks[T]['data']\n  runChildChunk?<TChild extends keyof StateChunks>(childChunkId: TChild, state: StateChunks[TChild]['state'], source: StateChunks[TChild]['value'], data?: StateChunks[TChild]['data']);\n}\n\n/* ======================= State Chunks */\n\n/* ======================= Global State Object */\n\nexport interface PblNgridStateMetadata {\n  updatedAt: string;\n}\n\nexport interface PblNgridGlobalState extends B.PblNgridBuiltInGlobalState {\n  __metadata__: PblNgridStateMetadata;\n}\n\n/* ======================= Global State Object */\n","import { RootStateChunks, StateChunks, PblNgridGlobalState, PblNgridStateContext } from './state';\n\n/**\n * An interface for datasource specific logical units that can load and save state objects.\n *\n * For example, `PblNgridLocalStoragePersistAdapter` is an adapter that can loan and save the state\n * from the local storage.\n */\nexport interface PblNgridPersistAdapter {\n  save(id: string, state: PblNgridGlobalState): Promise<void>;\n  load(id: string): Promise<PblNgridGlobalState>;\n  exists(id: string): Promise<boolean>;\n}\n\n/**\n * An interface for logical units that can resolve a unique id for a grid.\n *\n * For example, `PblNgridIdAttributeIdentResolver` is a resolver that will resolve an id from the\n * `id` property of the grid (`PblNgridComponent.id`) which is bound to the `id` attribute of the grid (`<pbl-ngrid id=\"SOME ID\"></pbl-ngrid>`).\n */\nexport interface PblNgridIdentResolver {\n  resolveId(ctx: PblNgridIdentResolverContext): string | undefined;\n}\n\n/**\n * The context provided when resolving an id (`PblNgridIdentResolver`).\n */\nexport interface PblNgridIdentResolverContext extends PblNgridStateContext { }\n\n\nexport type StateChunkKeyFilter = {\n  [P in keyof StateChunks]?:\n    P extends keyof RootStateChunks\n      ? RootStateChunks[P]['keyless'] extends never ? (Array<keyof RootStateChunks[P]['state']> | boolean) : boolean\n      : Array<keyof StateChunks[P]['state']> | boolean\n    ;\n}\n\nexport interface PblNgridStateSaveOptions {\n  /**\n   * The adapter to use for persistance.\n   * @default PblNgridLocalStoragePersistAdapter\n   */\n  persistenceAdapter?: PblNgridPersistAdapter\n\n  /**\n   * The resolver used to get the unique id for an instance of the grid.\n   * If not set default's to the id property of `PblNgridComponent` which is the id attribute of `<pbl-ngrid>`\n   * @default PblNgridIdAttributeIdentResolver\n   */\n  identResolver?: PblNgridIdentResolver;\n\n  /**\n   * Instruction of chunk and chunk keys to include when serializing / deserializing.\n   * Include is strict, only the included chunks and keys are used, everything else is ignored.\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   * Note that when using include with child chunks you must include the root chunk of the child chunk, if not\n   * the root chunk is skipped and so the child.\n   *\n   * For example, to include the `width` key of the `dataColumn` child chunk we must also include the `columns` root chunk.\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: [\n   *       'width',\n   *     ]\n   *   };\n   * ```\n   *\n   * We can also use the wildcard `true` to include all items in a chunk:\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: true,\n   *   };\n   * ```\n   *\n   * Same specificity rule apply here as well, `columns: true` alone will not include all of it's child chunks so we must add `dataColumn: true`.\n   * Vice versa, `dataColumn: true` alone will not get included because it's parent (`columns`) is blocked\n   */\n  include?: StateChunkKeyFilter;\n\n  /**\n   * Instruction of chunk and chunk keys to exclude when serializing / deserializing.\n   * Exclude is not strict, all known chunks and keys are used unless they are excluded and so will be ignored\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   */\n  exclude?: StateChunkKeyFilter;\n}\n\nexport interface PblNgridStateLoadOptions extends PblNgridStateSaveOptions {\n  /**\n   * When set to `overwrite`, state values will run over existing runtime values.\n   * When set to `merge`, state values will not run over existing runtime values and only update values that are not set.\n   * @default overwrite\n   */\n  strategy?: 'overwrite' | 'merge';\n\n  /**\n   * When set to true the loading process will try to avoid the use of grid methods that force an immediate redrew.\n   * Usually, redrawing is not a problem but in some cases it is required, for example, avoiding redraws is useful when\n   * we load the state after the columns are initiated but before the grid draws them, in this case some of the data is\n   * missing because it depend on updates from the draw process.\n   *\n   * We use the term `avoid` because the state plugin is extensible so a plugin can also apply state for it's own use.\n   * Because of that we can't guarantee that no redraw is performed.\n   */\n  avoidRedraw?: boolean;\n}\n\nexport type PblNgridStateOptions = PblNgridStateLoadOptions | PblNgridStateSaveOptions\n","import { StateChunks, PblNgridStateChunkContext } from '../models/index';\nimport { stateVisor } from '../state-visor';\n\nexport class PblNgridStateChunkHandlerHost<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']> {\n  private keys = new Set<Z>();\n  private rKeys = new Set<Z>();\n  private sFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  private dFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n\n  constructor(private chunkId: T) { }\n\n  handleKeys(...keys: Array<Z>): this {\n    for (const k of keys) { this.keys.add(k) }\n    return this;\n  }\n\n  /**\n   * Required keys are keys that cannot get excluded.\n   * Either by adding the to the `exclude` option or by omitting them from the `include` option.\n   */\n  requiredKeys(...keys: Array<Z>): this {\n    for (const k of keys) {\n      this.keys.add(k)\n      this.rKeys.add(k);\n    }\n    return this;\n  }\n\n  serialize(fn: (key: Z, ctx: PblNgridStateChunkContext<T>) => StateChunks[T]['state'][Z]): this {\n    this.sFn = fn;\n    return this;\n  }\n\n  deserialize(fn: (key: Z, stateValue: StateChunks[T]['state'][Z],  ctx: PblNgridStateChunkContext<T>) => void): this {\n    this.dFn = fn;\n    return this;\n  }\n\n  register(): void {\n    if (this.keys.size === 0) {\n      throw new Error('Invalid state chunk handler, no keys defined.');\n    }\n    if (!this.sFn) {\n      throw new Error('Invalid state chunk handler, missing serialize handler.');\n    }\n    if (!this.dFn) {\n      throw new Error('Invalid state chunk handler, missing deserialize handler.');\n    }\n\n    stateVisor.registerChunkHandlerDefinition({\n      chunkId: this.chunkId,\n      keys: Array.from(this.keys.values()),\n      rKeys: Array.from(this.rKeys.values()),\n      serialize: this.sFn,\n      deserialize: this.dFn,\n    })\n  }\n}\n\nexport interface PblNgridStateChunkHandlerDefinition<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']>{\n  chunkId: T;\n  keys: Array<Z>;\n  rKeys: Array<Z>;\n  serialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  deserialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n}\n\nexport function createStateChunkHandler<T extends keyof StateChunks>(section: T) {\n  return new PblNgridStateChunkHandlerHost(section);\n}\n","import { PblNgridIdentResolver, PblNgridIdentResolverContext } from '../models/index';\n\nexport class PblNgridIdAttributeIdentResolver implements PblNgridIdentResolver {\n  resolveId(ctx: PblNgridIdentResolverContext): string | undefined {\n    return ctx.grid.id;\n  }\n}\n","import { PblNgridComponent, PblNgridPluginController, PblNgridExtensionApi } from '@pebula/ngrid';\nimport {\n  RootStateChunks,\n  StateChunks,\n  PblNgridStateChunkSectionContext,\n  PblNgridStateChunkContext,\n  PblNgridStateOptions,\n  PblNgridStateLoadOptions,\n} from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling/base';\nimport { stateVisor, PblNgridStateChunkSectionConfig } from './state-visor';\nimport { PblNgridLocalStoragePersistAdapter } from './persistance/local-storage';\nimport { PblNgridIdAttributeIdentResolver } from './identification/index';\n\n/**\n * Pick Partial No Partial\n * Like Pick but some are partial some are not partial\n */\nexport type PickPNP<T, P extends keyof T, NP extends keyof T> = Partial<Pick<T, P>> & Pick<T, NP>\n\nexport function resolveId(grid: PblNgridComponent, options?: PblNgridStateOptions): string {\n  const id = options.identResolver.resolveId(createChunkSectionContext(grid, options));\n  if (!id) {\n    throw new Error('Could not resolve a unique id for an ngrid instance, state is disabled');\n  }\n  return id;\n}\n\nexport function serialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n      state[key] = def.serialize(key, ctx);\n    }\n  }\n}\n\nexport function deserialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (key in state) {\n      if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n        def.deserialize(key, state[key], ctx);\n      }\n    }\n  }\n}\n\nexport function normalizeOptions(mode: 'save', options?: PblNgridStateOptions): PblNgridStateOptions;\nexport function normalizeOptions(mode: 'load', options?: PblNgridStateLoadOptions): PblNgridStateLoadOptions;\nexport function normalizeOptions(mode: 'save' | 'load', options?: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateOptions | PblNgridStateLoadOptions {\n  if (!options) {\n    options = {} as any;\n  }\n\n  if (!options.persistenceAdapter) {\n    options.persistenceAdapter = new PblNgridLocalStoragePersistAdapter();\n  }\n  if (!options.identResolver) {\n    options.identResolver = new PblNgridIdAttributeIdentResolver();\n  }\n\n  if (mode === 'load') {\n    const opt: PblNgridStateLoadOptions = options;\n    if (!opt.strategy) {\n      opt.strategy = 'overwrite'\n    }\n  }\n\n  return options;\n}\n\nexport function getExtApi(grid: PblNgridComponent): PblNgridExtensionApi {\n  const controller = PblNgridPluginController.find(grid);\n  if (controller) {\n    return controller.extApi;\n  }\n}\n\nexport function createChunkSectionContext(grid: PblNgridComponent,\n                                          options: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateChunkSectionContext {\n  return { grid, extApi: getExtApi(grid), options };\n}\n\nexport function createChunkContext<T extends keyof RootStateChunks>(sectionContext: PblNgridStateChunkSectionContext,\n                                                                   chunkConfig: PblNgridStateChunkSectionConfig<T>,\n                                                                   mode: 'serialize' | 'deserialize'): PblNgridStateChunkContext<T> {\n  return {\n    ...sectionContext,\n    source: chunkConfig.sourceMatcher(sectionContext),\n    runChildChunk<TChild extends keyof StateChunks>(childChunkId: TChild, state: StateChunks[TChild]['state'], source: StateChunks[TChild]['value'], data?: StateChunks[TChild]['data']) {\n      const childContext = { ...sectionContext, source, data };\n      const defs = stateVisor.getDefinitionsForSection(childChunkId);\n\n      const action = mode === 'serialize' ? serialize : deserialize;\n      for (const def of defs) {\n        action(def, state, childContext);\n      }\n    }\n  }\n}\n\nexport function stateKeyPredicateFactory(chunkId: keyof StateChunks, options: PblNgridStateOptions, rootPredicate = false): ((key: string) => boolean) | undefined {\n  // TODO: chunkId ans options include/exclude combination does not change\n  // we need to cache it... e.g. each column def will create a new predicate if we don't cache.\n  const filter = options.include || options.exclude;\n  if (filter) {\n    // -1: Exclude, 1: Include\n    const mode: -1 | 1 = filter === options.include ? 1 : -1;\n    const chunkFilter: boolean | string[] = filter[chunkId];\n    if (typeof chunkFilter === 'boolean') {\n      return mode === 1\n        ? (key: string) => chunkFilter\n        : (key: string) => !chunkFilter\n      ;\n    } else if (Array.isArray(chunkFilter)) {\n      if (rootPredicate) {\n        // root predicate is for RootStateChunks and when set to true\n        // the key itself has no impact on the predicate. If the filter is boolean nothing changes\n        // but if it's an array, the array is ignored and considered as true ignoring the key because a key does not existing when checking the root\n        return k => true;\n      } else {\n        return mode === 1\n          ? (key: string) => chunkFilter.indexOf(key) > -1\n          : (key: string) => chunkFilter.indexOf(key) === -1\n        ;\n      }\n    } else if (mode === 1) {\n      return (key: string) => false\n    }\n  }\n}\n\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PblNgridGlobalState, PblNgridStateOptions, PblNgridStateSaveOptions, PblNgridStateLoadOptions } from './models/index';\nimport { stateVisor } from './state-visor';\nimport * as U from './utils';\n\nexport function hasState(grid: PblNgridComponent, options?: PblNgridStateOptions): Promise<boolean> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.exists(id);\n    });\n}\n\nexport function saveState(grid: PblNgridComponent, options?: PblNgridStateSaveOptions): Promise<void> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      const state: PblNgridGlobalState = {} as any;\n      const context = U.createChunkSectionContext(grid, options);\n\n      for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n        const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n        if (!keyPredicate || keyPredicate(chunkId)) {\n          const sectionState = chunkConfig.stateMatcher(state);\n          const chunkContext = U.createChunkContext(context, chunkConfig, 'serialize');\n\n          const defs = stateVisor.getDefinitionsForSection(chunkId);\n          for (const def of defs) {\n            U.serialize(def, sectionState, chunkContext);\n          }\n        }\n      }\n      return options.persistenceAdapter.save(id, state);\n    });\n}\n\nexport function loadState(grid: PblNgridComponent, options?: PblNgridStateLoadOptions): Promise<PblNgridGlobalState> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('load', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.load(id)\n        .then( state => {\n          const context = U.createChunkSectionContext(grid, options);\n\n          for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n            const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n            if (!keyPredicate || keyPredicate(chunkId)) {\n              const sectionState = chunkConfig.stateMatcher(state);\n              const chunkContext = U.createChunkContext(context, chunkConfig, 'deserialize');\n\n              const defs = stateVisor.getDefinitionsForSection(chunkId);\n              for (const def of defs) {\n                U.deserialize(def, sectionState, chunkContext);\n              }\n            }\n          }\n          return state;\n        });\n    });\n}\n\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PickPNP } from '../../utils';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\n\nexport interface PblNgridSurfaceState extends\n  PickPNP <\n    PblNgridComponent,\n    'showHeader' | 'showFooter' | 'focusMode' | 'usePagination' | 'hideColumns' | 'fallbackMinHeight',\n    never\n  > { }\n\nexport function registerGridHandlers() {\n  stateVisor.registerRootChunkSection(\n    'grid',\n    {\n      sourceMatcher: ctx => ctx.grid,\n      stateMatcher: state => state.grid || (state.grid = {} as any)\n    }\n  );\n\n  createStateChunkHandler('grid')\n    .handleKeys('showHeader', 'showFooter', 'focusMode', 'usePagination', 'hideColumns', 'fallbackMinHeight')\n    .serialize( (key, ctx) => ctx.source[key] )\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key as any] = stateValue;\n    })\n    .register();\n}\n","import { PblColumnTypeDefinition, PblColumn, PblColumnDefinition, PblMetaRowDefinitions } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\n\nexport function registerColumnDefChildHandlers() {\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataColumn')\n    .requiredKeys('id', 'prop')\n    .handleKeys(\n      'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',              // PblNgridBaseColumnState (all optional)\n      'headerType', 'footerType', 'sort', 'sortAlias', 'editable', 'pin'    // All Optional\n    )\n    .serialize( (key, ctx) => {\n      const c = ctx.data.activeColumn || ctx.data.pblColumn;\n      if (c) {\n        switch (key) {\n          case 'prop':\n            return c.orgProp;\n          default:\n            break;\n        }\n      }\n\n      const value = c ? c[key] : ctx.source[key];\n\n      switch (key) {\n        case 'sort':\n          if (typeof value === 'boolean') {\n            return value;\n          } else {\n            return;\n          }\n        default:\n          break;\n      }\n\n      return value;\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      const { activeColumn } = ctx.data;\n      if (activeColumn) {\n        switch (key) {\n          case 'width':\n            activeColumn.updateWidth(stateValue as any);\n            break;\n        }\n      }\n      if (ctx.source) {\n        switch (key) {\n          case 'prop':\n            return;\n          case 'type':\n          case 'headerType':\n          case 'footerType':\n            const typeValue = ctx.source[key];\n            const stateTypeDef: PblColumnTypeDefinition = stateValue as any;\n            if (stateTypeDef && typeof stateTypeDef !== 'string' && typeValue && typeof typeValue !== 'string') {\n              typeValue.name = stateTypeDef.name;\n              if (stateTypeDef.data) {\n                typeValue.data = Object.assign(typeValue.data || {}, stateTypeDef.data);\n              }\n              return;\n            }\n            break;\n        }\n\n        // We must assert the type starting from 3.5 onwards\n        // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n        ctx.source[key as keyof (PblColumn | PblColumnDefinition)] = stateValue;\n      }\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataMetaRow')\n    .handleKeys('rowClassName', 'type')    // All Optional\n    .serialize( (key, ctx) => {\n      const active = ctx.data.active || ctx.source;\n      if (active) {\n        return active[key];\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key] = stateValue as any;\n    })\n    .register();\n\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaColumn')\n    .requiredKeys('kind', 'rowIndex')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupColumn')\n    .requiredKeys('prop', 'rowIndex', 'span')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n}\n","import { PblNgridColumnDefinitionSet, PblColumnDefinition, PblColumn, utils } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { StateChunks, PblNgridStateChunkContext } from '../../models/index';\nimport { PblNgridMetaRowSetState, PblNgridMetaColumnState, PblNgridGroupColumnState, PblNgridColumnDefinitionSetState } from './model';\nimport { registerColumnDefChildHandlers } from './children';\n\nfunction runChildChunksForRowMetaColumns<TCol, TChild extends keyof StateChunks>(childChunkId: TChild, ctx: PblNgridStateChunkContext<\"columns\">, columns: TCol[]) {\n  const stateColumns = [];\n  for (const col of columns) {\n    const c: StateChunks[TChild]['state'] = {} as any;\n    ctx.runChildChunk(childChunkId, c, col);\n    stateColumns.push(c);\n  }\n  return stateColumns;\n}\n\n/** Runs the process for the `header` and `footer` sections in the `table` section (if they exist) */\nfunction runChildChunkForDataMetaRows(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { columnStore } = ctx.extApi;\n  const { table } = ctx.source;\n  for (const kind of ['header', 'footer'] as Array<'header' | 'footer'>) {\n    // This is a mapping of the from->to relationship (i.e serializing or deserializing)\n    const src = mode === 's' ? table : state;\n    const dest = src === table ? state : table;\n\n    // we need to have a source\n    if (src[kind]) {\n      const active = kind === 'header' ? columnStore.headerColumnDef : columnStore.footerColumnDef;\n      if (!dest[kind]) { dest[kind] = {}; }\n      ctx.runChildChunk('dataMetaRow', state[kind], table[kind], { kind, active });\n    }\n  }\n}\n\nfunction runChildChunksForRowDataColumns(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { table } = ctx.source;\n  const src = mode === 's' ? table : state;\n\n  const resolve = src === state\n    ? col => ({ colState: col, pblColumn: table.cols.find( tCol => (utils.isPblColumn(tCol) && tCol.orgProp === col.prop) || (tCol.id === col.id || tCol.prop === col.prop) ) })\n    : col => ({ colState: state.cols[state.cols.push({} as any) - 1] , pblColumn: utils.isPblColumn(col) && col })\n  ;\n\n  if (src.cols && src.cols.length > 0) {\n    for (const col of src.cols) {\n      const { colState, pblColumn } = resolve(col)\n\n      const data = {\n        pblColumn: utils.isPblColumn(pblColumn) && pblColumn,\n        activeColumn: ctx.grid.columnApi.findColumn(col.id || col.prop),\n      }\n      ctx.runChildChunk('dataColumn', colState, pblColumn, data);\n    }\n  }\n}\n\nexport function registerColumnDefHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columns',\n    {\n      sourceMatcher: ctx => ctx.grid.columns,\n      stateMatcher: state => state.columns || (state.columns = {\n        table: {\n          cols: [],\n        },\n        header: [],\n        footer: [],\n        headerGroup: [],\n      })\n    }\n  );\n\n  createStateChunkHandler('columns')\n    .handleKeys('table', 'header', 'headerGroup', 'footer')\n    .serialize( (key, ctx) => {\n      switch (key) {\n        case 'table':\n          const state: PblNgridColumnDefinitionSetState['table'] = { cols: [] };\n          runChildChunkForDataMetaRows('s', state, ctx);\n          runChildChunksForRowDataColumns('s', state, ctx);\n          return state;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          if (source && source.length > 0) {\n            const rows = [];\n            for (const row of source) {\n              const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridMetaColumnState> = {} as any;\n              ctx.runChildChunk('metaRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n        case 'headerGroup':\n          const headerGroupSource = ctx.source.headerGroup;\n          if (headerGroupSource && headerGroupSource.length > 0) {\n            const rows = [];\n            for (const row of headerGroupSource) {\n              const active = ctx.extApi.columnStore.metaColumnIds.header.find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridGroupColumnState> = {} as any;\n              ctx.runChildChunk('metaGroupRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      switch (key) {\n        case 'table':\n          const state = stateValue as PblNgridColumnDefinitionSetState['table'];\n          runChildChunkForDataMetaRows('d', state, ctx);\n          runChildChunksForRowDataColumns('d', state, ctx);\n          break;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          const metaRowsState = stateValue as PblNgridColumnDefinitionSetState['header'];\n          if (metaRowsState && metaRowsState.length > 0) {\n            for (const rowState of metaRowsState) {\n              const row = source.find( r => r.rowIndex === rowState.rowIndex );\n              if (row) {\n                const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === rowState.rowIndex );\n                ctx.runChildChunk('metaRow', rowState, row);\n                for (const colState of rowState.cols) {\n                  const col = row.cols.find( r => r.id === colState.id);\n                  if (col) {\n                    const activeColStore = ctx.extApi.columnStore.find(colState.id);\n                    const activeCol = activeColStore && activeColStore.header;\n                    ctx.runChildChunk('metaColumn', colState, col);\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 'headerGroup':\n          break;\n      }\n    })\n    .register();\n\n    registerColumnDefChildHandlers();\n}\n\nexport {\n  PblNgridMetaColumnState,\n  PblNgridGroupColumnState,\n  PblNgridColumnState,\n  PblNgridMetaRowState,\n  PblNgridMetaRowSetState,\n  PblNgridColumnDefinitionSetState,\n} from './model';\n","import { PblColumn } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { PblNgridStateLoadOptions } from '../../models/index';\n\nexport function registerColumnOrderHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columnOrder',\n    {\n      sourceMatcher: ctx => ctx.grid.columnApi,\n      stateMatcher: state => {\n        if (!state.columnOrder) {\n          state.columnOrder = [];\n        }\n        return state;\n      }\n    }\n  );\n\n  createStateChunkHandler('columnOrder')\n    .handleKeys('columnOrder')\n    .serialize( (key, ctx) => ctx.source.visibleColumnIds.slice() )\n    .deserialize( (key, columnOrder, ctx) => {\n      const { extApi, grid } = ctx;\n      let lastMove: [PblColumn, PblColumn];\n\n      const { visibleColumnIds } = grid.columnApi;\n      if (columnOrder && columnOrder.length === visibleColumnIds.length) {\n        for (let i = 0, len = columnOrder.length; i < len; i++) {\n          if (columnOrder[i] !== visibleColumnIds[i]) {\n            const column = grid.columnApi.findColumn(columnOrder[i]);\n            if (!column) {\n              return;\n            }\n            const anchor = grid.columnApi.findColumn(visibleColumnIds[i]);\n            lastMove = [column, anchor];\n            grid.columnApi.moveColumn(column, anchor, true);\n            extApi.columnStore.updateGroups();\n          }\n        }\n      }\n      // With this revert/redo of the last move we just trigger a redraw.\n      if (lastMove) {\n        grid.columnApi.moveColumn(lastMove[1], lastMove[0], true);\n        grid.columnApi.moveColumn(lastMove[0], lastMove[1], (ctx.options as PblNgridStateLoadOptions).avoidRedraw);\n      }\n    })\n    .register();\n  }\n","import {\n  PblNgridComponent,\n  PblMetaColumnDefinition, PblMetaColumn,\n  PblColumnGroupDefinition, PblColumnGroup,\n  PblColumnDefinition, PblColumn,\n  PblMetaRowDefinitions,\n  PblColumnSet,\n  PblNgridColumnDefinitionSet,\n  ColumnApi,\n} from '@pebula/ngrid';\n\nimport { PblNgridGlobalState, StateChunkItem } from '../models/index';\nimport * as C from './column-def/index';\nimport { PblNgridSurfaceState } from './grid-primitives/index';\n\nexport * from './grid-primitives/index';\nexport * from './column-def/index';\nexport * from './column-order/index';\n\nexport interface PblNgridBuiltInGlobalState {\n  grid: PblNgridSurfaceState;\n  columns: C.PblNgridColumnDefinitionSetState;\n  columnOrder: string[];\n}\n\nexport interface BuiltInRootStateChunks {\n  /**\n   * A state chunk that handles serialization of primitive properties on the grid instance (PblNgridComponent)\n   *\n   * - key/value chunk.\n   * - root chunk.\n   */\n  grid: StateChunkItem<PblNgridSurfaceState, PblNgridComponent>;\n  /**\n   * A state chunk that handles serialization of the entire column definition set.\n   *\n   * It include a limited set of keys that you can control (include/exclude).\n   * Based on the keys processed, additional child chunks are processed, based on the processed key and object it represents.\n   *\n   * - key/value chunk.\n   * - has children chunks\n   * - root chunk.\n   */\n  columns: StateChunkItem<C.PblNgridColumnDefinitionSetState, PblNgridColumnDefinitionSet>;\n  /**\n   * A state chunk that handles serialization of the current column order.\n   * This is a keyless chunk, in this case an array, so you can only include / exclude it as a whole.\n   *\n   * - keyless chunk.\n   * - root chunk.\n   */\n  columnOrder: StateChunkItem<Pick<PblNgridGlobalState, 'columnOrder'>, ColumnApi<any>, any, true>;\n}\n\nexport interface BuiltInStateChunks {\n  /**\n   * A state chunk that handles serialization of meta columns (header / footer).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaColumn: StateChunkItem<C.PblNgridMetaColumnState, PblMetaColumnDefinition | PblMetaColumn>;\n  /**\n   * A state chunk that handles serialization of meta group columns (header group).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaGroupColumn: StateChunkItem<C.PblNgridGroupColumnState, PblColumnGroupDefinition | PblColumnGroup>;\n  /**\n   * A state chunk that handles serialization of data columns.\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  dataColumn: StateChunkItem<C.PblNgridColumnState, PblColumnDefinition | PblColumn, DataColumnBuiltInStateChunkExtraData>;\n  /**\n   * A state chunk that handles serialization of meta rows (A row with header / footer column).\n   *\n   * This is a child chunk of the `columns` root chunk\n   *\n   * Note that a `metaRow` does not refer to that main header/footer rows, it only refers to additional meta rows.\n   * The `dataMetaRow` section chunk is the one referring to the main header/footer rows\n   */\n  metaRow: StateChunkItem<C.PblNgridMetaRowSetState<C.PblNgridMetaColumnState>, PblColumnSet<PblMetaColumnDefinition | PblMetaColumn>>;\n  /**\n   * A state chunk that handles serialization of meta group rows (A row with header group columns).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaGroupRow: StateChunkItem<C.PblNgridMetaRowSetState<C.PblNgridGroupColumnState>, PblColumnSet<PblColumnGroupDefinition | PblColumnGroup>>;\n  /**\n   * A state chunk that handles serialization of data rows (A row with data columns).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  dataMetaRow: StateChunkItem<C.PblNgridMetaRowState, PblMetaRowDefinitions, { kind: 'header' | 'footer'; active?: PblMetaRowDefinitions; }>;\n}\n\nexport interface DataColumnBuiltInStateChunkExtraData {\n  /**\n   * The `PblColumn` instance, if found.\n   * If no instance is found it means that the source (`PblNgridComponent.columns`) contains `PblNgridColumnDefinitions`.\n   *\n   * Implementation must fallback to using `ctx.source` if `pblColumn` is not provided.\n   */\n  pblColumn?: PblColumn;\n\n  /**\n   * The `PblColumn` instance that is currently in the grid's column store, if found.\n   * The currently active column is not `pblColumn`, the store always has a copy of all columns.\n   *\n   * If provided, it is not a replacement for `pblColumn`, both require updates. Use the `activeColumn` to save/load the data that\n   * change during runtime.\n   */\n  activeColumn?: PblColumn;\n}\n","import { StateChunkKeyFilter } from './core/models/index';\n\n/**\n * Return's the `User Preferences` preset which focuses on saving and restoring state that the user\n * can define and would want to restore between sessions.\n *\n * For example, saving column width's which the user might have changed using the mouse or any other custom way provided to him (through API).\n * Saving the column order, so if the user re-ordered the table the order can be loaded back again...\n */\nexport function userSessionPref(...basedOn: StateChunkKeyFilter[]): StateChunkKeyFilter {\n  const resultFilter: StateChunkKeyFilter = {\n    grid: [\n      'hideColumns',\n      'showFooter',\n      'showHeader',\n    ],\n    columnOrder: true,\n    columns: [ 'table' ],\n    dataColumn: [\n      'width',\n    ]\n  }\n\n  if (basedOn.length > 0) {\n    for (const b of basedOn)\n    mergeStateChunkKeyFilter(resultFilter, b);\n  }\n\n  return resultFilter;\n}\n\n\n/**\n * Merge a head and tail chunk filters so keys from tail will be merged into head if:\n *\n * - The key does not exist in head\n * - The key exist in head but the value of it is an Array and the value of tail is an Array as well.\n *   In such case, both array's are merged into a single unique array.\n */\nfunction mergeStateChunkKeyFilter(mergeHead: StateChunkKeyFilter, mergeTail: StateChunkKeyFilter) {\n  for (const k of Object.keys(mergeTail)) {\n    const tailValue = mergeTail[k];\n    if (k in mergeHead) {\n      const tailHead = mergeHead[k];\n      if (Array.isArray(tailHead) && Array.isArray(tailValue)) {\n        const s = new Set<string>([...tailHead, ...tailValue]);\n        mergeHead[k] = Array.from(s.values());\n      }\n    } else {\n      mergeHead[k] = mergeTail[k];\n    }\n  }\n}\n","import { registerGridHandlers } from './grid-primitives/index';\nimport { registerColumnOrderHandlers } from './column-order/index';\nimport { registerColumnDefHandlers } from './column-def/index';\n\nexport function registerBuiltInHandlers() {\n  registerGridHandlers();\n  registerColumnOrderHandlers();\n  registerColumnDefHandlers();\n}\n","import { Subject, Observable, from } from 'rxjs';\nimport { map, mapTo, filter, take, skip, debounceTime } from 'rxjs/operators';\nimport { Directive, OnDestroy, Injector, Input } from '@angular/core';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, TablePlugin } from '@pebula/ngrid';\nimport { hasState, saveState, loadState, PblNgridStateLoadOptions, PblNgridStateSaveOptions } from './core/index';\nimport { registerBuiltInHandlers } from './core/built-in-handlers/_register';\n\nimport { userSessionPref } from './presets';\n\ndeclare module '@pebula/ngrid/lib/table/services/config' {\n  interface PblNgridConfig {\n    state?: {\n      /** When set to true will enable the state plugin on all table instances by default. */\n      autoEnable?: boolean;\n      /**\n       * Options to use when auto-loading the plugin\n       */\n      autoEnableOptions?: {\n        loadOptions?: PblNgridStateLoadOptions;\n        saveOptions?: PblNgridStateSaveOptions;\n      }\n    };\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    state?: PblNgridStatePlugin;\n  }\n  interface PblNgridPluginExtensionFactories {\n    state: keyof typeof PblNgridStatePlugin;\n  }\n}\n\ninterface InternalStatePluginEvents {\n  phase: 'load' | 'save';\n  position: 'before' | 'after';\n  error?: Error;\n}\n\nexport const PLUGIN_KEY: 'state' = 'state';\n\n@TablePlugin({ id: PLUGIN_KEY, factory: 'create', runOnce: registerBuiltInHandlers })\n@UnRx()\nexport class PblNgridStatePlugin {\n\n  loadOptions?: PblNgridStateLoadOptions;\n  saveOptions?: PblNgridStateSaveOptions;\n\n  afterLoadState: Observable<void>;\n  afterSaveState: Observable<void>;\n  onError: Observable<{ phase: 'save' | 'load'; error: Error; }>;\n\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _events = new Subject<InternalStatePluginEvents>();\n\n  constructor(public grid: PblNgridComponent<any>, protected injector: Injector, protected pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.afterLoadState = this._events.pipe(filter( e => e.phase === 'load' && e.position === 'after'), mapTo(undefined) );\n    this.afterSaveState = this._events.pipe(filter( e => e.phase === 'save' && e.position === 'after'), mapTo(undefined) );\n    this.onError = this._events.pipe(filter( e => !!e.error ), map( e => ({ phase: e.phase, error: e.error })) );\n\n    pluginCtrl.events\n      .pipe(\n        filter( e => e.kind === 'onInvalidateHeaders'),\n        take(1),\n      )\n      .subscribe( event => {\n        const initialLoadOptions = { ...(this.loadOptions || {}), avoidRedraw: true };\n        hasState(grid, initialLoadOptions)\n          .then( value => {\n            if (value) {\n              return this._load(initialLoadOptions);\n            }\n          })\n          .then( () => {\n            pluginCtrl.events\n            .pipe(\n              filter( e => e.kind === 'onResizeRow'),\n              skip(1),\n              debounceTime(500),\n            )\n            .subscribe( event => this.save() );\n          });\n      });\n\n    pluginCtrl.events\n      .subscribe( event => {\n        if (event.kind === 'onDestroy') {\n          event.wait(this.save());\n          this._events.complete();\n        }\n      });\n  }\n\n  static create(table: PblNgridComponent<any>, injector: Injector): PblNgridStatePlugin {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    return new PblNgridStatePlugin(table, injector, pluginCtrl);\n  }\n\n  load(): Promise<void> {\n    return this._load(this.loadOptions);\n  }\n\n  save(): Promise<void> {\n    return saveState(this.grid, this.saveOptions)\n      .then( () => this._events.next({phase: 'save', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'save', position: 'after', error }) );\n  }\n\n  destroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  private _load(loadOptions: PblNgridStateLoadOptions): Promise<void> {\n    return loadState(this.grid, loadOptions)\n      .then( () => this._events.next({phase: 'load', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'load', position: 'after', error }) );\n  }\n\n}\n\n@Directive({\n  selector: 'pbl-ngrid[persistState]', // tslint:disable-line:directive-selector\n  outputs: ['afterLoadState', 'afterSaveState', 'onError'],\n})\n@UnRx()\nexport class PblNgridStatePluginDirective extends PblNgridStatePlugin implements OnDestroy {\n\n  @Input() loadOptions: PblNgridStateLoadOptions = { include: userSessionPref() };\n  @Input() saveOptions: PblNgridStateSaveOptions = { include: userSessionPref() };\n\n  constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController) {\n    super(grid, injector, pluginCtrl);\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PblNgridPluginController, PblNgridModule, PblNgridConfigService } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY, PblNgridStatePluginDirective } from './state-plugin';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n  ],\n  declarations: [\n    PblNgridStatePluginDirective,\n  ],\n  exports: [\n    PblNgridStatePluginDirective,\n  ],\n  providers: [ ],\n  entryComponents: [ ],\n})\nexport class PblNgridStatePluginModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridStatePluginModule,\n              configService: PblNgridConfigService) {\n\n  if (parentModule) {\n    return;\n  }\n\n  PblNgridPluginController.created\n    .subscribe( event => {\n      const targetEventsConfig = configService.get(PLUGIN_KEY);\n      if (targetEventsConfig && targetEventsConfig.autoEnable === true) {\n        const pluginCtrl = event.controller;\n        let subscription = pluginCtrl.events\n          .subscribe( evt => {\n            if (evt.kind === 'onInit') {\n              if (!pluginCtrl.hasPlugin(PLUGIN_KEY)) {\n                const instance = pluginCtrl.createPlugin(PLUGIN_KEY);\n                if (targetEventsConfig.autoEnableOptions) {\n                  instance.loadOptions = targetEventsConfig.autoEnableOptions.loadOptions;\n                  instance.saveOptions = targetEventsConfig.autoEnableOptions.saveOptions;\n                }\n              }\n              subscription.unsubscribe();\n              subscription = undefined;\n            }\n          });\n      }\n    });\n  }\n}\n"],"names":["U.normalizeOptions","U.resolveId","U.createChunkSectionContext","U.stateKeyPredicateFactory","U.createChunkContext","U.serialize","U.deserialize"],"mappings":"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"}